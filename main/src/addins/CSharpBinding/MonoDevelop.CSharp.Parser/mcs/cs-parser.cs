// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

#line 2 "cs-parser.jay"
//
// cs-parser.jay: The Parser for the C# compiler
//
// Authors: Miguel de Icaza (miguel@gnu.org)
//          Ravi Pratap     (ravi@ximian.com)
//          Marek Safar		(marek.safar@gmail.com)
//
// Dual Licensed under the terms of the GNU GPL and the MIT X11 license
//
// (C) 2001 Ximian, Inc (http://www.ximian.com)
// (C) 2004 Novell, Inc
//
// TODO:
//   (1) Figure out why error productions dont work.  `type-declaration' is a
//       great spot to put an `error' because you can reproduce it with this input:
//	 "public X { }"
//

using System.Text;
using System.IO;
using System;
using System.Collections.Generic;

namespace Mono.CSharp
{
	/// <summary>
	///    The C# Parser
	/// </summary>
	public class CSharpParser
	{
		[Flags]
		enum ParameterModifierType
		{
			Ref		= 1 << 1,
			Out		= 1 << 2,
			This	= 1 << 3,
			Params	= 1 << 4,
			Arglist	= 1 << 5,
			DefaultValue = 1 << 6,
			
			All = Ref | Out | This | Params | Arglist | DefaultValue
		}
		
		static readonly object ModifierNone = 0;
	
		NamespaceEntry  current_namespace;
		TypeContainer   current_container;
		DeclSpace	current_class;
		PropertyBase current_property;
		EventProperty current_event;
		EventField current_event_field;
		FieldBase current_field;
	
		/// <summary>
		///   Current block is used to add statements as we find
		///   them.  
		/// </summary>
		Block      current_block;
		
		BlockVariableDeclaration current_variable;

		Delegate   current_delegate;
		
		AnonymousMethodExpression current_anonymous_method;

		/// <summary>
		///   This is used by the unary_expression code to resolve
		///   a name against a parameter.  
		/// </summary>
		
		// FIXME: This is very ugly and it's very hard to reset it correctly
		// on all places, especially when some parameters are autogenerated.
		ParametersCompiled current_local_parameters;

		bool parsing_anonymous_method;

		///
		/// An out-of-band stack.
		///
		static Stack<object> oob_stack;

		///
		/// Controls the verbosity of the errors produced by the parser
		///
		static public int yacc_verbose_flag;

		/// 
		/// Used by the interactive shell, flags whether EOF was reached
		/// and an error was produced
		///
		public bool UnexpectedEOF;

		///
		/// The current file.
		///
		CompilationUnit file;

		///
		/// Temporary Xml documentation cache.
		/// For enum types, we need one more temporary store.
		///
		string tmpComment;
		string enumTypeComment;
	       		
		/// Current attribute target
		string current_attr_target;
		
		/// assembly and module attribute definitions are enabled
		bool global_attrs_enabled = true;
		
		ParameterModifierType valid_param_mod;
		
		bool default_parameter_used;

		/// When using the interactive parser, this holds the
		/// resulting expression
		public object InteractiveResult;

		//
		// Keeps track of global data changes to undo on parser error
		//
		public Undo undo;
		
		Stack<Linq.QueryBlock> linq_clause_blocks;

		// A counter to create new class names in interactive mode
		static int class_count;
		
		CompilerContext compiler;
		
		//
		// Instead of allocating carrier array everytime we
		// share the bucket for very common constructs which can never
		// be recursive
		//
		static List<Parameter> parameters_bucket = new List<Parameter> (6);
		
		//
		// Full AST support members
		//
		LocationsBag lbag;
		UsingsBag ubag;
		List<Tuple<Modifiers, Location>> mod_locations;
		Location parameterModifierLocation;
#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = System.Console.Out;

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }

  /* An EOF token */
  public int eof_token;

  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
//t  internal yydebug.yyDebug debug;

  protected const int yyFinal = 9;
//t // Put this array into a separate class so it is only initialized if debugging is actually used
//t // Use MarshalByRefObject to disable inlining
//t class YYRules : MarshalByRefObject {
//t  public static readonly string [] yyRule = {
//t    "$accept : compilation_unit",
//t    "compilation_unit : outer_declarations opt_EOF",
//t    "compilation_unit : outer_declarations global_attributes opt_EOF",
//t    "compilation_unit : global_attributes opt_EOF",
//t    "compilation_unit : opt_EOF",
//t    "$$1 :",
//t    "compilation_unit : interactive_parsing $$1 opt_EOF",
//t    "opt_EOF :",
//t    "opt_EOF : EOF",
//t    "outer_declarations : outer_declaration",
//t    "outer_declarations : outer_declarations outer_declaration",
//t    "outer_declaration : extern_alias_directive",
//t    "outer_declaration : using_directive",
//t    "outer_declaration : namespace_member_declaration",
//t    "extern_alias_directives : extern_alias_directive",
//t    "extern_alias_directives : extern_alias_directives extern_alias_directive",
//t    "extern_alias_directive : EXTERN_ALIAS IDENTIFIER IDENTIFIER SEMICOLON",
//t    "extern_alias_directive : EXTERN_ALIAS error",
//t    "using_directives : using_directive",
//t    "using_directives : using_directives using_directive",
//t    "using_directive : using_alias_directive",
//t    "using_directive : using_namespace_directive",
//t    "using_alias_directive : USING IDENTIFIER ASSIGN namespace_or_type_name SEMICOLON",
//t    "using_alias_directive : USING error",
//t    "using_namespace_directive : USING namespace_name SEMICOLON",
//t    "$$2 :",
//t    "namespace_declaration : opt_attributes NAMESPACE qualified_identifier $$2 namespace_body opt_semicolon",
//t    "qualified_identifier : IDENTIFIER",
//t    "qualified_identifier : qualified_identifier DOT IDENTIFIER",
//t    "qualified_identifier : error",
//t    "opt_semicolon :",
//t    "opt_semicolon : SEMICOLON",
//t    "opt_comma :",
//t    "opt_comma : COMMA",
//t    "namespace_name : namespace_or_type_name",
//t    "$$3 :",
//t    "namespace_body : OPEN_BRACE $$3 opt_extern_alias_directives opt_using_directives opt_namespace_member_declarations CLOSE_BRACE",
//t    "opt_using_directives :",
//t    "opt_using_directives : using_directives",
//t    "opt_extern_alias_directives :",
//t    "opt_extern_alias_directives : extern_alias_directives",
//t    "opt_namespace_member_declarations :",
//t    "opt_namespace_member_declarations : namespace_member_declarations",
//t    "namespace_member_declarations : namespace_member_declaration",
//t    "namespace_member_declarations : namespace_member_declarations namespace_member_declaration",
//t    "namespace_member_declaration : type_declaration",
//t    "namespace_member_declaration : namespace_declaration",
//t    "namespace_member_declaration : field_declaration",
//t    "namespace_member_declaration : method_declaration",
//t    "namespace_member_declaration : error",
//t    "type_declaration : class_declaration",
//t    "type_declaration : struct_declaration",
//t    "type_declaration : interface_declaration",
//t    "type_declaration : enum_declaration",
//t    "type_declaration : delegate_declaration",
//t    "global_attributes : attribute_sections",
//t    "opt_attributes :",
//t    "opt_attributes : attribute_sections",
//t    "attribute_sections : attribute_section",
//t    "attribute_sections : attribute_sections attribute_section",
//t    "attribute_section : OPEN_BRACKET attribute_target_specifier attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_section : OPEN_BRACKET attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_target_specifier : attribute_target COLON",
//t    "attribute_target : IDENTIFIER",
//t    "attribute_target : EVENT",
//t    "attribute_target : RETURN",
//t    "attribute_target : error",
//t    "attribute_list : attribute",
//t    "attribute_list : attribute_list COMMA attribute",
//t    "$$4 :",
//t    "attribute : attribute_name $$4 opt_attribute_arguments",
//t    "attribute_name : namespace_or_type_name",
//t    "opt_attribute_arguments :",
//t    "opt_attribute_arguments : OPEN_PARENS attribute_arguments CLOSE_PARENS",
//t    "attribute_arguments :",
//t    "attribute_arguments : positional_or_named_argument",
//t    "attribute_arguments : named_attribute_argument",
//t    "attribute_arguments : attribute_arguments COMMA positional_or_named_argument",
//t    "attribute_arguments : attribute_arguments COMMA named_attribute_argument",
//t    "positional_or_named_argument : expression",
//t    "positional_or_named_argument : named_argument",
//t    "$$5 :",
//t    "named_attribute_argument : IDENTIFIER ASSIGN $$5 expression",
//t    "named_argument : IDENTIFIER COLON opt_named_modifier expression",
//t    "opt_named_modifier :",
//t    "opt_named_modifier : REF",
//t    "opt_named_modifier : OUT",
//t    "opt_class_member_declarations :",
//t    "opt_class_member_declarations : class_member_declarations",
//t    "class_member_declarations : class_member_declaration",
//t    "class_member_declarations : class_member_declarations class_member_declaration",
//t    "class_member_declaration : constant_declaration",
//t    "class_member_declaration : field_declaration",
//t    "class_member_declaration : method_declaration",
//t    "class_member_declaration : property_declaration",
//t    "class_member_declaration : event_declaration",
//t    "class_member_declaration : indexer_declaration",
//t    "class_member_declaration : operator_declaration",
//t    "class_member_declaration : constructor_declaration",
//t    "class_member_declaration : destructor_declaration",
//t    "class_member_declaration : type_declaration",
//t    "class_member_declaration : error",
//t    "$$6 :",
//t    "$$7 :",
//t    "$$8 :",
//t    "$$9 :",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT $$6 type_declaration_name $$7 opt_class_base opt_type_parameter_constraints_clauses $$8 struct_body $$9 opt_semicolon",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT error",
//t    "$$10 :",
//t    "struct_body : OPEN_BRACE $$10 opt_struct_member_declarations CLOSE_BRACE",
//t    "opt_struct_member_declarations :",
//t    "opt_struct_member_declarations : struct_member_declarations",
//t    "struct_member_declarations : struct_member_declaration",
//t    "struct_member_declarations : struct_member_declarations struct_member_declaration",
//t    "struct_member_declaration : constant_declaration",
//t    "struct_member_declaration : field_declaration",
//t    "struct_member_declaration : method_declaration",
//t    "struct_member_declaration : property_declaration",
//t    "struct_member_declaration : event_declaration",
//t    "struct_member_declaration : indexer_declaration",
//t    "struct_member_declaration : operator_declaration",
//t    "struct_member_declaration : constructor_declaration",
//t    "struct_member_declaration : type_declaration",
//t    "struct_member_declaration : destructor_declaration",
//t    "$$11 :",
//t    "constant_declaration : opt_attributes opt_modifiers CONST type IDENTIFIER $$11 constant_initializer opt_constant_declarators SEMICOLON",
//t    "opt_constant_declarators :",
//t    "opt_constant_declarators : constant_declarators",
//t    "constant_declarators : constant_declarator",
//t    "constant_declarators : constant_declarators constant_declarator",
//t    "constant_declarator : COMMA IDENTIFIER constant_initializer",
//t    "$$12 :",
//t    "constant_initializer : ASSIGN $$12 constant_initializer_expr",
//t    "constant_initializer : error",
//t    "constant_initializer_expr : constant_expression",
//t    "constant_initializer_expr : array_initializer",
//t    "$$13 :",
//t    "field_declaration : opt_attributes opt_modifiers member_type IDENTIFIER $$13 opt_field_initializer opt_field_declarators SEMICOLON",
//t    "$$14 :",
//t    "field_declaration : opt_attributes opt_modifiers FIXED simple_type IDENTIFIER $$14 fixed_field_size opt_fixed_field_declarators SEMICOLON",
//t    "field_declaration : opt_attributes opt_modifiers FIXED simple_type error SEMICOLON",
//t    "opt_field_initializer :",
//t    "$$15 :",
//t    "opt_field_initializer : ASSIGN $$15 variable_initializer",
//t    "opt_field_declarators :",
//t    "opt_field_declarators : field_declarators",
//t    "field_declarators : field_declarator",
//t    "field_declarators : field_declarators field_declarator",
//t    "field_declarator : COMMA IDENTIFIER",
//t    "$$16 :",
//t    "field_declarator : COMMA IDENTIFIER ASSIGN $$16 variable_initializer",
//t    "opt_fixed_field_declarators :",
//t    "opt_fixed_field_declarators : fixed_field_declarators",
//t    "fixed_field_declarators : fixed_field_declarator",
//t    "fixed_field_declarators : fixed_field_declarators fixed_field_declarator",
//t    "fixed_field_declarator : COMMA IDENTIFIER fixed_field_size",
//t    "$$17 :",
//t    "fixed_field_size : OPEN_BRACKET $$17 expression CLOSE_BRACKET",
//t    "fixed_field_size : OPEN_BRACKET error",
//t    "variable_initializer : expression",
//t    "variable_initializer : array_initializer",
//t    "variable_initializer : error",
//t    "$$18 :",
//t    "method_declaration : method_header $$18 method_body",
//t    "$$19 :",
//t    "$$20 :",
//t    "method_header : opt_attributes opt_modifiers member_type method_declaration_name OPEN_PARENS $$19 opt_formal_parameter_list CLOSE_PARENS $$20 opt_type_parameter_constraints_clauses",
//t    "$$21 :",
//t    "$$22 :",
//t    "method_header : opt_attributes opt_modifiers PARTIAL VOID method_declaration_name OPEN_PARENS $$21 opt_formal_parameter_list CLOSE_PARENS $$22 opt_type_parameter_constraints_clauses",
//t    "method_header : opt_attributes opt_modifiers member_type modifiers method_declaration_name OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS",
//t    "method_body : block",
//t    "method_body : SEMICOLON",
//t    "opt_formal_parameter_list :",
//t    "opt_formal_parameter_list : formal_parameter_list",
//t    "formal_parameter_list : fixed_parameters",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array",
//t    "formal_parameter_list : fixed_parameters COMMA arglist_modifier",
//t    "formal_parameter_list : parameter_array COMMA error",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array COMMA error",
//t    "formal_parameter_list : arglist_modifier COMMA error",
//t    "formal_parameter_list : fixed_parameters COMMA ARGLIST COMMA error",
//t    "formal_parameter_list : parameter_array",
//t    "formal_parameter_list : arglist_modifier",
//t    "formal_parameter_list : error",
//t    "fixed_parameters : fixed_parameter",
//t    "fixed_parameters : fixed_parameters COMMA fixed_parameter",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER OPEN_BRACKET CLOSE_BRACKET",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type error",
//t    "$$23 :",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER ASSIGN $$23 constant_expression",
//t    "opt_parameter_modifier :",
//t    "opt_parameter_modifier : parameter_modifiers",
//t    "parameter_modifiers : parameter_modifier",
//t    "parameter_modifiers : parameter_modifiers parameter_modifier",
//t    "parameter_modifier : REF",
//t    "parameter_modifier : OUT",
//t    "parameter_modifier : THIS",
//t    "parameter_array : opt_attributes params_modifier type IDENTIFIER",
//t    "parameter_array : opt_attributes params_modifier type IDENTIFIER ASSIGN constant_expression",
//t    "parameter_array : opt_attributes params_modifier type error",
//t    "params_modifier : PARAMS",
//t    "params_modifier : PARAMS parameter_modifier",
//t    "params_modifier : PARAMS params_modifier",
//t    "arglist_modifier : ARGLIST",
//t    "$$24 :",
//t    "$$25 :",
//t    "$$26 :",
//t    "property_declaration : opt_attributes opt_modifiers member_type member_declaration_name $$24 OPEN_BRACE $$25 accessor_declarations $$26 CLOSE_BRACE",
//t    "$$27 :",
//t    "$$28 :",
//t    "$$29 :",
//t    "indexer_declaration : opt_attributes opt_modifiers member_type indexer_declaration_name OPEN_BRACKET $$27 opt_formal_parameter_list CLOSE_BRACKET OPEN_BRACE $$28 accessor_declarations $$29 CLOSE_BRACE",
//t    "accessor_declarations : get_accessor_declaration",
//t    "accessor_declarations : get_accessor_declaration accessor_declarations",
//t    "accessor_declarations : set_accessor_declaration",
//t    "accessor_declarations : set_accessor_declaration accessor_declarations",
//t    "accessor_declarations : error",
//t    "$$30 :",
//t    "get_accessor_declaration : opt_attributes opt_modifiers GET $$30 accessor_body",
//t    "$$31 :",
//t    "set_accessor_declaration : opt_attributes opt_modifiers SET $$31 accessor_body",
//t    "accessor_body : block",
//t    "accessor_body : SEMICOLON",
//t    "accessor_body : error",
//t    "$$32 :",
//t    "$$33 :",
//t    "$$34 :",
//t    "$$35 :",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE $$32 type_declaration_name $$33 opt_class_base opt_type_parameter_constraints_clauses $$34 OPEN_BRACE opt_interface_member_declarations CLOSE_BRACE $$35 opt_semicolon",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE error",
//t    "opt_interface_member_declarations :",
//t    "opt_interface_member_declarations : interface_member_declarations",
//t    "interface_member_declarations : interface_member_declaration",
//t    "interface_member_declarations : interface_member_declarations interface_member_declaration",
//t    "interface_member_declaration : constant_declaration",
//t    "interface_member_declaration : field_declaration",
//t    "interface_member_declaration : method_declaration",
//t    "interface_member_declaration : property_declaration",
//t    "interface_member_declaration : event_declaration",
//t    "interface_member_declaration : indexer_declaration",
//t    "interface_member_declaration : operator_declaration",
//t    "interface_member_declaration : constructor_declaration",
//t    "interface_member_declaration : type_declaration",
//t    "$$36 :",
//t    "operator_declaration : opt_attributes opt_modifiers operator_declarator $$36 operator_body",
//t    "operator_body : block",
//t    "operator_body : SEMICOLON",
//t    "operator_type : type_expression_or_array",
//t    "operator_type : VOID",
//t    "$$37 :",
//t    "operator_declarator : operator_type OPERATOR overloadable_operator OPEN_PARENS $$37 opt_formal_parameter_list CLOSE_PARENS",
//t    "operator_declarator : conversion_operator_declarator",
//t    "overloadable_operator : BANG",
//t    "overloadable_operator : TILDE",
//t    "overloadable_operator : OP_INC",
//t    "overloadable_operator : OP_DEC",
//t    "overloadable_operator : TRUE",
//t    "overloadable_operator : FALSE",
//t    "overloadable_operator : PLUS",
//t    "overloadable_operator : MINUS",
//t    "overloadable_operator : STAR",
//t    "overloadable_operator : DIV",
//t    "overloadable_operator : PERCENT",
//t    "overloadable_operator : BITWISE_AND",
//t    "overloadable_operator : BITWISE_OR",
//t    "overloadable_operator : CARRET",
//t    "overloadable_operator : OP_SHIFT_LEFT",
//t    "overloadable_operator : OP_SHIFT_RIGHT",
//t    "overloadable_operator : OP_EQ",
//t    "overloadable_operator : OP_NE",
//t    "overloadable_operator : OP_GT",
//t    "overloadable_operator : OP_LT",
//t    "overloadable_operator : OP_GE",
//t    "overloadable_operator : OP_LE",
//t    "$$38 :",
//t    "conversion_operator_declarator : IMPLICIT OPERATOR type OPEN_PARENS $$38 opt_formal_parameter_list CLOSE_PARENS",
//t    "$$39 :",
//t    "conversion_operator_declarator : EXPLICIT OPERATOR type OPEN_PARENS $$39 opt_formal_parameter_list CLOSE_PARENS",
//t    "conversion_operator_declarator : IMPLICIT error",
//t    "conversion_operator_declarator : EXPLICIT error",
//t    "constructor_declaration : constructor_declarator constructor_body",
//t    "$$40 :",
//t    "$$41 :",
//t    "constructor_declarator : opt_attributes opt_modifiers IDENTIFIER $$40 OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS $$41 opt_constructor_initializer",
//t    "constructor_body : block_prepared",
//t    "constructor_body : SEMICOLON",
//t    "opt_constructor_initializer :",
//t    "opt_constructor_initializer : constructor_initializer",
//t    "$$42 :",
//t    "constructor_initializer : COLON BASE OPEN_PARENS $$42 opt_argument_list CLOSE_PARENS",
//t    "$$43 :",
//t    "constructor_initializer : COLON THIS OPEN_PARENS $$43 opt_argument_list CLOSE_PARENS",
//t    "constructor_initializer : error",
//t    "$$44 :",
//t    "destructor_declaration : opt_attributes opt_modifiers TILDE $$44 IDENTIFIER OPEN_PARENS CLOSE_PARENS method_body",
//t    "$$45 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name $$45 opt_event_initializer opt_event_declarators SEMICOLON",
//t    "$$46 :",
//t    "$$47 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name OPEN_BRACE $$46 event_accessor_declarations $$47 CLOSE_BRACE",
//t    "opt_event_initializer :",
//t    "$$48 :",
//t    "opt_event_initializer : ASSIGN $$48 event_variable_initializer",
//t    "opt_event_declarators :",
//t    "opt_event_declarators : event_declarators",
//t    "event_declarators : event_declarator",
//t    "event_declarators : event_declarators event_declarator",
//t    "event_declarator : COMMA IDENTIFIER",
//t    "$$49 :",
//t    "event_declarator : COMMA IDENTIFIER ASSIGN $$49 event_variable_initializer",
//t    "$$50 :",
//t    "event_variable_initializer : $$50 variable_initializer",
//t    "event_accessor_declarations : add_accessor_declaration remove_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration add_accessor_declaration",
//t    "event_accessor_declarations : add_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration",
//t    "event_accessor_declarations : error",
//t    "$$51 :",
//t    "add_accessor_declaration : opt_attributes opt_modifiers ADD $$51 event_accessor_block",
//t    "$$52 :",
//t    "remove_accessor_declaration : opt_attributes opt_modifiers REMOVE $$52 event_accessor_block",
//t    "event_accessor_block : opt_semicolon",
//t    "event_accessor_block : block",
//t    "$$53 :",
//t    "$$54 :",
//t    "$$55 :",
//t    "enum_declaration : opt_attributes opt_modifiers ENUM type_declaration_name opt_enum_base $$53 OPEN_BRACE $$54 opt_enum_member_declarations $$55 CLOSE_BRACE opt_semicolon",
//t    "opt_enum_base :",
//t    "opt_enum_base : COLON type",
//t    "opt_enum_base : COLON error",
//t    "opt_enum_member_declarations :",
//t    "opt_enum_member_declarations : enum_member_declarations",
//t    "opt_enum_member_declarations : enum_member_declarations COMMA",
//t    "enum_member_declarations : enum_member_declaration",
//t    "enum_member_declarations : enum_member_declarations COMMA enum_member_declaration",
//t    "enum_member_declaration : opt_attributes IDENTIFIER",
//t    "$$56 :",
//t    "enum_member_declaration : opt_attributes IDENTIFIER $$56 ASSIGN constant_expression",
//t    "$$57 :",
//t    "$$58 :",
//t    "$$59 :",
//t    "delegate_declaration : opt_attributes opt_modifiers DELEGATE member_type type_declaration_name OPEN_PARENS $$57 opt_formal_parameter_list CLOSE_PARENS $$58 opt_type_parameter_constraints_clauses $$59 SEMICOLON",
//t    "opt_nullable :",
//t    "opt_nullable : INTERR_NULLABLE",
//t    "namespace_or_type_name : member_name",
//t    "namespace_or_type_name : qualified_alias_member IDENTIFIER opt_type_argument_list",
//t    "member_name : type_name",
//t    "member_name : namespace_or_type_name DOT IDENTIFIER opt_type_argument_list",
//t    "type_name : IDENTIFIER opt_type_argument_list",
//t    "opt_type_argument_list :",
//t    "opt_type_argument_list : OP_GENERICS_LT type_arguments OP_GENERICS_GT",
//t    "opt_type_argument_list : OP_GENERICS_LT error",
//t    "type_arguments : type",
//t    "type_arguments : type_arguments COMMA type",
//t    "$$60 :",
//t    "type_declaration_name : IDENTIFIER $$60 opt_type_parameter_list",
//t    "member_declaration_name : method_declaration_name",
//t    "method_declaration_name : type_declaration_name",
//t    "method_declaration_name : explicit_interface IDENTIFIER opt_type_parameter_list",
//t    "indexer_declaration_name : THIS",
//t    "indexer_declaration_name : explicit_interface THIS",
//t    "explicit_interface : IDENTIFIER opt_type_argument_list DOT",
//t    "explicit_interface : qualified_alias_member IDENTIFIER opt_type_argument_list DOT",
//t    "explicit_interface : explicit_interface IDENTIFIER opt_type_argument_list DOT",
//t    "opt_type_parameter_list :",
//t    "opt_type_parameter_list : OP_GENERICS_LT_DECL type_parameters OP_GENERICS_GT",
//t    "type_parameters : type_parameter",
//t    "type_parameters : type_parameters COMMA type_parameter",
//t    "type_parameter : opt_attributes opt_type_parameter_variance IDENTIFIER",
//t    "type_parameter : error",
//t    "type_and_void : type_expression_or_array",
//t    "type_and_void : VOID",
//t    "member_type : type_and_void",
//t    "type : type_expression_or_array",
//t    "type : VOID",
//t    "simple_type : type_expression",
//t    "simple_type : VOID",
//t    "parameter_type : type_expression_or_array",
//t    "parameter_type : VOID",
//t    "type_expression_or_array : type_expression",
//t    "type_expression_or_array : type_expression rank_specifiers",
//t    "type_expression : namespace_or_type_name opt_nullable",
//t    "type_expression : namespace_or_type_name pointer_stars",
//t    "type_expression : builtin_types opt_nullable",
//t    "type_expression : builtin_types pointer_stars",
//t    "type_expression : VOID pointer_stars",
//t    "type_list : base_type_name",
//t    "type_list : type_list COMMA base_type_name",
//t    "base_type_name : type",
//t    "base_type_name : error",
//t    "builtin_types : OBJECT",
//t    "builtin_types : STRING",
//t    "builtin_types : BOOL",
//t    "builtin_types : DECIMAL",
//t    "builtin_types : FLOAT",
//t    "builtin_types : DOUBLE",
//t    "builtin_types : integral_type",
//t    "integral_type : SBYTE",
//t    "integral_type : BYTE",
//t    "integral_type : SHORT",
//t    "integral_type : USHORT",
//t    "integral_type : INT",
//t    "integral_type : UINT",
//t    "integral_type : LONG",
//t    "integral_type : ULONG",
//t    "integral_type : CHAR",
//t    "primary_expression : primary_expression_or_type",
//t    "primary_expression : literal",
//t    "primary_expression : array_creation_expression",
//t    "primary_expression : parenthesized_expression",
//t    "primary_expression : default_value_expression",
//t    "primary_expression : invocation_expression",
//t    "primary_expression : element_access",
//t    "primary_expression : this_access",
//t    "primary_expression : base_access",
//t    "primary_expression : post_increment_expression",
//t    "primary_expression : post_decrement_expression",
//t    "primary_expression : object_or_delegate_creation_expression",
//t    "primary_expression : anonymous_type_expression",
//t    "primary_expression : typeof_expression",
//t    "primary_expression : sizeof_expression",
//t    "primary_expression : checked_expression",
//t    "primary_expression : unchecked_expression",
//t    "primary_expression : pointer_member_access",
//t    "primary_expression : anonymous_method_expression",
//t    "primary_expression_or_type : IDENTIFIER opt_type_argument_list",
//t    "primary_expression_or_type : IDENTIFIER GENERATE_COMPLETION",
//t    "primary_expression_or_type : member_access",
//t    "literal : boolean_literal",
//t    "literal : LITERAL",
//t    "literal : NULL",
//t    "boolean_literal : TRUE",
//t    "boolean_literal : FALSE",
//t    "open_parens_any : OPEN_PARENS",
//t    "open_parens_any : OPEN_PARENS_CAST",
//t    "close_parens : CLOSE_PARENS",
//t    "close_parens : COMPLETE_COMPLETION",
//t    "parenthesized_expression : OPEN_PARENS expression CLOSE_PARENS",
//t    "parenthesized_expression : OPEN_PARENS expression COMPLETE_COMPLETION",
//t    "member_access : primary_expression DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : builtin_types DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : BASE DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : qualified_alias_member IDENTIFIER opt_type_argument_list",
//t    "member_access : primary_expression DOT GENERATE_COMPLETION",
//t    "member_access : primary_expression DOT IDENTIFIER GENERATE_COMPLETION",
//t    "member_access : builtin_types DOT GENERATE_COMPLETION",
//t    "member_access : builtin_types DOT IDENTIFIER GENERATE_COMPLETION",
//t    "invocation_expression : primary_expression open_parens_any opt_argument_list close_parens",
//t    "opt_object_or_collection_initializer :",
//t    "opt_object_or_collection_initializer : object_or_collection_initializer",
//t    "object_or_collection_initializer : OPEN_BRACE opt_member_initializer_list close_brace_or_complete_completion",
//t    "object_or_collection_initializer : OPEN_BRACE member_initializer_list COMMA CLOSE_BRACE",
//t    "opt_member_initializer_list :",
//t    "opt_member_initializer_list : member_initializer_list",
//t    "member_initializer_list : member_initializer",
//t    "member_initializer_list : member_initializer_list COMMA member_initializer",
//t    "member_initializer_list : member_initializer_list error",
//t    "member_initializer : IDENTIFIER ASSIGN initializer_value",
//t    "member_initializer : GENERATE_COMPLETION",
//t    "member_initializer : non_assignment_expression opt_COMPLETE_COMPLETION",
//t    "member_initializer : OPEN_BRACE expression_list CLOSE_BRACE",
//t    "member_initializer : OPEN_BRACE CLOSE_BRACE",
//t    "initializer_value : expression",
//t    "initializer_value : object_or_collection_initializer",
//t    "opt_argument_list :",
//t    "opt_argument_list : argument_list",
//t    "argument_list : argument_or_named_argument",
//t    "argument_list : argument_list COMMA argument",
//t    "argument_list : argument_list COMMA named_argument",
//t    "argument_list : argument_list COMMA",
//t    "argument_list : COMMA error",
//t    "argument : expression",
//t    "argument : non_simple_argument",
//t    "argument_or_named_argument : argument",
//t    "argument_or_named_argument : named_argument",
//t    "non_simple_argument : REF variable_reference",
//t    "non_simple_argument : OUT variable_reference",
//t    "non_simple_argument : ARGLIST OPEN_PARENS argument_list CLOSE_PARENS",
//t    "non_simple_argument : ARGLIST OPEN_PARENS CLOSE_PARENS",
//t    "variable_reference : expression",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "expression_list : expression",
//t    "expression_list : expression_list COMMA expression",
//t    "expression_list : expression_list error",
//t    "expression_list_arguments : expression_list_argument",
//t    "expression_list_arguments : expression_list_arguments COMMA expression_list_argument",
//t    "expression_list_argument : expression",
//t    "expression_list_argument : named_argument",
//t    "this_access : THIS",
//t    "base_access : BASE OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "base_access : BASE OPEN_BRACKET error",
//t    "post_increment_expression : primary_expression OP_INC",
//t    "post_decrement_expression : primary_expression OP_DEC",
//t    "object_or_delegate_creation_expression : NEW new_expr_type open_parens_any opt_argument_list CLOSE_PARENS opt_object_or_collection_initializer",
//t    "object_or_delegate_creation_expression : NEW new_expr_type object_or_collection_initializer",
//t    "array_creation_expression : NEW new_expr_type OPEN_BRACKET_EXPR expression_list CLOSE_BRACKET opt_rank_specifier opt_array_initializer",
//t    "array_creation_expression : NEW new_expr_type rank_specifiers opt_array_initializer",
//t    "array_creation_expression : NEW rank_specifiers array_initializer",
//t    "array_creation_expression : NEW new_expr_type OPEN_BRACKET CLOSE_BRACKET OPEN_BRACKET_EXPR error CLOSE_BRACKET",
//t    "array_creation_expression : NEW new_expr_type error",
//t    "$$61 :",
//t    "new_expr_type : $$61 simple_type",
//t    "anonymous_type_expression : NEW OPEN_BRACE anonymous_type_parameters_opt_comma CLOSE_BRACE",
//t    "anonymous_type_parameters_opt_comma : anonymous_type_parameters_opt",
//t    "anonymous_type_parameters_opt_comma : anonymous_type_parameters COMMA",
//t    "anonymous_type_parameters_opt :",
//t    "anonymous_type_parameters_opt : anonymous_type_parameters",
//t    "anonymous_type_parameters : anonymous_type_parameter",
//t    "anonymous_type_parameters : anonymous_type_parameters COMMA anonymous_type_parameter",
//t    "anonymous_type_parameter : IDENTIFIER ASSIGN variable_initializer",
//t    "anonymous_type_parameter : IDENTIFIER",
//t    "anonymous_type_parameter : member_access",
//t    "anonymous_type_parameter : error",
//t    "opt_rank_specifier :",
//t    "opt_rank_specifier : rank_specifiers",
//t    "rank_specifiers : rank_specifier",
//t    "rank_specifiers : rank_specifier rank_specifiers",
//t    "rank_specifier : OPEN_BRACKET CLOSE_BRACKET",
//t    "rank_specifier : OPEN_BRACKET dim_separators CLOSE_BRACKET",
//t    "dim_separators : COMMA",
//t    "dim_separators : dim_separators COMMA",
//t    "opt_array_initializer :",
//t    "opt_array_initializer : array_initializer",
//t    "array_initializer : OPEN_BRACE CLOSE_BRACE",
//t    "array_initializer : OPEN_BRACE variable_initializer_list opt_comma CLOSE_BRACE",
//t    "variable_initializer_list : variable_initializer",
//t    "variable_initializer_list : variable_initializer_list COMMA variable_initializer",
//t    "$$62 :",
//t    "typeof_expression : TYPEOF $$62 open_parens_any typeof_type_expression CLOSE_PARENS",
//t    "typeof_type_expression : type_and_void",
//t    "typeof_type_expression : unbound_type_name",
//t    "typeof_type_expression : error",
//t    "unbound_type_name : IDENTIFIER generic_dimension",
//t    "unbound_type_name : qualified_alias_member IDENTIFIER generic_dimension",
//t    "unbound_type_name : unbound_type_name DOT IDENTIFIER",
//t    "unbound_type_name : unbound_type_name DOT IDENTIFIER generic_dimension",
//t    "unbound_type_name : namespace_or_type_name DOT IDENTIFIER generic_dimension",
//t    "generic_dimension : GENERIC_DIMENSION",
//t    "qualified_alias_member : IDENTIFIER DOUBLE_COLON",
//t    "sizeof_expression : SIZEOF open_parens_any type CLOSE_PARENS",
//t    "checked_expression : CHECKED open_parens_any expression CLOSE_PARENS",
//t    "unchecked_expression : UNCHECKED open_parens_any expression CLOSE_PARENS",
//t    "pointer_member_access : primary_expression OP_PTR IDENTIFIER",
//t    "$$63 :",
//t    "anonymous_method_expression : DELEGATE opt_anonymous_method_signature $$63 block",
//t    "opt_anonymous_method_signature :",
//t    "opt_anonymous_method_signature : anonymous_method_signature",
//t    "$$64 :",
//t    "anonymous_method_signature : OPEN_PARENS $$64 opt_formal_parameter_list CLOSE_PARENS",
//t    "default_value_expression : DEFAULT open_parens_any type CLOSE_PARENS",
//t    "unary_expression : primary_expression",
//t    "unary_expression : BANG prefixed_unary_expression",
//t    "unary_expression : TILDE prefixed_unary_expression",
//t    "unary_expression : cast_expression",
//t    "cast_expression : OPEN_PARENS_CAST type CLOSE_PARENS prefixed_unary_expression",
//t    "prefixed_unary_expression : unary_expression",
//t    "prefixed_unary_expression : PLUS prefixed_unary_expression",
//t    "prefixed_unary_expression : MINUS prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_INC prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_DEC prefixed_unary_expression",
//t    "prefixed_unary_expression : STAR prefixed_unary_expression",
//t    "prefixed_unary_expression : BITWISE_AND prefixed_unary_expression",
//t    "multiplicative_expression : prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression STAR prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression DIV prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression PERCENT prefixed_unary_expression",
//t    "additive_expression : multiplicative_expression",
//t    "additive_expression : additive_expression PLUS multiplicative_expression",
//t    "additive_expression : additive_expression MINUS multiplicative_expression",
//t    "additive_expression : parenthesized_expression MINUS multiplicative_expression",
//t    "additive_expression : additive_expression AS type",
//t    "additive_expression : additive_expression IS type",
//t    "shift_expression : additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_LEFT additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_RIGHT additive_expression",
//t    "relational_expression : shift_expression",
//t    "relational_expression : relational_expression OP_LT shift_expression",
//t    "relational_expression : relational_expression OP_GT shift_expression",
//t    "relational_expression : relational_expression OP_LE shift_expression",
//t    "relational_expression : relational_expression OP_GE shift_expression",
//t    "equality_expression : relational_expression",
//t    "equality_expression : equality_expression OP_EQ relational_expression",
//t    "equality_expression : equality_expression OP_NE relational_expression",
//t    "and_expression : equality_expression",
//t    "and_expression : and_expression BITWISE_AND equality_expression",
//t    "exclusive_or_expression : and_expression",
//t    "exclusive_or_expression : exclusive_or_expression CARRET and_expression",
//t    "inclusive_or_expression : exclusive_or_expression",
//t    "inclusive_or_expression : inclusive_or_expression BITWISE_OR exclusive_or_expression",
//t    "conditional_and_expression : inclusive_or_expression",
//t    "conditional_and_expression : conditional_and_expression OP_AND inclusive_or_expression",
//t    "conditional_or_expression : conditional_and_expression",
//t    "conditional_or_expression : conditional_or_expression OP_OR conditional_and_expression",
//t    "null_coalescing_expression : conditional_or_expression",
//t    "null_coalescing_expression : conditional_or_expression OP_COALESCING null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression INTERR expression COLON expression",
//t    "assignment_expression : prefixed_unary_expression ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MULT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_DIV_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MOD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_ADD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SUB_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_LEFT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_RIGHT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_AND_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_OR_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_XOR_ASSIGN expression",
//t    "lambda_parameter_list : lambda_parameter",
//t    "lambda_parameter_list : lambda_parameter_list COMMA lambda_parameter",
//t    "lambda_parameter : parameter_modifier parameter_type IDENTIFIER",
//t    "lambda_parameter : parameter_type IDENTIFIER",
//t    "lambda_parameter : IDENTIFIER",
//t    "opt_lambda_parameter_list :",
//t    "opt_lambda_parameter_list : lambda_parameter_list",
//t    "lambda_expression_body : lambda_expression_body_simple",
//t    "lambda_expression_body : block",
//t    "$$65 :",
//t    "lambda_expression_body_simple : $$65 expression_or_error",
//t    "expression_or_error : expression",
//t    "expression_or_error : error",
//t    "$$66 :",
//t    "lambda_expression : IDENTIFIER ARROW $$66 lambda_expression_body",
//t    "$$67 :",
//t    "$$68 :",
//t    "lambda_expression : OPEN_PARENS_LAMBDA $$67 opt_lambda_parameter_list CLOSE_PARENS ARROW $$68 lambda_expression_body",
//t    "expression : assignment_expression",
//t    "expression : non_assignment_expression",
//t    "non_assignment_expression : conditional_expression",
//t    "non_assignment_expression : lambda_expression",
//t    "non_assignment_expression : query_expression",
//t    "non_assignment_expression : ARGLIST",
//t    "constant_expression : expression",
//t    "boolean_expression : expression",
//t    "$$69 :",
//t    "$$70 :",
//t    "$$71 :",
//t    "$$72 :",
//t    "class_declaration : opt_attributes opt_modifiers opt_partial CLASS $$69 type_declaration_name $$70 opt_class_base opt_type_parameter_constraints_clauses $$71 OPEN_BRACE opt_class_member_declarations CLOSE_BRACE $$72 opt_semicolon",
//t    "opt_partial :",
//t    "opt_partial : PARTIAL",
//t    "opt_modifiers :",
//t    "opt_modifiers : modifiers",
//t    "modifiers : modifier",
//t    "modifiers : modifiers modifier",
//t    "modifier : NEW",
//t    "modifier : PUBLIC",
//t    "modifier : PROTECTED",
//t    "modifier : INTERNAL",
//t    "modifier : PRIVATE",
//t    "modifier : ABSTRACT",
//t    "modifier : SEALED",
//t    "modifier : STATIC",
//t    "modifier : READONLY",
//t    "modifier : VIRTUAL",
//t    "modifier : OVERRIDE",
//t    "modifier : EXTERN",
//t    "modifier : VOLATILE",
//t    "modifier : UNSAFE",
//t    "opt_class_base :",
//t    "opt_class_base : COLON type_list",
//t    "opt_type_parameter_constraints_clauses :",
//t    "opt_type_parameter_constraints_clauses : type_parameter_constraints_clauses",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clause",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clauses type_parameter_constraints_clause",
//t    "type_parameter_constraints_clause : WHERE IDENTIFIER COLON type_parameter_constraints",
//t    "type_parameter_constraints : type_parameter_constraint",
//t    "type_parameter_constraints : type_parameter_constraints COMMA type_parameter_constraint",
//t    "type_parameter_constraint : type",
//t    "type_parameter_constraint : NEW OPEN_PARENS CLOSE_PARENS",
//t    "type_parameter_constraint : CLASS",
//t    "type_parameter_constraint : STRUCT",
//t    "opt_type_parameter_variance :",
//t    "opt_type_parameter_variance : type_parameter_variance",
//t    "type_parameter_variance : OUT",
//t    "type_parameter_variance : IN",
//t    "$$73 :",
//t    "block : OPEN_BRACE $$73 opt_statement_list block_end",
//t    "block_end : CLOSE_BRACE",
//t    "block_end : COMPLETE_COMPLETION",
//t    "$$74 :",
//t    "block_prepared : OPEN_BRACE $$74 opt_statement_list CLOSE_BRACE",
//t    "opt_statement_list :",
//t    "opt_statement_list : statement_list",
//t    "statement_list : statement",
//t    "statement_list : statement_list statement",
//t    "statement : block_variable_declaration",
//t    "statement : valid_declaration_statement",
//t    "statement : labeled_statement",
//t    "statement : error",
//t    "interactive_statement_list : interactive_statement",
//t    "interactive_statement_list : interactive_statement_list interactive_statement",
//t    "interactive_statement : block_variable_declaration",
//t    "interactive_statement : interactive_valid_declaration_statement",
//t    "interactive_statement : labeled_statement",
//t    "valid_declaration_statement : block",
//t    "valid_declaration_statement : empty_statement",
//t    "valid_declaration_statement : expression_statement",
//t    "valid_declaration_statement : selection_statement",
//t    "valid_declaration_statement : iteration_statement",
//t    "valid_declaration_statement : jump_statement",
//t    "valid_declaration_statement : try_statement",
//t    "valid_declaration_statement : checked_statement",
//t    "valid_declaration_statement : unchecked_statement",
//t    "valid_declaration_statement : lock_statement",
//t    "valid_declaration_statement : using_statement",
//t    "valid_declaration_statement : unsafe_statement",
//t    "valid_declaration_statement : fixed_statement",
//t    "interactive_valid_declaration_statement : block",
//t    "interactive_valid_declaration_statement : empty_statement",
//t    "interactive_valid_declaration_statement : interactive_expression_statement",
//t    "interactive_valid_declaration_statement : selection_statement",
//t    "interactive_valid_declaration_statement : iteration_statement",
//t    "interactive_valid_declaration_statement : jump_statement",
//t    "interactive_valid_declaration_statement : try_statement",
//t    "interactive_valid_declaration_statement : checked_statement",
//t    "interactive_valid_declaration_statement : unchecked_statement",
//t    "interactive_valid_declaration_statement : lock_statement",
//t    "interactive_valid_declaration_statement : using_statement",
//t    "interactive_valid_declaration_statement : unsafe_statement",
//t    "interactive_valid_declaration_statement : fixed_statement",
//t    "embedded_statement : valid_declaration_statement",
//t    "embedded_statement : block_variable_declaration",
//t    "embedded_statement : labeled_statement",
//t    "embedded_statement : error",
//t    "empty_statement : SEMICOLON",
//t    "$$75 :",
//t    "labeled_statement : IDENTIFIER COLON $$75 statement",
//t    "variable_type : variable_type_simple",
//t    "variable_type : variable_type_simple rank_specifiers",
//t    "variable_type_simple : primary_expression_or_type opt_nullable",
//t    "variable_type_simple : primary_expression_or_type pointer_stars",
//t    "variable_type_simple : builtin_types opt_nullable",
//t    "variable_type_simple : builtin_types pointer_stars",
//t    "variable_type_simple : VOID pointer_stars",
//t    "variable_type_simple : VOID",
//t    "pointer_stars : pointer_star",
//t    "pointer_stars : pointer_star pointer_stars",
//t    "pointer_star : STAR",
//t    "$$76 :",
//t    "block_variable_declaration : variable_type IDENTIFIER $$76 opt_local_variable_initializer opt_variable_declarators SEMICOLON",
//t    "$$77 :",
//t    "block_variable_declaration : CONST variable_type IDENTIFIER $$77 const_variable_initializer opt_const_declarators SEMICOLON",
//t    "opt_local_variable_initializer :",
//t    "opt_local_variable_initializer : ASSIGN block_variable_initializer",
//t    "opt_local_variable_initializer : error",
//t    "opt_variable_declarators :",
//t    "opt_variable_declarators : variable_declarators",
//t    "variable_declarators : variable_declarator",
//t    "variable_declarators : variable_declarators variable_declarator",
//t    "variable_declarator : COMMA IDENTIFIER",
//t    "variable_declarator : COMMA IDENTIFIER ASSIGN block_variable_initializer",
//t    "const_variable_initializer :",
//t    "const_variable_initializer : ASSIGN constant_initializer_expr",
//t    "opt_const_declarators :",
//t    "opt_const_declarators : const_declarators",
//t    "const_declarators : const_declarator",
//t    "const_declarators : const_declarators const_declarator",
//t    "const_declarator : COMMA IDENTIFIER ASSIGN constant_initializer_expr",
//t    "block_variable_initializer : variable_initializer",
//t    "block_variable_initializer : STACKALLOC simple_type OPEN_BRACKET_EXPR expression CLOSE_BRACKET",
//t    "block_variable_initializer : STACKALLOC simple_type",
//t    "expression_statement : statement_expression SEMICOLON",
//t    "expression_statement : statement_expression COMPLETE_COMPLETION",
//t    "interactive_expression_statement : interactive_statement_expression SEMICOLON",
//t    "interactive_expression_statement : interactive_statement_expression COMPLETE_COMPLETION",
//t    "statement_expression : expression",
//t    "interactive_statement_expression : expression",
//t    "interactive_statement_expression : error",
//t    "selection_statement : if_statement",
//t    "selection_statement : switch_statement",
//t    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
//t    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement ELSE embedded_statement",
//t    "$$78 :",
//t    "switch_statement : SWITCH open_parens_any expression CLOSE_PARENS OPEN_BRACE $$78 opt_switch_sections CLOSE_BRACE",
//t    "opt_switch_sections :",
//t    "opt_switch_sections : switch_sections",
//t    "switch_sections : switch_section",
//t    "switch_sections : switch_sections switch_section",
//t    "switch_sections : error",
//t    "$$79 :",
//t    "switch_section : switch_labels $$79 statement_list",
//t    "switch_labels : switch_label",
//t    "switch_labels : switch_labels switch_label",
//t    "switch_label : CASE constant_expression COLON",
//t    "switch_label : DEFAULT_COLON",
//t    "iteration_statement : while_statement",
//t    "iteration_statement : do_statement",
//t    "iteration_statement : for_statement",
//t    "iteration_statement : foreach_statement",
//t    "while_statement : WHILE open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
//t    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression CLOSE_PARENS SEMICOLON",
//t    "$$80 :",
//t    "for_statement : FOR open_parens_any $$80 opt_for_initializer SEMICOLON opt_for_condition SEMICOLON opt_for_iterator CLOSE_PARENS embedded_statement",
//t    "opt_for_initializer :",
//t    "opt_for_initializer : for_initializer",
//t    "$$81 :",
//t    "for_initializer : variable_type IDENTIFIER $$81 opt_local_variable_initializer opt_variable_declarators",
//t    "for_initializer : statement_expression_list",
//t    "opt_for_condition :",
//t    "opt_for_condition : boolean_expression",
//t    "opt_for_iterator :",
//t    "opt_for_iterator : for_iterator",
//t    "for_iterator : statement_expression_list",
//t    "statement_expression_list : statement_expression",
//t    "statement_expression_list : statement_expression_list COMMA statement_expression",
//t    "foreach_statement : FOREACH open_parens_any type IN expression CLOSE_PARENS",
//t    "$$82 :",
//t    "foreach_statement : FOREACH open_parens_any type IDENTIFIER IN expression CLOSE_PARENS $$82 embedded_statement",
//t    "jump_statement : break_statement",
//t    "jump_statement : continue_statement",
//t    "jump_statement : goto_statement",
//t    "jump_statement : return_statement",
//t    "jump_statement : throw_statement",
//t    "jump_statement : yield_statement",
//t    "break_statement : BREAK SEMICOLON",
//t    "continue_statement : CONTINUE SEMICOLON",
//t    "goto_statement : GOTO IDENTIFIER SEMICOLON",
//t    "goto_statement : GOTO CASE constant_expression SEMICOLON",
//t    "goto_statement : GOTO DEFAULT SEMICOLON",
//t    "return_statement : RETURN opt_expression SEMICOLON",
//t    "throw_statement : THROW opt_expression SEMICOLON",
//t    "yield_statement : IDENTIFIER RETURN opt_expression SEMICOLON",
//t    "yield_statement : IDENTIFIER BREAK SEMICOLON",
//t    "opt_expression :",
//t    "opt_expression : expression",
//t    "try_statement : TRY block catch_clauses",
//t    "try_statement : TRY block FINALLY block",
//t    "try_statement : TRY block catch_clauses FINALLY block",
//t    "try_statement : TRY block error",
//t    "catch_clauses : catch_clause",
//t    "catch_clauses : catch_clauses catch_clause",
//t    "opt_identifier :",
//t    "opt_identifier : IDENTIFIER",
//t    "catch_clause : CATCH block",
//t    "$$83 :",
//t    "catch_clause : CATCH open_parens_any type opt_identifier CLOSE_PARENS $$83 block_prepared",
//t    "catch_clause : CATCH open_parens_any error",
//t    "checked_statement : CHECKED block",
//t    "unchecked_statement : UNCHECKED block",
//t    "$$84 :",
//t    "unsafe_statement : UNSAFE $$84 block",
//t    "lock_statement : LOCK open_parens_any expression CLOSE_PARENS embedded_statement",
//t    "$$85 :",
//t    "$$86 :",
//t    "fixed_statement : FIXED open_parens_any variable_type IDENTIFIER $$85 using_or_fixed_variable_initializer opt_variable_declarators CLOSE_PARENS $$86 embedded_statement",
//t    "$$87 :",
//t    "$$88 :",
//t    "using_statement : USING open_parens_any variable_type IDENTIFIER $$87 using_or_fixed_variable_initializer opt_variable_declarators CLOSE_PARENS $$88 embedded_statement",
//t    "using_statement : USING open_parens_any expression CLOSE_PARENS embedded_statement",
//t    "using_or_fixed_variable_initializer :",
//t    "using_or_fixed_variable_initializer : ASSIGN variable_initializer",
//t    "query_expression : first_from_clause query_body",
//t    "query_expression : nested_from_clause query_body",
//t    "query_expression : first_from_clause COMPLETE_COMPLETION",
//t    "query_expression : nested_from_clause COMPLETE_COMPLETION",
//t    "first_from_clause : FROM_FIRST IDENTIFIER IN expression",
//t    "first_from_clause : FROM_FIRST type IDENTIFIER IN expression",
//t    "nested_from_clause : FROM IDENTIFIER IN expression",
//t    "nested_from_clause : FROM type IDENTIFIER IN expression",
//t    "$$89 :",
//t    "from_clause : FROM IDENTIFIER IN $$89 expression",
//t    "$$90 :",
//t    "from_clause : FROM type IDENTIFIER IN $$90 expression",
//t    "query_body : opt_query_body_clauses select_or_group_clause opt_query_continuation",
//t    "query_body : opt_query_body_clauses COMPLETE_COMPLETION",
//t    "$$91 :",
//t    "select_or_group_clause : SELECT $$91 expression",
//t    "$$92 :",
//t    "$$93 :",
//t    "select_or_group_clause : GROUP $$92 expression $$93 BY expression",
//t    "opt_query_body_clauses :",
//t    "opt_query_body_clauses : query_body_clauses",
//t    "query_body_clauses : query_body_clause",
//t    "query_body_clauses : query_body_clauses query_body_clause",
//t    "query_body_clause : from_clause",
//t    "query_body_clause : let_clause",
//t    "query_body_clause : where_clause",
//t    "query_body_clause : join_clause",
//t    "query_body_clause : orderby_clause",
//t    "$$94 :",
//t    "let_clause : LET IDENTIFIER ASSIGN $$94 expression",
//t    "$$95 :",
//t    "where_clause : WHERE $$95 boolean_expression",
//t    "$$96 :",
//t    "$$97 :",
//t    "$$98 :",
//t    "join_clause : JOIN IDENTIFIER IN $$96 expression ON $$97 expression EQUALS $$98 expression opt_join_into",
//t    "$$99 :",
//t    "$$100 :",
//t    "$$101 :",
//t    "join_clause : JOIN type IDENTIFIER IN $$99 expression ON $$100 expression EQUALS $$101 expression opt_join_into",
//t    "opt_join_into :",
//t    "opt_join_into : INTO IDENTIFIER",
//t    "$$102 :",
//t    "orderby_clause : ORDERBY $$102 orderings",
//t    "orderings : order_by",
//t    "$$103 :",
//t    "orderings : order_by COMMA $$103 orderings_then_by",
//t    "orderings_then_by : then_by",
//t    "$$104 :",
//t    "orderings_then_by : orderings_then_by COMMA $$104 then_by",
//t    "order_by : expression",
//t    "order_by : expression ASCENDING",
//t    "order_by : expression DESCENDING",
//t    "then_by : expression",
//t    "then_by : expression ASCENDING",
//t    "then_by : expression DESCENDING",
//t    "opt_query_continuation :",
//t    "$$105 :",
//t    "opt_query_continuation : INTO IDENTIFIER $$105 query_body",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER EOF",
//t    "interactive_parsing : EVAL_USING_DECLARATIONS_UNIT_PARSER using_directives opt_COMPLETE_COMPLETION",
//t    "$$106 :",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER $$106 interactive_statement_list opt_COMPLETE_COMPLETION",
//t    "$$107 :",
//t    "interactive_parsing : EVAL_COMPILATION_UNIT_PARSER $$107 interactive_compilation_unit",
//t    "interactive_compilation_unit : outer_declarations",
//t    "interactive_compilation_unit : outer_declarations global_attributes",
//t    "interactive_compilation_unit : global_attributes",
//t    "interactive_compilation_unit :",
//t    "opt_COMPLETE_COMPLETION :",
//t    "opt_COMPLETE_COMPLETION : COMPLETE_COMPLETION",
//t    "close_brace_or_complete_completion : CLOSE_BRACE",
//t    "close_brace_or_complete_completion : COMPLETE_COMPLETION",
//t  };
//t public static string getRule (int index) {
//t    return yyRule [index];
//t }
//t}
  protected static readonly string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"EOF","NONE","ERROR",
    "FIRST_KEYWORD","ABSTRACT","AS","ADD","BASE","BOOL","BREAK","BYTE",
    "CASE","CATCH","CHAR","CHECKED","CLASS","CONST","CONTINUE","DECIMAL",
    "DEFAULT","DELEGATE","DO","DOUBLE","ELSE","ENUM","EVENT","EXPLICIT",
    "EXTERN","FALSE","FINALLY","FIXED","FLOAT","FOR","FOREACH","GOTO",
    "IF","IMPLICIT","IN","INT","INTERFACE","INTERNAL","IS","LOCK","LONG",
    "NAMESPACE","NEW","NULL","OBJECT","OPERATOR","OUT","OVERRIDE",
    "PARAMS","PRIVATE","PROTECTED","PUBLIC","READONLY","REF","RETURN",
    "REMOVE","SBYTE","SEALED","SHORT","SIZEOF","STACKALLOC","STATIC",
    "STRING","STRUCT","SWITCH","THIS","THROW","TRUE","TRY","TYPEOF",
    "UINT","ULONG","UNCHECKED","UNSAFE","USHORT","USING","VIRTUAL","VOID",
    "VOLATILE","WHERE","WHILE","ARGLIST","PARTIAL","ARROW","FROM",
    "FROM_FIRST","JOIN","ON","EQUALS","SELECT","GROUP","BY","LET",
    "ORDERBY","ASCENDING","DESCENDING","INTO","INTERR_NULLABLE",
    "EXTERN_ALIAS","GET","SET","LAST_KEYWORD","OPEN_BRACE","CLOSE_BRACE",
    "OPEN_BRACKET","CLOSE_BRACKET","OPEN_PARENS","CLOSE_PARENS","DOT",
    "COMMA","COLON","SEMICOLON","TILDE","PLUS","MINUS","BANG","ASSIGN",
    "OP_LT","OP_GT","BITWISE_AND","BITWISE_OR","STAR","PERCENT","DIV",
    "CARRET","INTERR","DOUBLE_COLON","OP_INC","OP_DEC","OP_SHIFT_LEFT",
    "OP_SHIFT_RIGHT","OP_LE","OP_GE","OP_EQ","OP_NE","OP_AND","OP_OR",
    "OP_MULT_ASSIGN","OP_DIV_ASSIGN","OP_MOD_ASSIGN","OP_ADD_ASSIGN",
    "OP_SUB_ASSIGN","OP_SHIFT_LEFT_ASSIGN","OP_SHIFT_RIGHT_ASSIGN",
    "OP_AND_ASSIGN","OP_XOR_ASSIGN","OP_OR_ASSIGN","OP_PTR",
    "OP_COALESCING","OP_GENERICS_LT","OP_GENERICS_LT_DECL",
    "OP_GENERICS_GT","LITERAL","IDENTIFIER","OPEN_PARENS_LAMBDA",
    "OPEN_PARENS_CAST","GENERIC_DIMENSION","DEFAULT_COLON",
    "OPEN_BRACKET_EXPR","EVAL_STATEMENT_PARSER",
    "EVAL_COMPILATION_UNIT_PARSER","EVAL_USING_DECLARATIONS_UNIT_PARSER",
    "GENERATE_COMPLETION","COMPLETE_COMPLETION","UMINUS",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
//t  public static string yyname (int token) {
//t    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
//t    string name;
//t    if ((name = yyNames[token]) != null) return name;
//t    return "[unknown]";
//t  }

  int yyExpectingState;
  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected int [] yyExpectingTokens (int state){
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];
    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    int [] result = new int [len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = token;
    return result;
  }
  protected string[] yyExpecting (int state) {
    int [] tokens = yyExpectingTokens (state);
    string [] result = new string[tokens.Length];
    for (int n = 0; n < tokens.Length;  n++)
      result[n++] = yyNames[tokens [n]];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
//t    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

	static int[] global_yyStates;
	static object[] global_yyVals;
	protected bool use_global_stacks;
	object[] yyVals;					// value stack
	object yyVal;						// value stack ptr
	int yyToken;						// current input
	int yyTop;

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;		// initial size
    int yyState = 0;                   // state stack ptr
    int [] yyStates;               	// state stack 
    yyVal = null;
    yyToken = -1;
    int yyErrorFlag = 0;				// #tks to shift
	if (use_global_stacks && global_yyStates != null) {
		yyVals = global_yyVals;
		yyStates = global_yyStates;
   } else {
		yyVals = new object [yyMax];
		yyStates = new int [yyMax];
		if (use_global_stacks) {
			global_yyVals = yyVals;
			global_yyStates = yyStates;
		}
	}

    /*yyLoop:*/ for (yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        global::System.Array.Resize (ref yyStates, yyStates.Length+yyMax);
        global::System.Array.Resize (ref yyVals, yyVals.Length+yyMax);
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
//t      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ while (true) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
//t            if (debug != null)
//t              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              yyExpectingState = yyState;
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
//t              if (debug != null) debug.error("syntax error");
              if (yyToken == 0 /*eof*/ || yyToken == eof_token) throw new yyParser.yyUnexpectedEof ();
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
//t                  if (debug != null)
//t                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
//t                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
//t              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
//t                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
//t              if (debug != null)
//t                debug.discard(yyState, yyToken, yyname(yyToken),
//t  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
//t        if (debug != null)
//t          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyV > yyTop ? null : yyVals[yyV]; // yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 5:
#line 374 "cs-parser.jay"
  { Lexer.CompleteOnEOF = false; }
  break;
case 7:
#line 381 "cs-parser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 8:
#line 385 "cs-parser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 16:
  case_16();
  break;
case 17:
#line 421 "cs-parser.jay"
  {
	  	syntax_error (GetLocation (yyVals[-1+yyTop]), "`alias' expected");   /* TODO: better*/
	  }
  break;
case 20:
  case_20();
  break;
case 21:
  case_21();
  break;
case 22:
  case_22();
  break;
case 23:
  case_23();
  break;
case 24:
  case_24();
  break;
case 25:
  case_25();
  break;
case 26:
  case_26();
  break;
case 27:
  case_27();
  break;
case 28:
  case_28();
  break;
case 29:
  case_29();
  break;
case 34:
  case_34();
  break;
case 35:
  case_35();
  break;
case 36:
#line 546 "cs-parser.jay"
  {
		ubag.CloseNamespace (GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 45:
  case_45();
  break;
case 46:
#line 583 "cs-parser.jay"
  {
		current_namespace.DeclarationFound = true;
	  }
  break;
case 47:
#line 587 "cs-parser.jay"
  {
		Report.Error (116, ((MemberCore) yyVals[0+yyTop]).Location, "A namespace can only contain types and namespace declarations");
	  }
  break;
case 48:
#line 590 "cs-parser.jay"
  {
		Report.Error (116, ((MemberCore) yyVals[0+yyTop]).Location, "A namespace can only contain types and namespace declarations");
	  }
  break;
case 49:
#line 594 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	 }
  break;
case 55:
  case_55();
  break;
case 56:
  case_56();
  break;
case 57:
  case_57();
  break;
case 58:
  case_58();
  break;
case 59:
  case_59();
  break;
case 60:
#line 715 "cs-parser.jay"
  {
		yyVal = yyVals[-2+yyTop];
 	  }
  break;
case 61:
#line 719 "cs-parser.jay"
  {
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 62:
  case_62();
  break;
case 63:
  case_63();
  break;
case 64:
#line 736 "cs-parser.jay"
  { yyVal = "event"; }
  break;
case 65:
#line 737 "cs-parser.jay"
  { yyVal = "return"; }
  break;
case 66:
  case_66();
  break;
case 67:
#line 749 "cs-parser.jay"
  {
		yyVal = new List<Attribute> (4) { (Attribute) yyVals[0+yyTop] };
	  }
  break;
case 68:
  case_68();
  break;
case 69:
#line 763 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 70:
  case_70();
  break;
case 71:
#line 788 "cs-parser.jay"
  { /* reserved attribute name or identifier: 17.4 */ }
  break;
case 72:
#line 792 "cs-parser.jay"
  { yyVal = null; }
  break;
case 73:
#line 796 "cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 74:
#line 801 "cs-parser.jay"
  { yyVal = null; }
  break;
case 75:
  case_75();
  break;
case 76:
  case_76();
  break;
case 77:
  case_77();
  break;
case 78:
  case_78();
  break;
case 79:
#line 845 "cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 81:
#line 853 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 82:
  case_82();
  break;
case 83:
  case_83();
  break;
case 84:
#line 877 "cs-parser.jay"
  { yyVal = null; }
  break;
case 85:
#line 881 "cs-parser.jay"
  { 
		yyVal = Argument.AType.Ref;
	  }
  break;
case 86:
#line 885 "cs-parser.jay"
  { 
		yyVal = Argument.AType.Out;
	  }
  break;
case 101:
  case_101();
  break;
case 102:
#line 926 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 103:
  case_103();
  break;
case 104:
  case_104();
  break;
case 105:
  case_105();
  break;
case 106:
  case_106();
  break;
case 107:
#line 958 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 108:
  case_108();
  break;
case 109:
#line 970 "cs-parser.jay"
  {
		lbag.AppendToMember (current_class, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 124:
  case_124();
  break;
case 125:
  case_125();
  break;
case 128:
#line 1039 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 129:
#line 1043 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 130:
  case_130();
  break;
case 131:
#line 1059 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 132:
  case_132();
  break;
case 133:
  case_133();
  break;
case 136:
  case_136();
  break;
case 137:
  case_137();
  break;
case 138:
  case_138();
  break;
case 139:
  case_139();
  break;
case 140:
#line 1137 "cs-parser.jay"
  {
		Report.Error (1641, GetLocation (yyVals[-1+yyTop]), "A fixed size buffer field must have the array size specifier after the field name");
	  }
  break;
case 142:
  case_142();
  break;
case 143:
  case_143();
  break;
case 146:
#line 1167 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 147:
#line 1171 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 148:
  case_148();
  break;
case 149:
#line 1184 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 150:
  case_150();
  break;
case 153:
#line 1203 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 154:
#line 1207 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 155:
  case_155();
  break;
case 156:
#line 1223 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 157:
  case_157();
  break;
case 158:
  case_158();
  break;
case 161:
  case_161();
  break;
case 162:
  case_162();
  break;
case 163:
  case_163();
  break;
case 164:
#line 1277 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 165:
#line 1281 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 166:
  case_166();
  break;
case 167:
#line 1322 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 168:
#line 1326 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 169:
  case_169();
  break;
case 170:
  case_170();
  break;
case 172:
#line 1402 "cs-parser.jay"
  { yyVal = null; }
  break;
case 173:
#line 1406 "cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 175:
  case_175();
  break;
case 176:
  case_176();
  break;
case 177:
  case_177();
  break;
case 178:
  case_178();
  break;
case 179:
  case_179();
  break;
case 180:
  case_180();
  break;
case 181:
  case_181();
  break;
case 182:
#line 1465 "cs-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[0+yyTop] } );
	  }
  break;
case 183:
#line 1469 "cs-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[0+yyTop])) }, true);
	  }
  break;
case 184:
  case_184();
  break;
case 185:
  case_185();
  break;
case 186:
  case_186();
  break;
case 187:
  case_187();
  break;
case 188:
  case_188();
  break;
case 189:
  case_189();
  break;
case 190:
#line 1544 "cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 191:
  case_191();
  break;
case 192:
#line 1585 "cs-parser.jay"
  { yyVal = Parameter.Modifier.NONE; }
  break;
case 194:
  case_194();
  break;
case 195:
  case_195();
  break;
case 196:
  case_196();
  break;
case 197:
  case_197();
  break;
case 198:
  case_198();
  break;
case 199:
  case_199();
  break;
case 200:
  case_200();
  break;
case 201:
  case_201();
  break;
case 202:
  case_202();
  break;
case 203:
  case_203();
  break;
case 204:
#line 1683 "cs-parser.jay"
  {
		Error_DuplicateParameterModifier (GetLocation (yyVals[-1+yyTop]), Parameter.Modifier.PARAMS);
	  }
  break;
case 205:
  case_205();
  break;
case 206:
  case_206();
  break;
case 207:
  case_207();
  break;
case 208:
  case_208();
  break;
case 209:
  case_209();
  break;
case 210:
#line 1736 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 211:
  case_211();
  break;
case 212:
#line 1766 "cs-parser.jay"
  {
		  lexer.PropertyParsing = false;
	  }
  break;
case 213:
  case_213();
  break;
case 218:
  case_218();
  break;
case 219:
  case_219();
  break;
case 220:
  case_220();
  break;
case 221:
  case_221();
  break;
case 222:
  case_222();
  break;
case 224:
  case_224();
  break;
case 225:
  case_225();
  break;
case 226:
#line 1908 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 227:
  case_227();
  break;
case 228:
  case_228();
  break;
case 229:
  case_229();
  break;
case 230:
  case_230();
  break;
case 231:
#line 1941 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);	  
	  }
  break;
case 236:
#line 1958 "cs-parser.jay"
  {
		Report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 237:
#line 1962 "cs-parser.jay"
  {
		Report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 242:
#line 1970 "cs-parser.jay"
  {
	  	Report.Error (567, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain operators");
	  }
  break;
case 243:
#line 1974 "cs-parser.jay"
  {
	  	Report.Error (526, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain contructors");
	  }
  break;
case 244:
#line 1978 "cs-parser.jay"
  {
	  	Report.Error (524, GetLocation (yyVals[0+yyTop]), "Interfaces cannot declare classes, structs, interfaces, delegates, or enumerations");
	  }
  break;
case 245:
#line 1984 "cs-parser.jay"
  {
	  }
  break;
case 246:
  case_246();
  break;
case 248:
#line 2011 "cs-parser.jay"
  { yyVal = null; }
  break;
case 250:
  case_250();
  break;
case 251:
#line 2027 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 252:
  case_252();
  break;
case 254:
#line 2073 "cs-parser.jay"
  { yyVal = Operator.OpType.LogicalNot; }
  break;
case 255:
#line 2074 "cs-parser.jay"
  { yyVal = Operator.OpType.OnesComplement; }
  break;
case 256:
#line 2075 "cs-parser.jay"
  { yyVal = Operator.OpType.Increment; }
  break;
case 257:
#line 2076 "cs-parser.jay"
  { yyVal = Operator.OpType.Decrement; }
  break;
case 258:
#line 2077 "cs-parser.jay"
  { yyVal = Operator.OpType.True; }
  break;
case 259:
#line 2078 "cs-parser.jay"
  { yyVal = Operator.OpType.False; }
  break;
case 260:
#line 2080 "cs-parser.jay"
  { yyVal = Operator.OpType.Addition; }
  break;
case 261:
#line 2081 "cs-parser.jay"
  { yyVal = Operator.OpType.Subtraction; }
  break;
case 262:
#line 2083 "cs-parser.jay"
  { yyVal = Operator.OpType.Multiply; }
  break;
case 263:
#line 2084 "cs-parser.jay"
  {  yyVal = Operator.OpType.Division; }
  break;
case 264:
#line 2085 "cs-parser.jay"
  { yyVal = Operator.OpType.Modulus; }
  break;
case 265:
#line 2086 "cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseAnd; }
  break;
case 266:
#line 2087 "cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseOr; }
  break;
case 267:
#line 2088 "cs-parser.jay"
  { yyVal = Operator.OpType.ExclusiveOr; }
  break;
case 268:
#line 2089 "cs-parser.jay"
  { yyVal = Operator.OpType.LeftShift; }
  break;
case 269:
#line 2090 "cs-parser.jay"
  { yyVal = Operator.OpType.RightShift; }
  break;
case 270:
#line 2091 "cs-parser.jay"
  { yyVal = Operator.OpType.Equality; }
  break;
case 271:
#line 2092 "cs-parser.jay"
  { yyVal = Operator.OpType.Inequality; }
  break;
case 272:
#line 2093 "cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThan; }
  break;
case 273:
#line 2094 "cs-parser.jay"
  { yyVal = Operator.OpType.LessThan; }
  break;
case 274:
#line 2095 "cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThanOrEqual; }
  break;
case 275:
#line 2096 "cs-parser.jay"
  { yyVal = Operator.OpType.LessThanOrEqual; }
  break;
case 276:
#line 2103 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 277:
  case_277();
  break;
case 278:
#line 2122 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 279:
  case_279();
  break;
case 280:
  case_280();
  break;
case 281:
  case_281();
  break;
case 282:
  case_282();
  break;
case 283:
  case_283();
  break;
case 284:
  case_284();
  break;
case 285:
  case_285();
  break;
case 287:
#line 2225 "cs-parser.jay"
  { current_block = null; yyVal = null; }
  break;
case 290:
#line 2237 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 291:
  case_291();
  break;
case 292:
#line 2247 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 293:
  case_293();
  break;
case 294:
  case_294();
  break;
case 295:
  case_295();
  break;
case 296:
  case_296();
  break;
case 297:
  case_297();
  break;
case 298:
  case_298();
  break;
case 299:
  case_299();
  break;
case 300:
  case_300();
  break;
case 301:
  case_301();
  break;
case 303:
#line 2356 "cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 304:
  case_304();
  break;
case 307:
#line 2373 "cs-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 308:
#line 2377 "cs-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 309:
  case_309();
  break;
case 310:
#line 2390 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 311:
  case_311();
  break;
case 312:
  case_312();
  break;
case 313:
#line 2415 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 316:
  case_316();
  break;
case 317:
  case_317();
  break;
case 318:
  case_318();
  break;
case 319:
  case_319();
  break;
case 320:
  case_320();
  break;
case 321:
  case_321();
  break;
case 322:
  case_322();
  break;
case 323:
  case_323();
  break;
case 325:
  case_325();
  break;
case 326:
  case_326();
  break;
case 327:
  case_327();
  break;
case 328:
  case_328();
  break;
case 330:
  case_330();
  break;
case 331:
  case_331();
  break;
case 334:
#line 2574 "cs-parser.jay"
  {
	  	lbag.AddLocation (yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 336:
  case_336();
  break;
case 337:
  case_337();
  break;
case 338:
  case_338();
  break;
case 339:
  case_339();
  break;
case 340:
#line 2632 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 341:
  case_341();
  break;
case 342:
#line 2658 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;
	  }
  break;
case 343:
  case_343();
  break;
case 345:
  case_345();
  break;
case 347:
  case_347();
  break;
case 349:
  case_349();
  break;
case 350:
  case_350();
  break;
case 352:
  case_352();
  break;
case 353:
  case_353();
  break;
case 354:
  case_354();
  break;
case 355:
  case_355();
  break;
case 356:
#line 2755 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 357:
  case_357();
  break;
case 358:
  case_358();
  break;
case 360:
  case_360();
  break;
case 361:
  case_361();
  break;
case 362:
  case_362();
  break;
case 363:
  case_363();
  break;
case 364:
  case_364();
  break;
case 365:
  case_365();
  break;
case 367:
  case_367();
  break;
case 368:
  case_368();
  break;
case 369:
  case_369();
  break;
case 370:
  case_370();
  break;
case 371:
  case_371();
  break;
case 373:
#line 2875 "cs-parser.jay"
  {
		yyVal = new TypeExpression (TypeManager.void_type, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 374:
#line 2882 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 376:
  case_376();
  break;
case 378:
  case_378();
  break;
case 380:
  case_380();
  break;
case 382:
#line 2920 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 383:
  case_383();
  break;
case 384:
#line 2940 "cs-parser.jay"
  {
		yyVal = new ComposedCast (((MemberName) yyVals[-1+yyTop]).GetTypeExpression (), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 385:
  case_385();
  break;
case 386:
#line 2949 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 387:
#line 2953 "cs-parser.jay"
  {
		yyVal = new ComposedCast (new TypeExpression (TypeManager.void_type, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 388:
  case_388();
  break;
case 389:
  case_389();
  break;
case 390:
  case_390();
  break;
case 391:
  case_391();
  break;
case 392:
#line 2991 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.object_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 393:
#line 2992 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.string_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 394:
#line 2993 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.bool_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 395:
#line 2994 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.decimal_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 396:
#line 2995 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.float_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 397:
#line 2996 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.double_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 399:
#line 3001 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.sbyte_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 400:
#line 3002 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.byte_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 401:
#line 3003 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.short_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 402:
#line 3004 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.ushort_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 403:
#line 3005 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.int32_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 404:
#line 3006 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.uint32_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 405:
#line 3007 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.int64_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 406:
#line 3008 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.uint64_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 407:
#line 3009 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.char_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 427:
  case_427();
  break;
case 428:
  case_428();
  break;
case 432:
#line 3055 "cs-parser.jay"
  { yyVal = new NullLiteral (GetLocation (yyVals[0+yyTop])); }
  break;
case 433:
#line 3059 "cs-parser.jay"
  { yyVal = new BoolLiteral (true, GetLocation (yyVals[0+yyTop])); }
  break;
case 434:
#line 3060 "cs-parser.jay"
  { yyVal = new BoolLiteral (false, GetLocation (yyVals[0+yyTop])); }
  break;
case 439:
  case_439();
  break;
case 440:
#line 3093 "cs-parser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop]);
	  }
  break;
case 441:
  case_441();
  break;
case 442:
  case_442();
  break;
case 443:
  case_443();
  break;
case 444:
  case_444();
  break;
case 445:
#line 3124 "cs-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null,GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 446:
  case_446();
  break;
case 447:
#line 3132 "cs-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null, lexer.Location);
	  }
  break;
case 448:
  case_448();
  break;
case 449:
  case_449();
  break;
case 450:
#line 3148 "cs-parser.jay"
  { yyVal = null; }
  break;
case 452:
  case_452();
  break;
case 453:
  case_453();
  break;
case 454:
#line 3171 "cs-parser.jay"
  { yyVal = null; }
  break;
case 455:
#line 3175 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	}
  break;
case 456:
  case_456();
  break;
case 457:
  case_457();
  break;
case 458:
  case_458();
  break;
case 459:
  case_459();
  break;
case 460:
#line 3207 "cs-parser.jay"
  {
		yyVal = new CompletionElementInitializer (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 461:
  case_461();
  break;
case 462:
  case_462();
  break;
case 463:
  case_463();
  break;
case 466:
#line 3235 "cs-parser.jay"
  { yyVal = null; }
  break;
case 468:
  case_468();
  break;
case 469:
  case_469();
  break;
case 470:
  case_470();
  break;
case 471:
  case_471();
  break;
case 472:
  case_472();
  break;
case 473:
#line 3287 "cs-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 477:
  case_477();
  break;
case 478:
  case_478();
  break;
case 479:
  case_479();
  break;
case 480:
  case_480();
  break;
case 482:
  case_482();
  break;
case 483:
  case_483();
  break;
case 484:
  case_484();
  break;
case 485:
  case_485();
  break;
case 486:
  case_486();
  break;
case 487:
  case_487();
  break;
case 488:
#line 3374 "cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 490:
#line 3382 "cs-parser.jay"
  {
		yyVal = new This (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 491:
  case_491();
  break;
case 492:
  case_492();
  break;
case 493:
#line 3402 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostIncrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 494:
#line 3409 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostDecrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 495:
  case_495();
  break;
case 496:
  case_496();
  break;
case 497:
  case_497();
  break;
case 498:
  case_498();
  break;
case 499:
  case_499();
  break;
case 500:
  case_500();
  break;
case 501:
  case_501();
  break;
case 502:
#line 3475 "cs-parser.jay"
  {
		++lexer.parsing_type;
	  }
  break;
case 503:
  case_503();
  break;
case 504:
  case_504();
  break;
case 507:
#line 3504 "cs-parser.jay"
  { yyVal = null; }
  break;
case 509:
  case_509();
  break;
case 510:
  case_510();
  break;
case 511:
  case_511();
  break;
case 512:
  case_512();
  break;
case 513:
  case_513();
  break;
case 514:
  case_514();
  break;
case 518:
  case_518();
  break;
case 519:
  case_519();
  break;
case 520:
  case_520();
  break;
case 521:
#line 3580 "cs-parser.jay"
  {
		yyVal = 2;
	  }
  break;
case 522:
#line 3584 "cs-parser.jay"
  {
		yyVal = ((int) yyVals[-1+yyTop]) + 1;
	  }
  break;
case 523:
#line 3591 "cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 524:
#line 3595 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 525:
  case_525();
  break;
case 526:
  case_526();
  break;
case 527:
  case_527();
  break;
case 528:
  case_528();
  break;
case 529:
#line 3639 "cs-parser.jay"
  {
	  	lexer.TypeOfParsing = true;
	  }
  break;
case 530:
  case_530();
  break;
case 533:
  case_533();
  break;
case 534:
  case_534();
  break;
case 535:
  case_535();
  break;
case 536:
  case_536();
  break;
case 537:
  case_537();
  break;
case 538:
  case_538();
  break;
case 539:
  case_539();
  break;
case 540:
  case_540();
  break;
case 541:
  case_541();
  break;
case 542:
  case_542();
  break;
case 543:
  case_543();
  break;
case 544:
  case_544();
  break;
case 545:
#line 3754 "cs-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 546:
#line 3758 "cs-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
	  }
  break;
case 547:
#line 3765 "cs-parser.jay"
  {
		yyVal = ParametersCompiled.Undefined;
	  }
  break;
case 549:
#line 3773 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 550:
  case_550();
  break;
case 551:
  case_551();
  break;
case 553:
#line 3797 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.LogicalNot, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 554:
#line 3801 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.OnesComplement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 556:
  case_556();
  break;
case 558:
#line 3822 "cs-parser.jay"
  { 
	  	yyVal = new Unary (Unary.Operator.UnaryPlus, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 559:
#line 3826 "cs-parser.jay"
  { 
		yyVal = new Unary (Unary.Operator.UnaryNegation, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 560:
#line 3830 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 561:
#line 3834 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 562:
#line 3838 "cs-parser.jay"
  {
		yyVal = new Indirection ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 563:
#line 3842 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.AddressOf, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 565:
  case_565();
  break;
case 566:
  case_566();
  break;
case 567:
  case_567();
  break;
case 569:
  case_569();
  break;
case 570:
#line 3874 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 571:
  case_571();
  break;
case 572:
#line 3883 "cs-parser.jay"
  {
		yyVal = new As ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 573:
#line 3887 "cs-parser.jay"
  {
		yyVal = new Is ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 575:
  case_575();
  break;
case 576:
  case_576();
  break;
case 578:
  case_578();
  break;
case 579:
  case_579();
  break;
case 580:
  case_580();
  break;
case 581:
  case_581();
  break;
case 583:
  case_583();
  break;
case 584:
  case_584();
  break;
case 586:
  case_586();
  break;
case 588:
  case_588();
  break;
case 590:
  case_590();
  break;
case 592:
  case_592();
  break;
case 594:
  case_594();
  break;
case 596:
  case_596();
  break;
case 598:
  case_598();
  break;
case 599:
#line 4011 "cs-parser.jay"
  {
		yyVal = new SimpleAssign ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 600:
  case_600();
  break;
case 601:
  case_601();
  break;
case 602:
  case_602();
  break;
case 603:
  case_603();
  break;
case 604:
  case_604();
  break;
case 605:
  case_605();
  break;
case 606:
  case_606();
  break;
case 607:
  case_607();
  break;
case 608:
  case_608();
  break;
case 609:
  case_609();
  break;
case 610:
  case_610();
  break;
case 611:
  case_611();
  break;
case 612:
  case_612();
  break;
case 613:
  case_613();
  break;
case 614:
  case_614();
  break;
case 615:
#line 4106 "cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 616:
  case_616();
  break;
case 619:
#line 4121 "cs-parser.jay"
  {
		start_block (lexer.Location);
	  }
  break;
case 620:
  case_620();
  break;
case 622:
  case_622();
  break;
case 623:
  case_623();
  break;
case 624:
  case_624();
  break;
case 625:
  case_625();
  break;
case 626:
  case_626();
  break;
case 627:
  case_627();
  break;
case 633:
#line 4182 "cs-parser.jay"
  {
		yyVal = new ArglistAccess (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 635:
#line 4193 "cs-parser.jay"
  {
		yyVal = new BooleanExpression ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 636:
#line 4206 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 637:
  case_637();
  break;
case 638:
  case_638();
  break;
case 639:
  case_639();
  break;
case 640:
  case_640();
  break;
case 641:
#line 4240 "cs-parser.jay"
  { yyVal = null; }
  break;
case 642:
#line 4242 "cs-parser.jay"
  { yyVal = yyVals[0+yyTop]; }
  break;
case 643:
  case_643();
  break;
case 646:
  case_646();
  break;
case 647:
  case_647();
  break;
case 648:
  case_648();
  break;
case 649:
  case_649();
  break;
case 650:
  case_650();
  break;
case 651:
  case_651();
  break;
case 652:
  case_652();
  break;
case 653:
  case_653();
  break;
case 654:
  case_654();
  break;
case 655:
  case_655();
  break;
case 656:
  case_656();
  break;
case 657:
  case_657();
  break;
case 658:
  case_658();
  break;
case 659:
  case_659();
  break;
case 660:
  case_660();
  break;
case 662:
#line 4357 "cs-parser.jay"
  {
		current_container.AddBasesForPart (current_class, (List<FullNamedExpression>) yyVals[0+yyTop]);
	 }
  break;
case 664:
#line 4365 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 665:
  case_665();
  break;
case 666:
  case_666();
  break;
case 667:
  case_667();
  break;
case 668:
  case_668();
  break;
case 669:
  case_669();
  break;
case 670:
  case_670();
  break;
case 671:
  case_671();
  break;
case 672:
#line 4449 "cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Class, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 673:
#line 4453 "cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Struct, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 674:
#line 4460 "cs-parser.jay"
  {
		yyVal = Variance.None;
	  }
  break;
case 675:
  case_675();
  break;
case 676:
#line 4476 "cs-parser.jay"
  {
		yyVal = Variance.Covariant;
	  }
  break;
case 677:
#line 4480 "cs-parser.jay"
  {
		yyVal = Variance.Contravariant;
	  }
  break;
case 678:
  case_678();
  break;
case 679:
#line 4505 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 680:
  case_680();
  break;
case 681:
  case_681();
  break;
case 682:
  case_682();
  break;
case 683:
  case_683();
  break;
case 688:
#line 4549 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 689:
#line 4553 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 691:
  case_691();
  break;
case 694:
#line 4577 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 695:
#line 4581 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 724:
  case_724();
  break;
case 725:
  case_725();
  break;
case 726:
  case_726();
  break;
case 727:
  case_727();
  break;
case 728:
  case_728();
  break;
case 731:
  case_731();
  break;
case 732:
  case_732();
  break;
case 733:
  case_733();
  break;
case 734:
  case_734();
  break;
case 735:
#line 4725 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 736:
#line 4729 "cs-parser.jay"
  {
		yyVal = new ComposedCast (new TypeExpression (TypeManager.void_type, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 737:
  case_737();
  break;
case 739:
  case_739();
  break;
case 740:
#line 4750 "cs-parser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreatePointer (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 741:
  case_741();
  break;
case 742:
  case_742();
  break;
case 743:
  case_743();
  break;
case 744:
  case_744();
  break;
case 746:
  case_746();
  break;
case 747:
  case_747();
  break;
case 752:
  case_752();
  break;
case 753:
  case_753();
  break;
case 754:
#line 4835 "cs-parser.jay"
  {
		Report.Error (145, lexer.Location, "A const field requires a value to be provided");
	  }
  break;
case 755:
#line 4839 "cs-parser.jay"
  {
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
	  }
  break;
case 760:
  case_760();
  break;
case 762:
  case_762();
  break;
case 763:
  case_763();
  break;
case 764:
  case_764();
  break;
case 765:
#line 4884 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 766:
#line 4888 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 767:
#line 4889 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 768:
  case_768();
  break;
case 769:
  case_769();
  break;
case 770:
  case_770();
  break;
case 773:
  case_773();
  break;
case 774:
  case_774();
  break;
case 775:
#line 4957 "cs-parser.jay"
  {
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 776:
  case_776();
  break;
case 777:
  case_777();
  break;
case 779:
  case_779();
  break;
case 780:
  case_780();
  break;
case 781:
  case_781();
  break;
case 782:
#line 5001 "cs-parser.jay"
  {
		current_block = current_block.CreateSwitchBlock (lexer.Location);
	  }
  break;
case 783:
#line 5005 "cs-parser.jay"
  {
		yyVal = new SwitchSection ((List<SwitchLabel>) yyVals[-2+yyTop], current_block);
	  }
  break;
case 784:
  case_784();
  break;
case 785:
  case_785();
  break;
case 786:
  case_786();
  break;
case 787:
#line 5034 "cs-parser.jay"
  {
		yyVal = new SwitchLabel (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 792:
  case_792();
  break;
case 793:
  case_793();
  break;
case 794:
  case_794();
  break;
case 795:
  case_795();
  break;
case 796:
#line 5088 "cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 798:
  case_798();
  break;
case 799:
  case_799();
  break;
case 801:
#line 5109 "cs-parser.jay"
  { yyVal = null; }
  break;
case 803:
#line 5114 "cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 807:
  case_807();
  break;
case 808:
  case_808();
  break;
case 809:
  case_809();
  break;
case 810:
  case_810();
  break;
case 817:
  case_817();
  break;
case 818:
  case_818();
  break;
case 819:
  case_819();
  break;
case 820:
  case_820();
  break;
case 821:
  case_821();
  break;
case 822:
  case_822();
  break;
case 823:
  case_823();
  break;
case 824:
  case_824();
  break;
case 825:
  case_825();
  break;
case 828:
#line 5269 "cs-parser.jay"
  {
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], (List<Catch>) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), false);
	  }
  break;
case 829:
  case_829();
  break;
case 830:
  case_830();
  break;
case 831:
  case_831();
  break;
case 832:
  case_832();
  break;
case 833:
  case_833();
  break;
case 836:
#line 5322 "cs-parser.jay"
  {
		yyVal = new Catch ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 837:
  case_837();
  break;
case 838:
#line 5341 "cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 839:
  case_839();
  break;
case 840:
#line 5359 "cs-parser.jay"
  {
		yyVal = new Checked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 841:
#line 5366 "cs-parser.jay"
  {
		yyVal = new Unchecked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 842:
  case_842();
  break;
case 843:
#line 5376 "cs-parser.jay"
  {
		yyVal = new Unsafe ((Block) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 844:
  case_844();
  break;
case 845:
  case_845();
  break;
case 846:
  case_846();
  break;
case 847:
  case_847();
  break;
case 848:
  case_848();
  break;
case 849:
  case_849();
  break;
case 850:
  case_850();
  break;
case 851:
  case_851();
  break;
case 852:
#line 5458 "cs-parser.jay"
  {
		Report.Error (210, lexer.Location, "You must provide an initializer in a fixed or using statement declaration");
	  }
  break;
case 853:
  case_853();
  break;
case 854:
  case_854();
  break;
case 855:
  case_855();
  break;
case 856:
  case_856();
  break;
case 857:
  case_857();
  break;
case 858:
  case_858();
  break;
case 859:
  case_859();
  break;
case 860:
  case_860();
  break;
case 861:
  case_861();
  break;
case 862:
#line 5558 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 863:
  case_863();
  break;
case 864:
#line 5573 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 865:
  case_865();
  break;
case 866:
  case_866();
  break;
case 868:
#line 5613 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 869:
  case_869();
  break;
case 870:
  case_870();
  break;
case 871:
  case_871();
  break;
case 872:
  case_872();
  break;
case 876:
  case_876();
  break;
case 882:
#line 5671 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 883:
  case_883();
  break;
case 884:
#line 5689 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 885:
  case_885();
  break;
case 886:
  case_886();
  break;
case 887:
  case_887();
  break;
case 888:
  case_888();
  break;
case 889:
  case_889();
  break;
case 890:
  case_890();
  break;
case 891:
  case_891();
  break;
case 892:
  case_892();
  break;
case 893:
  case_893();
  break;
case 895:
#line 5831 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 896:
#line 5838 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 897:
  case_897();
  break;
case 899:
  case_899();
  break;
case 900:
  case_900();
  break;
case 902:
  case_902();
  break;
case 903:
  case_903();
  break;
case 904:
#line 5884 "cs-parser.jay"
  {
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 905:
#line 5888 "cs-parser.jay"
  {
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 906:
#line 5892 "cs-parser.jay"
  {
		yyVal = new Linq.OrderByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 907:
#line 5899 "cs-parser.jay"
  {
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 908:
#line 5903 "cs-parser.jay"
  {
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 909:
#line 5907 "cs-parser.jay"
  {
		yyVal = new Linq.ThenByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 911:
  case_911();
  break;
case 912:
  case_912();
  break;
case 915:
  case_915();
  break;
case 916:
  case_916();
  break;
case 917:
#line 5999 "cs-parser.jay"
  {
	        Evaluator.LoadAliases (current_namespace);
	  }
  break;
#line default
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
//t          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
//t            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
//t        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: ;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: ;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

/*
 All more than 3 lines long rules are wrapped into a method
*/
void case_16()
#line 406 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "alias"){
			syntax_error (lt.Location, "`alias' expected");
		} else if (RootContext.Version == LanguageVersion.ISO_1) {
			Report.FeatureIsNotAvailable (lt.Location, "external alias");
		} else {
			lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop]; 
			current_namespace.AddUsingExternalAlias (lt.Value, lt.Location, Report);
		}
	  }

void case_20()
#line 431 "cs-parser.jay"
{
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_21()
#line 436 "cs-parser.jay"
{
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_22()
#line 444 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		current_namespace.AddUsingAlias (lt.Value, (MemberName) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		ubag.AddUsingAlias (GetLocation (yyVals[-4+yyTop]), lt, GetLocation (yyVals[-2+yyTop]), (MemberName) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_23()
#line 450 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_24()
#line 458 "cs-parser.jay"
{
		current_namespace.AddUsing ((MemberName) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		ubag.AddUsing (GetLocation (yyVals[-2+yyTop]), (MemberName) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_25()
#line 471 "cs-parser.jay"
{
		MemberName name = (MemberName) yyVals[0+yyTop];

		if (yyVals[-2+yyTop] != null) {
			Report.Error(1671, name.Location, "A namespace declaration cannot have modifiers or attributes");
		}

		current_namespace = new NamespaceEntry (compiler,
			current_namespace, file, name.GetName ());
		current_class = current_namespace.SlaveDeclSpace;
		current_container = current_class.PartialContainer;
		ubag.DeclareNamespace (GetLocation (yyVals[-1+yyTop]), name);
	  }

void case_26()
#line 485 "cs-parser.jay"
{ 
		current_namespace = current_namespace.Parent;
		current_class = current_namespace.SlaveDeclSpace;
		current_container = current_class.PartialContainer;
		ubag.EndNamespace (GetLocation (yyVals[0+yyTop]));
	  }

void case_27()
#line 495 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName (lt.Value, lt.Location);
	  }

void case_28()
#line 500 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }

void case_29()
#line 505 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new MemberName ("<invalid>", lexer.Location);
	  }

void case_34()
#line 523 "cs-parser.jay"
{
		MemberName name = (MemberName) yyVals[0+yyTop];

		if (name.TypeArguments != null)
			syntax_error (lexer.Location, "namespace name expected");

		yyVal = name;
	  }

void case_35()
#line 535 "cs-parser.jay"
{
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
		ubag.OpenNamespace (GetLocation (yyVals[0+yyTop]));
			
	  }

void case_45()
#line 571 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			DeclSpace ds = (DeclSpace)yyVals[0+yyTop];
			if ((ds.ModFlags & (Modifiers.PRIVATE|Modifiers.PROTECTED)) != 0){
				Report.Error (1527, ds.Location, 
				"Namespace elements cannot be explicitly declared as private, protected or protected internal");
			}
		}
		current_namespace.DeclarationFound = true;
	  }

void case_55()
#line 618 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			Attributes attrs = (Attributes)yyVals[0+yyTop];
			if (global_attrs_enabled) {
				CodeGen.Assembly.AddAttributes (attrs.Attrs, current_namespace);
			} else {
				foreach (Attribute a in attrs.Attrs) {
					Report.Error (1730, a.Location, "Assembly and module attributes must precede all other elements except using clauses and extern alias declarations");
				}
			}
		}
		yyVal = yyVals[0+yyTop];
	  }

void case_56()
#line 635 "cs-parser.jay"
{
		global_attrs_enabled = false;
		yyVal = null;
      }

void case_57()
#line 640 "cs-parser.jay"
{ 
		global_attrs_enabled = false;
		yyVal = yyVals[0+yyTop];
	  }

void case_58()
#line 649 "cs-parser.jay"
{
		if (current_attr_target != String.Empty) {
			var sect = (List<Attribute>) yyVals[0+yyTop];

			if (global_attrs_enabled) {
				if (current_attr_target == "module") {
					current_container.Module.Compiled.AddAttributes (sect);
					yyVal = null;
				} else if (current_attr_target != null && current_attr_target.Length > 0) {
					CodeGen.Assembly.AddAttributes (sect, current_namespace);
					yyVal = null;
				} else {
					yyVal = new Attributes (sect);
				}
				if (yyVal == null) {
					if (RootContext.Documentation != null) {
						Lexer.check_incorrect_doc_comment ();
						Lexer.doc_state =
							XmlCommentState.Allowed;
					}
				}
			} else {
				yyVal = new Attributes (sect);
			}		
		}
		else
			yyVal = null;
		current_attr_target = null;
	  }

void case_59()
#line 679 "cs-parser.jay"
{
		if (current_attr_target != String.Empty) {
			Attributes attrs = yyVals[-1+yyTop] as Attributes;
			var sect = (List<Attribute>) yyVals[0+yyTop];

			if (global_attrs_enabled) {
				if (current_attr_target == "module") {
					current_container.Module.Compiled.AddAttributes (sect);
					yyVal = null;
				} else if (current_attr_target == "assembly") {
					CodeGen.Assembly.AddAttributes (sect, current_namespace);
					yyVal = null;
				} else {
					if (attrs == null)
						attrs = new Attributes (sect);
					else
						attrs.AddAttributes (sect);			
				}
			} else {
				if (attrs == null)
					attrs = new Attributes (sect);
				else
					attrs.AddAttributes (sect);
			}		
			yyVal = attrs;
		}
		else
			yyVal = null;
		current_attr_target = null;
	  }

void case_62()
#line 724 "cs-parser.jay"
{
		current_attr_target = (string)yyVals[-1+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }

void case_63()
#line 732 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = CheckAttributeTarget (lt.Value, lt.Location);
	  }

void case_66()
#line 739 "cs-parser.jay"
{
		string name = GetTokenName (yyToken);
		yyVal = CheckAttributeTarget (name, GetLocation (yyVals[0+yyTop]));
	  }

void case_68()
#line 751 "cs-parser.jay"
{
		var attrs = (List<Attribute>) yyVals[-2+yyTop];
		attrs.Add ((Attribute) yyVals[0+yyTop]);

		yyVal = attrs;
	  }

void case_70()
#line 765 "cs-parser.jay"
{
		--lexer.parsing_block;
		MemberName mname = (MemberName) yyVals[-2+yyTop];
		if (mname.IsGeneric) {
			Report.Error (404, lexer.Location,
				      "'<' unexpected: attributes cannot be generic");
		}

		Arguments [] arguments = (Arguments []) yyVals[0+yyTop];
		ATypeNameExpression expr = mname.GetTypeExpression ();

		if (current_attr_target == String.Empty)
			yyVal = null;
		else if (global_attrs_enabled && (current_attr_target == "assembly" || current_attr_target == "module"))
			/* FIXME: supply "nameEscaped" parameter here.*/
			yyVal = new GlobalAttribute (current_namespace, current_attr_target,
						  expr, arguments, mname.Location, lexer.IsEscapedIdentifier (mname));
		else
			yyVal = new Attribute (current_attr_target, expr, arguments, mname.Location, lexer.IsEscapedIdentifier (mname));
	  }

void case_75()
#line 803 "cs-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);
		yyVal = new Arguments [] { a, null };
	  }

void case_76()
#line 809 "cs-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);  
		yyVal = new Arguments [] { null, a };
	  }

void case_77()
#line 815 "cs-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] != null) {
			Report.Error (1016, ((Argument) yyVals[0+yyTop]).Expr.Location, "Named attribute arguments must appear after the positional arguments");
			o [0] = new Arguments (4);
		}
		
		Arguments args = ((Arguments) o [0]);
		if (args.Count > 0 && !(yyVals[0+yyTop] is NamedArgument) && args [args.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
		
		args.Add ((Argument) yyVals[0+yyTop]);
		lbag.AppendTo (args, GetLocation (yyVals[-1+yyTop]));
	  }

void case_78()
#line 830 "cs-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] == null) {
			o [1] = new Arguments (4);
		}

		((Arguments) o [1]).Add ((Argument) yyVals[0+yyTop]);
		lbag.AppendTo (o[1], GetLocation (yyVals[-1+yyTop]));
	  }

void case_82()
#line 855 "cs-parser.jay"
{
	  	--lexer.parsing_block;
	  	var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop]);	  
	  }

void case_83()
#line 864 "cs-parser.jay"
{
		if (RootContext.Version <= LanguageVersion.V_3)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "named argument");
			
		/* Avoid boxing in common case (no modifier)*/
		var arg_mod = yyVals[-1+yyTop] == null ? Argument.AType.None : (Argument.AType) yyVals[-1+yyTop];
			
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop], arg_mod);
	  }

void case_101()
#line 911 "cs-parser.jay"
{
		Report.Error (1519, lexer.Location, "Unexpected symbol `{0}' in class, struct, or interface member declaration",
			GetSymbolName (yyToken));
		yyVal = null;
		lexer.parsing_generic_declaration = false;
	  }

void case_103()
#line 928 "cs-parser.jay"
{ 
		MemberName name = MakeName ((MemberName) yyVals[0+yyTop]);
		push_current_class (new Struct (current_namespace, current_class, name, (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
	  }

void case_104()
#line 934 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		current_class.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);

		if (RootContext.Documentation != null)
			current_container.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (current_class, GetModifierLocations (), GetLocation (yyVals[-5+yyTop]));
	  }

void case_105()
#line 945 "cs-parser.jay"
{
		--lexer.parsing_declaration;	  
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_106()
#line 951 "cs-parser.jay"
{
		lbag.AppendToMember (current_class, GetLocation (yyVals[0+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_108()
#line 963 "cs-parser.jay"
{
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_124()
#line 1005 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var mod = (Modifiers) yyVals[-3+yyTop];
		current_field = new Const (current_class, (FullNamedExpression) yyVals[-1+yyTop], mod, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
		current_container.AddConstant ((Const) current_field);
		
		if ((mod & Modifiers.STATIC) != 0) {
			Report.Error (504, current_field.Location, "The constant `{0}' cannot be marked static", current_field.GetSignatureForError ());
		}
		
		yyVal = current_field;
	  }

void case_125()
#line 1018 "cs-parser.jay"
{
		if (RootContext.Documentation != null) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];
		lbag.AddMember (current_field, GetModifierLocations (), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_field = null;
	  }

void case_130()
#line 1048 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_132()
#line 1061 "cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_133()
#line 1066 "cs-parser.jay"
{
		Report.Error (145, lexer.Location, "A const field requires a value to be provided");
		yyVal = null;
	  }

void case_136()
#line 1081 "cs-parser.jay"
{
	  	lexer.parsing_generic_declaration = false;

		FullNamedExpression type = (FullNamedExpression) yyVals[-1+yyTop];
		if (type.Type == TypeManager.void_type)
			Report.Error (670, GetLocation (yyVals[-1+yyTop]), "Fields cannot have void type");
			
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		current_field = new Field (current_class, type, (Modifiers) yyVals[-2+yyTop], new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-3+yyTop]);
		current_container.AddField (current_field);
		yyVal = current_field;
	  }

void case_137()
#line 1096 "cs-parser.jay"
{ 
		if (RootContext.Documentation != null) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
			
		lbag.AddMember (current_field, GetModifierLocations (), GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
		current_field = null;
	  }

void case_138()
#line 1109 "cs-parser.jay"
{ 
		if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "fixed size buffers");

		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		current_field = new FixedField (current_class, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop],
			new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
			
		current_container.AddField (current_field);
	  }

void case_139()
#line 1120 "cs-parser.jay"
{
		if (RootContext.Documentation != null) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
	    }

		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];	    
		lbag.AddMember (current_field, GetModifierLocations (), GetLocation (yyVals[0+yyTop]), GetLocation (yyVals[-6+yyTop]));
		yyVal = current_field;
	    current_field = null;
	  }

void case_142()
#line 1143 "cs-parser.jay"
{
	  	++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_143()
#line 1149 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		current_field.Initializer = (Expression) yyVals[0+yyTop];
		lbag.AppendToMember (current_field, GetLocation (yyVals[-2+yyTop]));
		end_block (lexer.Location);
		current_local_parameters = null;
	  }

void case_148()
#line 1176 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_150()
#line 1186 "cs-parser.jay"
{
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_155()
#line 1212 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];	  
		yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_157()
#line 1225 "cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_158()
#line 1231 "cs-parser.jay"
{
		Report.Error (443, lexer.Location, "Value or constant expected");
		yyVal = null;
	  }

void case_161()
#line 1241 "cs-parser.jay"
{
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }

void case_162()
#line 1249 "cs-parser.jay"
{
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_163()
#line 1254 "cs-parser.jay"
{
		Method method = (Method) yyVals[-2+yyTop];
		method.Block = (ToplevelBlock) yyVals[0+yyTop];
		current_container.AddMethod (method);
		
		if (current_container.Kind == MemberKind.Interface && method.Block != null) {
			Report.Error (531, method.Location, "`{0}': interface members cannot have a definition", method.GetSignatureForError ());
		}

		current_local_parameters = null;

		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_166()
#line 1283 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;
		MemberName name = (MemberName) yyVals[-6+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		GenericMethod generic = null;
		if (name.TypeArguments != null) {
			generic = new GenericMethod (current_namespace, current_class, name,
						     (FullNamedExpression) yyVals[-7+yyTop], current_local_parameters);

			generic.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);
		} else if (yyVals[0+yyTop] != null) {
			Report.Error (80, GetLocation (yyVals[0+yyTop]),
				"Constraints are not allowed on non-generic declarations");
		}

		Method method = new Method (current_class, generic, (FullNamedExpression) yyVals[-7+yyTop], (Modifiers) yyVals[-8+yyTop],
				     name, current_local_parameters, (Attributes) yyVals[-9+yyTop]);
				     
		if (yyVals[0+yyTop] != null && ((method.ModFlags & Modifiers.OVERRIDE) != 0 || method.IsExplicitImpl)) {
			Report.Error (460, method.Location,
				"`{0}': Cannot specify constraints for overrides and explicit interface implementation methods",
				method.GetSignatureForError ());
		}

		if (RootContext.Documentation != null)
			method.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (method, GetModifierLocations (), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = method;
	  }

void case_169()
#line 1328 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;

		MemberName name = (MemberName) yyVals[-6+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		if (yyVals[-1+yyTop] != null && name.TypeArguments == null)
			Report.Error (80, lexer.Location,
				      "Constraints are not allowed on non-generic declarations");

		Method method;
		GenericMethod generic = null;
		if (name.TypeArguments != null) {
			generic = new GenericMethod (current_namespace, current_class, name,
				new TypeExpression (TypeManager.void_type, GetLocation (yyVals[-7+yyTop])),
				current_local_parameters);

			generic.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);
		}

		var modifiers = (Modifiers) yyVals[-9+yyTop];


		const Modifiers invalid_partial_mod = Modifiers.AccessibilityMask | Modifiers.ABSTRACT | Modifiers.EXTERN |
			Modifiers.NEW | Modifiers.OVERRIDE | Modifiers.SEALED | Modifiers.VIRTUAL;

		if ((modifiers & invalid_partial_mod) != 0) {
			Report.Error (750, name.Location, "A partial method cannot define access modifier or " +
       			"any of abstract, extern, new, override, sealed, or virtual modifiers");
			modifiers &= ~invalid_partial_mod;
		}

		if ((current_class.ModFlags & Modifiers.PARTIAL) == 0) {
			Report.Error (751, name.Location, "A partial method must be declared within a " +
       			"partial class or partial struct");
		}
		
		modifiers |= Modifiers.PARTIAL | Modifiers.PRIVATE;
		
		method = new Method (current_class, generic, new TypeExpression (TypeManager.void_type, GetLocation (yyVals[-7+yyTop])),
				     modifiers, name, current_local_parameters, (Attributes) yyVals[-10+yyTop]);

		if (RootContext.Documentation != null)
			method.DocComment = Lexer.consume_doc_comment ();

		/* TODO: lbag, push void*/
		StoreModifierLocation (Modifiers.PARTIAL, GetLocation (yyVals[-8+yyTop]));
		lbag.AddMember (method, GetModifierLocations (), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = method;
	  }

void case_170()
#line 1383 "cs-parser.jay"
{
		MemberName name = (MemberName) yyVals[-3+yyTop];
		Report.Error (1585, name.Location, 
			"Member modifier `{0}' must precede the member type and name", ModifiersExtensions.Name ((Modifiers) yyVals[-4+yyTop]));

		Method method = new Method (current_class, null, (FullNamedExpression) yyVals[-5+yyTop],
					    0, name, (ParametersCompiled) yyVals[-1+yyTop], (Attributes) yyVals[-7+yyTop]);

		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];

		if (RootContext.Documentation != null)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_175()
#line 1412 "cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
	  	yyVal = new ParametersCompiled (pars_list.ToArray ());
	  	lbag.AddLocation (yyVal, lbag.GetLocations (pars_list));
	  }

void case_176()
#line 1418 "cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = new ParametersCompiled (pars_list.ToArray ()); 
	  }

void case_177()
#line 1425 "cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[0+yyTop])));
		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_178()
#line 1431 "cs-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			Report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[-2+yyTop] } );			
	  }

void case_179()
#line 1438 "cs-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			Report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_180()
#line 1448 "cs-parser.jay"
{
		Report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[-2+yyTop])) }, true);
	  }

void case_181()
#line 1454 "cs-parser.jay"
{
		Report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_184()
#line 1471 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_185()
#line 1479 "cs-parser.jay"
{
		parameters_bucket.Clear ();
		Parameter p = (Parameter) yyVals[0+yyTop];
		parameters_bucket.Add (p);
		
		default_parameter_used = p.HasDefaultValue;
		yyVal = parameters_bucket;
	  }

void case_186()
#line 1488 "cs-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter) yyVals[0+yyTop];
		if (p != null) {
			if (p.HasExtensionMethodModifier)
				Report.Error (1100, p.Location, "The parameter modifier `this' can only be used on the first parameter");
			else if (!p.HasDefaultValue && default_parameter_used)
				Report.Error (1737, p.Location, "Optional parameter cannot precede required parameters");

			default_parameter_used |= p.HasDefaultValue;
			pars.Add (p);
			
			lbag.AppendTo (pars, GetLocation (yyVals[-1+yyTop]));
		}
		
		yyVal = yyVals[-2+yyTop];
	  }

void case_187()
#line 1512 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], lt.Location);
		lbag.AddLocation (yyVal, parameterModifierLocation);
	  }

void case_188()
#line 1521 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		Report.Error (1552, lt.Location, "Array type specifier, [], must appear before parameter name");
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Parameter.Modifier) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop], lt.Location);
		lbag.AddLocation (yyVal, parameterModifierLocation);
	  }

void case_189()
#line 1531 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);	  
	  	Location l = GetLocation (yyVals[0+yyTop]);
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], "NeedSomeGeneratorHere", (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], l);
		lbag.AddLocation (yyVal, parameterModifierLocation);
	  }

void case_191()
#line 1546 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		if (RootContext.Version <= LanguageVersion.V_3) {
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "optional parameter");
		}
		
		Parameter.Modifier mod = (Parameter.Modifier) yyVals[-5+yyTop];
		if (mod != Parameter.Modifier.NONE) {
			switch (mod) {
			case Parameter.Modifier.REF:
			case Parameter.Modifier.OUT:
				Report.Error (1741, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
				
			case Parameter.Modifier.This:
				Report.Error (1743, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
			default:
				throw new NotImplementedException (mod.ToString ());
			}
				
			mod = Parameter.Modifier.NONE;
		}
		
		if ((valid_param_mod & ParameterModifierType.DefaultValue) == 0)
			Report.Error (1065, GetLocation (yyVals[-2+yyTop]), "Optional parameter is not valid in this context");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-4+yyTop], lt.Value, mod, (Attributes) yyVals[-6+yyTop], lt.Location);
		lbag.AddLocation (yyVal, parameterModifierLocation, GetLocation (yyVals[-2+yyTop])); /* parameterModifierLocation should be ignored when mod == NONE*/
		
		if (yyVals[0+yyTop] != null)
			((Parameter) yyVal).DefaultValue = (Expression) yyVals[0+yyTop];
	  }

void case_194()
#line 1591 "cs-parser.jay"
{
		yyVal = yyVals[0+yyTop];
		parameterModifierLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_195()
#line 1596 "cs-parser.jay"
{
		Parameter.Modifier p2 = (Parameter.Modifier)yyVals[0+yyTop];
  		Parameter.Modifier mod = (Parameter.Modifier)yyVals[-1+yyTop] | p2;
  		if (((Parameter.Modifier)yyVals[-1+yyTop] & p2) == p2) {
  			Error_DuplicateParameterModifier (lexer.Location, p2);
  		} else {
	  		switch (mod & ~Parameter.Modifier.This) {
  				case Parameter.Modifier.REF:
					Report.Error (1101, lexer.Location, "The parameter modifiers `this' and `ref' cannot be used altogether");
  					break;
   				case Parameter.Modifier.OUT:
					Report.Error (1102, lexer.Location, "The parameter modifiers `this' and `out' cannot be used altogether");
  					break;
  				default:
 					Report.Error (1108, lexer.Location, "A parameter cannot have specified more than one modifier");
 					break;
 			}
  		}
  		yyVal = mod;
	  }

void case_196()
#line 1620 "cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Ref) == 0)
	  		Error_ParameterModifierNotValid ("ref", GetLocation (yyVals[0+yyTop]));
	  		
	  	yyVal = Parameter.Modifier.REF;
	  }

void case_197()
#line 1627 "cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Out) == 0)
	  		Error_ParameterModifierNotValid ("out", GetLocation (yyVals[0+yyTop]));
	  
	  	yyVal = Parameter.Modifier.OUT;
	  }

void case_198()
#line 1634 "cs-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.This) == 0)
	  		Error_ParameterModifierNotValid ("this", GetLocation (yyVals[0+yyTop]));

	  	if (RootContext.Version <= LanguageVersion.ISO_2)
	  		Report.FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "extension methods");
	  			
		yyVal = Parameter.Modifier.This;
	  }

void case_199()
#line 1647 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Attributes) yyVals[-3+yyTop], lt.Location);
	  }

void case_200()
#line 1652 "cs-parser.jay"
{
		Report.Error (1751, GetLocation (yyVals[-4+yyTop]), "Cannot specify a default value for a parameter array");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Attributes) yyVals[-5+yyTop], lt.Location);		
	  }

void case_201()
#line 1659 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_202()
#line 1667 "cs-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.Params) == 0)
			Report.Error (1670, (GetLocation (yyVals[0+yyTop])), "The `params' modifier is not allowed in current context");
	  }

void case_203()
#line 1672 "cs-parser.jay"
{
		Parameter.Modifier mod = (Parameter.Modifier)yyVals[0+yyTop];
		if ((mod & Parameter.Modifier.This) != 0) {
			Report.Error (1104, GetLocation (yyVals[-1+yyTop]), "The parameter modifiers `this' and `params' cannot be used altogether");
		} else {
			Report.Error (1611, GetLocation (yyVals[-1+yyTop]), "The params parameter cannot be declared as ref or out");
		}	  
	  }

void case_205()
#line 1688 "cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Arglist) == 0)
	  		Report.Error (1669, GetLocation (yyVals[0+yyTop]), "__arglist is not valid in this context");
	  }

void case_206()
#line 1699 "cs-parser.jay"
{
		if (RootContext.Documentation != null)
			tmpComment = Lexer.consume_doc_comment ();
	  }

void case_207()
#line 1704 "cs-parser.jay"
{
		current_property = new Property (current_class, (FullNamedExpression) yyVals[-3+yyTop], (Modifiers) yyVals[-4+yyTop],
			(MemberName) yyVals[-2+yyTop], (Attributes) yyVals[-5+yyTop]);
			
		if (current_property.TypeExpression.Type == TypeManager.void_type)
			Report.Error (547, GetLocation (yyVals[-3+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
			
		current_container.AddProperty ((Property)current_property);
		lbag.AddMember (current_property, GetModifierLocations (), GetLocation (yyVals[0+yyTop]));
		
		lexer.PropertyParsing = true;
	  }

void case_208()
#line 1717 "cs-parser.jay"
{
		lexer.PropertyParsing = false;
		
		if (RootContext.Documentation != null)
			current_property.DocComment = ConsumeStoredComment ();				
	  }

void case_209()
#line 1724 "cs-parser.jay"
{
		lbag.AppendToMember (current_property, GetLocation (yyVals[0+yyTop]));
		current_property = null;
	  }

void case_211()
#line 1738 "cs-parser.jay"
{
		valid_param_mod = 0;
	  
		Indexer indexer = new Indexer (current_class, (FullNamedExpression) yyVals[-6+yyTop],
			(MemberName)yyVals[-5+yyTop], (Modifiers) yyVals[-7+yyTop], (ParametersCompiled) yyVals[-2+yyTop], (Attributes) yyVals[-8+yyTop]);
			
		current_property = indexer;

  		current_container.AddIndexer (indexer);
		lbag.AddMember (current_property, GetModifierLocations (), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
  		
		if (indexer.TypeExpression.Type == TypeManager.void_type)
			Report.Error (620, GetLocation (yyVals[-6+yyTop]), "`{0}': indexer return type cannot be `void'", indexer.GetSignatureForError ());  		

		if (indexer.Parameters.IsEmpty) {
			Report.Error (1551, GetLocation (yyVals[-4+yyTop]), "Indexers must have at least one parameter");
		}

		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		lexer.PropertyParsing = true;
	  }

void case_213()
#line 1768 "cs-parser.jay"
{ 
		if (RootContext.Documentation != null)
			current_property.DocComment = ConsumeStoredComment ();
			
		lbag.AppendToMember (current_property, GetLocation (yyVals[-1+yyTop]));
		current_property = null;		
	  }

void case_218()
#line 1784 "cs-parser.jay"
{
	  	if (yyToken == Token.CLOSE_BRACE) {
	  		Report.Error (548, lexer.Location, "`{0}': property or indexer must have at least one accessor", current_property.GetSignatureForError ());
		} else {
			if (yyToken == Token.SEMICOLON)
				Report.Error (1597, lexer.Location, "Semicolon after method or accessor block is not valid");
			else
				Report.Error (1014, GetLocation (yyVals[0+yyTop]), "A get or set accessor expected");
		}
	  }

void case_219()
#line 1798 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && RootContext.Version == LanguageVersion.ISO_1) {
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
	  
		if (current_property.Get != null) {
			Report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
		
		if (current_property is Indexer) {
			current_property.Get = new Indexer.GetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop], ((Indexer)current_property).ParameterInfo.Clone (),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Get = new Property.GetMethod (current_property,
				(Modifiers) yyVals[-1+yyTop], (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}	
	  
		current_local_parameters = current_property.Get.ParameterInfo;	  
		lbag.AddMember (current_property.Get, GetModifierLocations ());
		lexer.PropertyParsing = false;
	  }

void case_220()
#line 1820 "cs-parser.jay"
{
	  	if (yyVals[0+yyTop] != null) {
	  		current_property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];			
	  	
			if (current_container.Kind == MemberKind.Interface) {
				Report.Error (531, current_property.Get.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Get.GetSignatureForError ());
			}		
		}
	  
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (RootContext.Documentation != null)
			if (Lexer.doc_state == XmlCommentState.Error)
				Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_221()
#line 1841 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && RootContext.Version == LanguageVersion.ISO_1) {
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
		
		if (current_property.Set != null) {
			Report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
	  
		if (current_property is Indexer) {
			current_property.Set = new Indexer.SetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop],
				ParametersCompiled.MergeGenerated (compiler,
				((Indexer)current_property).ParameterInfo, true, new Parameter (
					current_property.TypeExpression, "value", Parameter.Modifier.NONE, null, GetLocation (yyVals[0+yyTop])),
					null),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Set = new Property.SetMethod (current_property, (Modifiers) yyVals[-1+yyTop], 
				ParametersCompiled.CreateImplicitParameter (current_property.TypeExpression, GetLocation (yyVals[0+yyTop])),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}
		
		current_local_parameters = current_property.Set.ParameterInfo;	
		lbag.AddMember (current_property.Set, GetModifierLocations ());
		lexer.PropertyParsing = false;
	  }

void case_222()
#line 1868 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {		
			current_property.Set.Block = (ToplevelBlock) yyVals[0+yyTop];
		
			if (current_container.Kind == MemberKind.Interface) {
				Report.Error (531, current_property.Set.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Set.GetSignatureForError ());
			}
		}
		
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (RootContext.Documentation != null
			&& Lexer.doc_state == XmlCommentState.Error)
			Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_224()
#line 1890 "cs-parser.jay"
{
		lbag.AppendToMember (lbag.LastMember, GetLocation (yyVals[0+yyTop]));
	  	yyVal = null;
	  }

void case_225()
#line 1895 "cs-parser.jay"
{
	  	Error_SyntaxError (1043, yyToken, "Invalid accessor body");
	  	yyVal = null;
	  }

void case_227()
#line 1910 "cs-parser.jay"
{
		MemberName name = MakeName ((MemberName) yyVals[0+yyTop]);
		push_current_class (new Interface (current_namespace, current_class, name, (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
		lbag.AddMember (current_class, GetModifierLocations (), GetLocation (yyVals[-2+yyTop]));		
	  }

void case_228()
#line 1917 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		current_class.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);

		if (RootContext.Documentation != null) {
			current_container.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  }

void case_229()
#line 1928 "cs-parser.jay"
{
		--lexer.parsing_declaration;	  
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_230()
#line 1934 "cs-parser.jay"
{
	    lbag.AppendToMember (current_class, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_246()
#line 1986 "cs-parser.jay"
{
		OperatorDeclaration decl = (OperatorDeclaration) yyVals[-2+yyTop];
		if (decl != null) {
			Operator op = new Operator (
				current_class, decl.optype, decl.ret_type, (Modifiers) yyVals[-3+yyTop], 
				current_local_parameters,
				(ToplevelBlock) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop], decl.location);

			if (RootContext.Documentation != null) {
				op.DocComment = tmpComment;
				Lexer.doc_state = XmlCommentState.Allowed;
			}

			/* Note again, checking is done in semantic analysis*/
			current_container.AddOperator (op);

			lbag.AddMember (op, GetModifierLocations (), lbag.GetLocations (decl));
		}
		
		current_local_parameters = null;
	  }

void case_250()
#line 2017 "cs-parser.jay"
{
		Report.Error (590, GetLocation (yyVals[0+yyTop]), "User-defined operators cannot return void");
		yyVal = new TypeExpression (TypeManager.void_type, GetLocation (yyVals[0+yyTop]));
	  }

void case_252()
#line 2029 "cs-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		Operator.OpType op = (Operator.OpType) yyVals[-4+yyTop];
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];
		
		int p_count = current_local_parameters.Count;
		if (p_count == 1) {
			if (op == Operator.OpType.Addition)
				op = Operator.OpType.UnaryPlus;
			else if (op == Operator.OpType.Subtraction)
				op = Operator.OpType.UnaryNegation;
		}
		
		if (IsUnaryOperator (op)) {
			if (p_count == 2) {
				Report.Error (1020, loc, "Overloadable binary operator expected");
			} else if (p_count != 1) {
				Report.Error (1535, loc, "Overloaded unary operator `{0}' takes one parameter",
					Operator.GetName (op));
			}
		} else {
			if (p_count > 2) {
				Report.Error (1534, loc, "Overloaded binary operator `{0}' takes two parameters",
					Operator.GetName (op));
			} else if (p_count != 2) {
				Report.Error (1019, loc, "Overloadable unary operator expected");
			}
		}
		
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (op, (FullNamedExpression) yyVals[-6+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_277()
#line 2105 "cs-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  
		  
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_279()
#line 2124 "cs-parser.jay"
{
		valid_param_mod = 0;
		
		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  
		  
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Explicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_280()
#line 2139 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_281()
#line 2145 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	yyVal = new OperatorDeclaration (Operator.OpType.Explicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_282()
#line 2155 "cs-parser.jay"
{ 
		Constructor c = (Constructor) yyVals[-1+yyTop];
		c.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (RootContext.Documentation != null)
			c.DocComment = ConsumeStoredComment ();

		current_container.AddConstructor (c);

		current_local_parameters = null;
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_283()
#line 2174 "cs-parser.jay"
{
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		valid_param_mod = ParameterModifierType.All;
	  }

void case_284()
#line 2183 "cs-parser.jay"
{
		valid_param_mod = 0;
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];  
		
		/**/
		/* start block here, so possible anonymous methods inside*/
		/* constructor initializer can get correct parent block*/
		/**/
	  	start_block (lexer.Location);
	  }

void case_285()
#line 2194 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-6+yyTop];
		var mods = (Modifiers) yyVals[-7+yyTop];
		ConstructorInitializer ci = (ConstructorInitializer) yyVals[0+yyTop];

		Constructor c = new Constructor (current_class, lt.Value, mods,
			(Attributes) yyVals[-8+yyTop], current_local_parameters, ci, lt.Location);
		
		if (lt.Value != current_container.MemberName.Name) {
			Report.Error (1520, c.Location, "Class, struct, or interface method must have a return type");
		} else if ((mods & Modifiers.STATIC) != 0) {
			if ((mods & Modifiers.AccessibilityMask) != 0){
				Report.Error (515, c.Location,
					"`{0}': static constructor cannot have an access modifier",
					c.GetSignatureForError ());
			}
			if (ci != null) {
				Report.Error (514, c.Location,
					"`{0}': static constructor cannot have an explicit `this' or `base' constructor call",
					c.GetSignatureForError ());
			
			}
		}
		
		lbag.AddMember (c, GetModifierLocations (), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = c;
	  }

void case_291()
#line 2239 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		yyVal = new ConstructorBaseInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_293()
#line 2249 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		yyVal = new ConstructorThisInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_294()
#line 2255 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_295()
#line 2263 "cs-parser.jay"
{
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
		
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_296()
#line 2272 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		if (lt.Value != current_container.MemberName.Name){
			Report.Error (574, lt.Location, "Name of destructor must match name of class");
		} else if (current_container.Kind != MemberKind.Class){
			Report.Error (575, lt.Location, "Only class types can contain destructor");
		}
		
		Destructor d = new Destructor (current_class, (Modifiers) yyVals[-6+yyTop],
			ParametersCompiled.EmptyReadOnlyParameters, (Attributes) yyVals[-7+yyTop], lt.Location);
		if (RootContext.Documentation != null)
			d.DocComment = ConsumeStoredComment ();
		  
		d.Block = (ToplevelBlock) yyVals[0+yyTop];
		current_container.AddMethod (d);
		lbag.AddMember (d, GetModifierLocations (), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[-1+yyTop]));

		current_local_parameters = null;
	  }

void case_297()
#line 2297 "cs-parser.jay"
{
		current_event_field = new EventField (current_class, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], (MemberName) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop]);
		current_container.AddEvent (current_event_field);
		
		if (current_event_field.MemberName.Left != null) {
			Report.Error (71, current_event_field.Location, "`{0}': An explicit interface implementation of an event must use property syntax",
			current_event_field.GetSignatureForError ());
		}
		
		yyVal = current_event_field;
	  }

void case_298()
#line 2311 "cs-parser.jay"
{
		if (RootContext.Documentation != null) {
			current_event_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AddMember (current_event_field, GetModifierLocations (), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_event_field = null;
	  }

void case_299()
#line 2324 "cs-parser.jay"
{
		current_event = new EventProperty (current_class, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-4+yyTop], (MemberName) yyVals[-1+yyTop], (Attributes) yyVals[-5+yyTop]);
		current_container.AddEvent (current_event);
		lbag.AddMember (current_event, GetModifierLocations (), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		
		lexer.EventParsing = true;
	  }

void case_300()
#line 2332 "cs-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface)
			Report.Error (69, GetLocation (yyVals[-2+yyTop]), "Event in interface cannot have add or remove accessors");
	  
		lexer.EventParsing = false;
	  }

void case_301()
#line 2339 "cs-parser.jay"
{
		if (RootContext.Documentation != null) {
			current_event.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AppendToMember (current_event, GetLocation (yyVals[-1+yyTop]));
	  	current_event = null;	
		current_local_parameters = null;
	  }

void case_304()
#line 2358 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		current_event_field.Initializer = (Expression) yyVals[0+yyTop];
	  }

void case_309()
#line 2382 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_311()
#line 2392 "cs-parser.jay"
{
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_312()
#line 2401 "cs-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface) {
			Report.Error (68, lexer.Location, "`{0}': event in interface cannot have an initializer",
				current_event_field.GetSignatureForError ());
		}
		
	  	if ((current_event_field.ModFlags & Modifiers.ABSTRACT) != 0) {
			Report.Error (74, lexer.Location, "`{0}': abstract event cannot have an initializer",
				current_event_field.GetSignatureForError ());
	  	}		
	  }

void case_316()
#line 2422 "cs-parser.jay"
{
		Report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_317()
#line 2427 "cs-parser.jay"
{
		Report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_318()
#line 2432 "cs-parser.jay"
{ 
		Report.Error (1055, GetLocation (yyVals[0+yyTop]), "An add or remove accessor expected");
		yyVal = null;
	  }

void case_319()
#line 2440 "cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			Report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Add = new EventProperty.AddDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Add.ParameterInfo;
		
		lbag.AddMember (current_event.Add, GetModifierLocations ());
		lexer.EventParsing = false;		
	  }

void case_320()
#line 2452 "cs-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Add.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			Report.Error (531, current_event.Add.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Add.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_321()
#line 2468 "cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			Report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Remove = new EventProperty.RemoveDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Remove.ParameterInfo;

		lbag.AddMember (current_event.Remove, GetModifierLocations ());
		lexer.EventParsing = false;		
	  }

void case_322()
#line 2480 "cs-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Remove.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			Report.Error (531, current_event.Remove.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Remove.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_323()
#line 2496 "cs-parser.jay"
{
		Report.Error (73, lexer.Location, "An add or remove accessor must have a body");
		yyVal = null;
	  }

void case_325()
#line 2508 "cs-parser.jay"
{
		if (RootContext.Documentation != null)
			enumTypeComment = Lexer.consume_doc_comment ();
	  }

void case_326()
#line 2513 "cs-parser.jay"
{
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;

		MemberName name = (MemberName) yyVals[-3+yyTop];
		if (name.IsGeneric) {
			Report.Error (1675, name.Location, "Enums cannot have type parameters");
		}
		
		push_current_class (new Enum (current_namespace, current_class, (TypeExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-5+yyTop], MakeName (name), (Attributes) yyVals[-6+yyTop]), null);
	  }

void case_327()
#line 2525 "cs-parser.jay"
{
	  	/* here will be evaluated after CLOSE_BLACE is consumed.*/
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_328()
#line 2531 "cs-parser.jay"
{
		if (RootContext.Documentation != null)
			current_class.DocComment = enumTypeComment;
			
		--lexer.parsing_declaration;

/*			if (RootContext.Documentation != null)*/
/*				em.DocComment = ev.DocComment;*/

		lbag.AddMember (current_class, GetModifierLocations (), GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-1+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_330()
#line 2548 "cs-parser.jay"
{
	 	var te = yyVals[0+yyTop] as TypeExpression;
		if (te == null ||
			(te.Type != TypeManager.int32_type && te.Type != TypeManager.uint32_type &&
			te.Type != TypeManager.int64_type && te.Type != TypeManager.uint64_type &&
			te.Type != TypeManager.short_type && te.Type != TypeManager.ushort_type &&
			te.Type != TypeManager.byte_type && te.Type != TypeManager.sbyte_type)) {
			Enum.Error_1008 (GetLocation (yyVals[0+yyTop]), Report);
			yyVal = null;
		} else {
			yyVal = yyVals[0+yyTop];
		}
	 }

void case_331()
#line 2562 "cs-parser.jay"
{
	 	Error_TypeExpected (GetLocation (yyVals[-1+yyTop]));
		yyVal = null;
	 }

void case_336()
#line 2580 "cs-parser.jay"
{
	  	lbag.AddLocation (yyVals[-2+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	yyVal = yyVals[0+yyTop];
	  }

void case_337()
#line 2588 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	var em = new EnumMember ((Enum) current_class, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-1+yyTop]);
	  	((Enum) current_class).AddEnumMember (em);

		if (RootContext.Documentation != null) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }

void case_338()
#line 2601 "cs-parser.jay"
{
	  	++lexer.parsing_block;
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
	  }

void case_339()
#line 2609 "cs-parser.jay"
{ 
		--lexer.parsing_block;
		
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
	  	var em = new EnumMember ((Enum) current_class, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
	  	em.Initializer = new ConstInitializer (em, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	((Enum) current_class).AddEnumMember (em);
		
		if (RootContext.Documentation != null)
			em.DocComment = ConsumeStoredComment ();

		yyVal = em;
	  }

void case_341()
#line 2634 "cs-parser.jay"
{
		valid_param_mod = 0;

		MemberName name = MakeName ((MemberName) yyVals[-4+yyTop]);
		ParametersCompiled p = (ParametersCompiled) yyVals[-1+yyTop];

		Delegate del = new Delegate (current_namespace, current_class, (FullNamedExpression) yyVals[-5+yyTop],
					     (Modifiers) yyVals[-7+yyTop], name, p, (Attributes) yyVals[-8+yyTop]);

		if (RootContext.Documentation != null) {
			del.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		ubag.PushTypeDeclaration (del);
		ubag.PopTypeDeclaration ();

		current_container.AddDelegate (del);
		current_delegate = del;
		lexer.ConstraintsParsing = true;
	  }

void case_343()
#line 2660 "cs-parser.jay"
{
		current_delegate.SetParameterInfo ((List<Constraints>) yyVals[-2+yyTop]);
		lbag.AddMember (current_delegate, GetModifierLocations (), GetLocation (yyVals[-10+yyTop]), GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));

		yyVal = current_delegate;

		current_delegate = null;
	  }

void case_345()
#line 2673 "cs-parser.jay"
{
		if (RootContext.MetadataCompatibilityVersion < MetadataVersion.v2)	  
	  		Report.FeatureIsNotSupported (GetLocation (yyVals[0+yyTop]), "nullable types");
		else if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "nullable types");
	  
	  	yyVal = ComposedTypeSpecifier.CreateNullable (GetLocation (yyVals[0+yyTop]));
	  }

void case_347()
#line 2686 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new MemberName (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
	  }

void case_349()
#line 2697 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));		
	  }

void case_350()
#line 2706 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }

void case_352()
#line 2718 "cs-parser.jay"
{
		if (RootContext.MetadataCompatibilityVersion < MetadataVersion.v2)	  
	  		Report.FeatureIsNotSupported (GetLocation (yyVals[-2+yyTop]), "generics");
		else if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");	  
	  
		yyVal = yyVals[-1+yyTop];
	  }

void case_353()
#line 2727 "cs-parser.jay"
{
		Error_TypeExpected (lexer.Location);
		yyVal = new TypeArguments ();
	  }

void case_354()
#line 2735 "cs-parser.jay"
{
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_355()
#line 2741 "cs-parser.jay"
{
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_357()
#line 2757 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);
	  }

void case_358()
#line 2766 "cs-parser.jay"
{
	  	MemberName mn = (MemberName)yyVals[0+yyTop];
	  	if (mn.TypeArguments != null)
	  		syntax_error (mn.Location, string.Format ("Member `{0}' cannot declare type arguments",
	  			mn.GetSignatureForError ()));
	  }

void case_360()
#line 2777 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }

void case_361()
#line 2786 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		yyVal = new MemberName (TypeContainer.DefaultIndexerName, GetLocation (yyVals[0+yyTop]));
	  }

void case_362()
#line 2791 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		yyVal = new MemberName ((MemberName) yyVals[-1+yyTop], TypeContainer.DefaultIndexerName, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_363()
#line 2799 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_364()
#line 2805 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		
		yyVal = new MemberName (lt1.Value, lt2.Value, (TypeArguments) yyVals[-1+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_365()
#line 2813 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_367()
#line 2823 "cs-parser.jay"
{
		if (RootContext.MetadataCompatibilityVersion < MetadataVersion.v2)	  
	  		Report.FeatureIsNotSupported (GetLocation (yyVals[-2+yyTop]), "generics");
		else if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");
	  
		yyVal = yyVals[-1+yyTop];
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_368()
#line 2836 "cs-parser.jay"
{
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression)yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_369()
#line 2842 "cs-parser.jay"
{
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression)yyVals[0+yyTop]);
		yyVal = type_args;
		lbag.AddLocation (yyVals[0+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_370()
#line 2852 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
		yyVal = new TypeParameterName (lt.Value, (Attributes)yyVals[-2+yyTop], (Variance) yyVals[-1+yyTop], lt.Location);
  	  }

void case_371()
#line 2857 "cs-parser.jay"
{
  	  	if (GetTokenName (yyToken) == "type")
			Report.Error (81, GetLocation (yyVals[0+yyTop]), "Type parameter declaration must be an identifier not a type");
		else
			Error_SyntaxError (yyToken);
			
  	  	yyVal = new TypeParameterName ("", null, lexer.Location);
  	  }

void case_376()
#line 2891 "cs-parser.jay"
{
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), Report);
		yyVal = new TypeExpression (TypeManager.void_type, GetLocation (yyVals[0+yyTop]));
	  }

void case_378()
#line 2900 "cs-parser.jay"
{
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), Report);
		yyVal = new TypeExpression (TypeManager.void_type, GetLocation (yyVals[0+yyTop]));
	  }

void case_380()
#line 2909 "cs-parser.jay"
{
	  	Report.Error (1536, GetLocation (yyVals[0+yyTop]), "Invalid parameter type `void'");
		yyVal = new TypeExpression (TypeManager.void_type, GetLocation (yyVals[0+yyTop]));
	  }

void case_383()
#line 2925 "cs-parser.jay"
{
		MemberName name = (MemberName) yyVals[-1+yyTop];

		if (yyVals[0+yyTop] != null) {
			yyVal = new ComposedCast (name.GetTypeExpression (), (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			if (name.Left == null && name.Name == "var")
				yyVal = new VarExpr (name.Location);
			else
				yyVal = name.GetTypeExpression ();
		}
	  }

void case_385()
#line 2942 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null)
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_388()
#line 2958 "cs-parser.jay"
{
		var types = new List<FullNamedExpression> (2);
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_389()
#line 2964 "cs-parser.jay"
{
		var types = (List<FullNamedExpression>) yyVals[-2+yyTop];
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_390()
#line 2973 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast) {
			Report.Error (1521, GetLocation (yyVals[0+yyTop]), "Invalid base type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
		}
		yyVal = yyVals[0+yyTop];
	  }

void case_391()
#line 2980 "cs-parser.jay"
{
	  	Error_TypeExpected (lexer.Location);
		yyVal = null;
	  }

void case_427()
#line 3041 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }

void case_428()
#line 3045 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	       yyVal = new CompletionSimpleName (MemberName.MakeName (lt.Value, null), lt.Location);
	  }

void case_439()
#line 3086 "cs-parser.jay"
{
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_441()
#line 3098 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_442()
#line 3104 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_443()
#line 3110 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_444()
#line 3116 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
	  }

void case_446()
#line 3125 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
	  }

void case_448()
#line 3133 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
 	  }

void case_449()
#line 3141 "cs-parser.jay"
{
		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_452()
#line 3154 "cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] == null) {
	  		yyVal = CollectionOrObjectInitializers.Empty;
	  		/* TODO: lbag*/
	  	} else {
	  		yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  	}
	  }

void case_453()
#line 3164 "cs-parser.jay"
{
	  	yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_456()
#line 3180 "cs-parser.jay"
{
	  	var a = new List<Expression> ();
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_457()
#line 3186 "cs-parser.jay"
{
	  	var a = (List<Expression>)yyVals[-2+yyTop];
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_458()
#line 3191 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_459()
#line 3199 "cs-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_461()
#line 3208 "cs-parser.jay"
{
		CompletionSimpleName csn = yyVals[-1+yyTop] as CompletionSimpleName;
		if (csn == null)
			yyVal = new CollectionElementInitializer ((Expression)yyVals[-1+yyTop]);
		else
			yyVal = new CompletionElementInitializer (csn.Prefix, csn.Location);
	  }

void case_462()
#line 3216 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] == null)
			yyVal = null;
		else
	  		yyVal = new CollectionElementInitializer ((List<Expression>)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_463()
#line 3223 "cs-parser.jay"
{
	  	Report.Error (1920, GetLocation (yyVals[-1+yyTop]), "An element initializer cannot be empty");
		yyVal = null;
	  }

void case_468()
#line 3241 "cs-parser.jay"
{ 
		Arguments list = new Arguments (4);
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_469()
#line 3247 "cs-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		if (list [list.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) list [list.Count - 1]);
		
		list.Add ((Argument) yyVals[0+yyTop]);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_470()
#line 3257 "cs-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		NamedArgument a = (NamedArgument) yyVals[0+yyTop];
		for (int i = 0; i < list.Count; ++i) {
			NamedArgument na = list [i] as NamedArgument;
			if (na != null && na.Name == a.Name)
				Report.Error (1740, na.Location, "Named argument `{0}' specified multiple times",
					na.Name);
		}
		
		list.Add (a);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_471()
#line 3272 "cs-parser.jay"
{
	  	Report.Error (839, GetLocation (yyVals[0+yyTop]), "An argument is missing");
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_472()
#line 3277 "cs-parser.jay"
{
	  	Report.Error (839, GetLocation (yyVals[-1+yyTop]), "An argument is missing");
	  	yyVal = null;
	  }

void case_477()
#line 3298 "cs-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_478()
#line 3303 "cs-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_479()
#line 3308 "cs-parser.jay"
{
		yyVal = new Argument (new Arglist ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_480()
#line 3313 "cs-parser.jay"
{
		yyVal = new Argument (new Arglist (GetLocation (yyVals[-2+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_482()
#line 3325 "cs-parser.jay"
{
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_483()
#line 3333 "cs-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_484()
#line 3339 "cs-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_485()
#line 3345 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_486()
#line 3353 "cs-parser.jay"
{
		Arguments args = new Arguments (4);
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }

void case_487()
#line 3359 "cs-parser.jay"
{
		Arguments args = (Arguments) yyVals[-2+yyTop];
		if (args [args.Count - 1] is NamedArgument && !(yyVals[0+yyTop] is NamedArgument))
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
	  
		args.Add ((Argument) yyVals[0+yyTop]);
		lbag.AppendTo (args, GetLocation (yyVals[-1+yyTop]));
		yyVal = args;	  
	  }

void case_491()
#line 3387 "cs-parser.jay"
{
	  	yyVal = new ElementAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_492()
#line 3392 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = new ElementAccess (null, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_495()
#line 3414 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			if (RootContext.Version <= LanguageVersion.ISO_2)
				Report.FeatureIsNotAvailable (GetLocation (yyVals[-5+yyTop]), "object initializers");
				
			yyVal = new NewInitialize ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		} else {
			yyVal = new New ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], GetLocation (yyVals[-5+yyTop]));
		}
		
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_496()
#line 3427 "cs-parser.jay"
{
		if (RootContext.Version <= LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "collection initializers");
	  
		yyVal = new NewInitialize ((FullNamedExpression) yyVals[-1+yyTop], null, (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_497()
#line 3439 "cs-parser.jay"
{
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], (List<Expression>) yyVals[-3+yyTop],
				new ComposedTypeSpecifier (((List<Expression>) yyVals[-3+yyTop]).Count, GetLocation (yyVals[-4+yyTop])) {
	  				Next = (ComposedTypeSpecifier) yyVals[-1+yyTop]
			  	}, (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_498()
#line 3447 "cs-parser.jay"
{
	  	if (yyVals[0+yyTop] == null)
	  		Report.Error (1586, GetLocation (yyVals[-3+yyTop]), "Array creation must have array size or array initializer");

		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-2+yyTop], (ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }

void case_499()
#line 3454 "cs-parser.jay"
{
		if (RootContext.Version <= LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "implicitly typed arrays");
	  
		yyVal = new ImplicitlyTypedArrayCreation ((ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_500()
#line 3461 "cs-parser.jay"
{
		Report.Error (178, GetLocation (yyVals[-1+yyTop]), "Invalid rank specifier, expecting `,' or `]'");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], null, GetLocation (yyVals[-6+yyTop]));
	  }

void case_501()
#line 3466 "cs-parser.jay"
{
		Error_SyntaxError (1526, yyToken, "Unexpected symbol");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_503()
#line 3477 "cs-parser.jay"
{
		--lexer.parsing_type;
		yyVal = yyVals[0+yyTop];
	  }

void case_504()
#line 3485 "cs-parser.jay"
{
		if (RootContext.MetadataCompatibilityVersion < MetadataVersion.v2)	  
	  		Report.FeatureIsNotSupported (GetLocation (yyVals[-3+yyTop]), "anonymous types");
	  	else if (RootContext.Version <= LanguageVersion.ISO_2)
	  		Report.FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "anonymous types");

		yyVal = new NewAnonymousType ((List<AnonymousTypeParameter>) yyVals[-1+yyTop], current_container, GetLocation (yyVals[-3+yyTop]));
		
		/* TODO: lbag comma location*/
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_509()
#line 3510 "cs-parser.jay"
{
	  	var a = new List<AnonymousTypeParameter> (4);
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_510()
#line 3516 "cs-parser.jay"
{
	  	var a = (List<AnonymousTypeParameter>) yyVals[-2+yyTop];
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_511()
#line 3525 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[-2+yyTop];
	  	yyVal = new AnonymousTypeParameter ((Expression)yyVals[0+yyTop], lt.Value, lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_512()
#line 3531 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (new SimpleName (lt.Value, lt.Location),
	  		lt.Value, lt.Location);
	  }

void case_513()
#line 3537 "cs-parser.jay"
{
	  	MemberAccess ma = (MemberAccess) yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (ma, ma.Name, ma.Location);
	  }

void case_514()
#line 3542 "cs-parser.jay"
{
		Report.Error (746, lexer.Location,
			"Invalid anonymous type member declarator. Anonymous type members must be a member assignment, simple name or member access expression");
		yyVal = null;
	  }

void case_518()
#line 3557 "cs-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_519()
#line 3565 "cs-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_520()
#line 3570 "cs-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension ((int)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_525()
#line 3600 "cs-parser.jay"
{
		var ai = new ArrayInitializer (0, GetLocation (yyVals[-1+yyTop]));
		ai.VariableDeclaration = current_variable;
		lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		yyVal = ai;
	  }

void case_526()
#line 3607 "cs-parser.jay"
{
		var ai = new ArrayInitializer ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
		ai.VariableDeclaration = current_variable;
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (ai, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		}
		yyVal = ai;
	  }

void case_527()
#line 3621 "cs-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_528()
#line 3627 "cs-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_530()
#line 3641 "cs-parser.jay"
{
	  	lexer.TypeOfParsing = false;
		yyVal = new TypeOf ((FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_533()
#line 3652 "cs-parser.jay"
{
	 	Error_TypeExpected (lexer.Location);
	 	yyVal = null;
	 }

void case_534()
#line 3660 "cs-parser.jay"
{  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new SimpleName (lt.Value, (int) yyVals[0+yyTop], lt.Location);
	  }

void case_535()
#line 3666 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location);
	  }

void case_536()
#line 3673 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }

void case_537()
#line 3679 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location);		
	  }

void case_538()
#line 3685 "cs-parser.jay"
{
		var te = ((MemberName) yyVals[-3+yyTop]).GetTypeExpression ();
		if (te.HasTypeArguments)
			Error_TypeExpected (GetLocation (yyVals[0+yyTop]));

		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (te, lt.Value, (int) yyVals[0+yyTop], lt.Location);		
	  }

void case_539()
#line 3697 "cs-parser.jay"
{
		if (RootContext.MetadataCompatibilityVersion < MetadataVersion.v2)	  
	  		Report.FeatureIsNotSupported (GetLocation (yyVals[0+yyTop]), "generics");
		else if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "generics");

		yyVal = yyVals[0+yyTop];
	  }

void case_540()
#line 3709 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		if (RootContext.Version == LanguageVersion.ISO_1)
			Report.FeatureIsNotAvailable (lt.Location, "namespace alias qualifier");

		yyVal = lt;		
	  }

void case_541()
#line 3720 "cs-parser.jay"
{ 
		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_542()
#line 3728 "cs-parser.jay"
{
		yyVal = new CheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_543()
#line 3736 "cs-parser.jay"
{
		yyVal = new UnCheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_544()
#line 3744 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberAccess (new Indirection ((Expression) yyVals[-2+yyTop], GetLocation (yyVals[-1+yyTop])), lt.Value, lt.Location);
	  }

void case_550()
#line 3775 "cs-parser.jay"
{
		valid_param_mod = 0;
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_551()
#line 3783 "cs-parser.jay"
{
		if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "default value expression");

		yyVal = new DefaultValueExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_556()
#line 3807 "cs-parser.jay"
{
		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_565()
#line 3848 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Multiply, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_566()
#line 3853 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Division, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_567()
#line 3858 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Modulus, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_569()
#line 3867 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Addition, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_571()
#line 3876 "cs-parser.jay"
{
	  	/* Shift/Reduce conflict*/
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
  	  }

void case_575()
#line 3893 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LeftShift, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_576()
#line 3898 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.RightShift, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_578()
#line 3907 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThan, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_579()
#line 3912 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThan, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_580()
#line 3917 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThanOrEqual, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_581()
#line 3922 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_583()
#line 3931 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Equality, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_584()
#line 3936 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Inequality, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_586()
#line 3945 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseAnd, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_588()
#line 3954 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.ExclusiveOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_590()
#line 3963 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_592()
#line 3972 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalAnd, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_594()
#line 3981 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_596()
#line 3990 "cs-parser.jay"
{
		if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "null coalescing operator");
			
		yyVal = new Nullable.NullCoalescingOperator ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_598()
#line 4001 "cs-parser.jay"
{
		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_600()
#line 4013 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_601()
#line 4018 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_602()
#line 4023 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_603()
#line 4028 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_604()
#line 4033 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_605()
#line 4038 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_606()
#line 4043 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_607()
#line 4048 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_608()
#line 4053 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_609()
#line 4058 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_610()
#line 4066 "cs-parser.jay"
{
		var pars = new List<Parameter> (4);
		pars.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = pars;
	  }

void case_611()
#line 4073 "cs-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter)yyVals[0+yyTop];
		if (pars[0].GetType () != p.GetType ()) {
			Report.Error (748, p.Location, "All lambda parameters must be typed either explicitly or implicitly");
		}
		
		pars.Add (p);
		yyVal = pars;
	  }

void case_612()
#line 4087 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], null, lt.Location);
	  }

void case_613()
#line 4093 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, Parameter.Modifier.NONE, null, lt.Location);
	  }

void case_614()
#line 4099 "cs-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ImplicitLambdaParameter (lt.Value, lt.Location);
	  }

void case_616()
#line 4107 "cs-parser.jay"
{ 
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
		yyVal = new ParametersCompiled (pars_list.ToArray ());
	  }

void case_620()
#line 4123 "cs-parser.jay"
{
		Block b = end_block (lexer.Location);
		b.AddStatement (new ContextualReturn ((Expression) yyVals[0+yyTop]));
		yyVal = b;
	  }

void case_622()
#line 4133 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);	
		yyVal = EmptyExpression.Null;
	  }

void case_623()
#line 4141 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), GetLocation (yyVals[-1+yyTop]));
	  }

void case_624()
#line 4147 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_625()
#line 4152 "cs-parser.jay"
{
		if (RootContext.Version <= LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "lambda expressions");
	  
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }

void case_626()
#line 4159 "cs-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }

void case_627()
#line 4164 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_637()
#line 4208 "cs-parser.jay"
{
		MemberName name = MakeName ((MemberName) yyVals[0+yyTop]);
		push_current_class (new Class (current_namespace, current_class, name, (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
	  }

void case_638()
#line 4214 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		current_class.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);
		lbag.AddMember (current_class, GetModifierLocations (), GetLocation (yyVals[-5+yyTop]));

		if (RootContext.Documentation != null) {
			current_container.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  }

void case_639()
#line 4226 "cs-parser.jay"
{
		--lexer.parsing_declaration;
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_640()
#line 4232 "cs-parser.jay"
{
		lbag.AppendToMember (current_class, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_643()
#line 4247 "cs-parser.jay"
{
	    mod_locations = null;
		yyVal = ModifierNone;
	  }

void case_646()
#line 4257 "cs-parser.jay"
{ 
		var m1 = (Modifiers) yyVals[-1+yyTop];
		var m2 = (Modifiers) yyVals[0+yyTop];

		if ((m1 & m2) != 0) {
			Report.Error (1004, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"Duplicate `{0}' modifier", ModifiersExtensions.Name (m2));
		} else if ((m2 & Modifiers.AccessibilityMask) != 0 && (m1 & Modifiers.AccessibilityMask) != 0 &&
			((m2 | m1 & Modifiers.AccessibilityMask) != (Modifiers.PROTECTED | Modifiers.INTERNAL))) {
			Report.Error (107, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"More than one protection modifier specified");
		}
		
		yyVal = m1 | m2;
	  }

void case_647()
#line 4276 "cs-parser.jay"
{
		yyVal = Modifiers.NEW;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		
		if (current_container == RootContext.ToplevelTypes)
			Report.Error (1530, GetLocation (yyVals[0+yyTop]), "Keyword `new' is not allowed on namespace elements");
	  }

void case_648()
#line 4284 "cs-parser.jay"
{
		yyVal = Modifiers.PUBLIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_649()
#line 4289 "cs-parser.jay"
{
		yyVal = Modifiers.PROTECTED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_650()
#line 4294 "cs-parser.jay"
{
		yyVal = Modifiers.INTERNAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_651()
#line 4299 "cs-parser.jay"
{
		yyVal = Modifiers.PRIVATE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_652()
#line 4304 "cs-parser.jay"
{
		yyVal = Modifiers.ABSTRACT;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_653()
#line 4309 "cs-parser.jay"
{
		yyVal = Modifiers.SEALED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_654()
#line 4314 "cs-parser.jay"
{
		yyVal = Modifiers.STATIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_655()
#line 4319 "cs-parser.jay"
{
		yyVal = Modifiers.READONLY;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_656()
#line 4324 "cs-parser.jay"
{
		yyVal = Modifiers.VIRTUAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_657()
#line 4329 "cs-parser.jay"
{
		yyVal = Modifiers.OVERRIDE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_658()
#line 4334 "cs-parser.jay"
{
		yyVal = Modifiers.EXTERN;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_659()
#line 4339 "cs-parser.jay"
{
		yyVal = Modifiers.VOLATILE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_660()
#line 4344 "cs-parser.jay"
{
		yyVal = Modifiers.UNSAFE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		if (!RootContext.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_665()
#line 4370 "cs-parser.jay"
{
		var constraints = new List<Constraints> (1);
		constraints.Add ((Constraints) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_666()
#line 4376 "cs-parser.jay"
{
		var constraints = (List<Constraints>) yyVals[-1+yyTop];
		Constraints new_constraint = (Constraints)yyVals[0+yyTop];

		foreach (Constraints c in constraints) {
			if (new_constraint.TypeParameter.Value == c.TypeParameter.Value) {
				Report.Error (409, new_constraint.Location,
					"A constraint clause has already been specified for type parameter `{0}'",
					new_constraint.TypeParameter.Value);
			}
		}

		constraints.Add (new_constraint);
		yyVal = constraints;
	  }

void case_667()
#line 4395 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), (List<FullNamedExpression>) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }

void case_668()
#line 4403 "cs-parser.jay"
{
		var constraints = new List<FullNamedExpression> (1);
		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_669()
#line 4409 "cs-parser.jay"
{
		var constraints = (List<FullNamedExpression>) yyVals[-2+yyTop];
		var prev = constraints [constraints.Count - 1] as SpecialContraintExpr;
		if (prev != null && (prev.Constraint & SpecialConstraint.Constructor) != 0) {			
			Report.Error (401, GetLocation (yyVals[-1+yyTop]), "The `new()' constraint must be the last constraint specified");
		}
		
		prev = yyVals[0+yyTop] as SpecialContraintExpr;
		if (prev != null) {
			if ((prev.Constraint & (SpecialConstraint.Class | SpecialConstraint.Struct)) != 0) {
				Report.Error (449, prev.Location, "The `class' or `struct' constraint must be the first constraint specified");			
			} else {
			 	prev = constraints [0] as SpecialContraintExpr;
			 	if (prev != null && (prev.Constraint & SpecialConstraint.Struct) != 0) {			
					Report.Error (451, GetLocation (yyVals[0+yyTop]), "The `new()' constraint cannot be used with the `struct' constraint");
				}
			}
		}

		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_670()
#line 4435 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast)
			Report.Error (706, GetLocation (yyVals[0+yyTop]), "Invalid constraint type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
	  
	  	yyVal = yyVals[0+yyTop];
	  }

void case_671()
#line 4442 "cs-parser.jay"
{
		yyVal = new SpecialContraintExpr (SpecialConstraint.Constructor, GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_675()
#line 4462 "cs-parser.jay"
{
		if (RootContext.MetadataCompatibilityVersion < MetadataVersion.v2)	  
	  		Report.FeatureIsNotSupported (lexer.Location, "generic type variance");
		else if (RootContext.Version <= LanguageVersion.V_3)
			Report.FeatureIsNotAvailable (lexer.Location, "generic type variance");

		yyVal = yyVals[0+yyTop];
	  }

void case_678()
#line 4498 "cs-parser.jay"
{
		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_680()
#line 4510 "cs-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_681()
#line 4515 "cs-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (lexer.Location);
	  }

void case_682()
#line 4524 "cs-parser.jay"
{
		++lexer.parsing_block;
		current_block.StartLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_683()
#line 4529 "cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_691()
#line 4556 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_724()
#line 4620 "cs-parser.jay"
{
		  Report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_725()
#line 4625 "cs-parser.jay"
{
		  Report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_726()
#line 4630 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_727()
#line 4638 "cs-parser.jay"
{
		/* Uses lexer.Location because semicolon location is not kept in quick mode*/
		yyVal = new EmptyStatement (lexer.Location);
	  }

void case_728()
#line 4646 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		LabeledStatement labeled = new LabeledStatement (lt.Value, current_block, lt.Location);

		current_block.AddLabel (labeled);
		current_block.AddStatement (labeled);
	  }

void case_731()
#line 4659 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] is VarExpr)
			yyVals[-1+yyTop] = new SimpleName ("var", ((VarExpr) yyVals[-1+yyTop]).Location);
	  
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_732()
#line 4675 "cs-parser.jay"
{ 
		/* Ok, the above "primary_expression" is there to get rid of*/
		/* both reduce/reduce and shift/reduces in the grammar, it should*/
		/* really just be "type_name".  If you use type_name, a reduce/reduce*/
		/* creeps up.  If you use namespace_or_type_name (which is all we need*/
		/* really) two shift/reduces appear.*/
		/* */

		/* So the super-trick is that primary_expression*/
		/* can only be either a SimpleName or a MemberAccess. */
		/* The MemberAccess case arises when you have a fully qualified type-name like :*/
		/* Foo.Bar.Blah i;*/
		/* SimpleName is when you have*/
		/* Blah i;*/
		
		Expression expr = (Expression) yyVals[-1+yyTop];
		if (yyVals[0+yyTop] == null) {
			SimpleName sn = expr as SimpleName;
			if (sn != null && sn.Name == "var")
				yyVal = new VarExpr (sn.Location);
			else
				yyVal = yyVals[-1+yyTop];
		} else if (expr is ATypeNameExpression) {
			yyVal = new ComposedCast ((ATypeNameExpression)expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			Error_ExpectingTypeName (expr);
			yyVal = null;
		}
	  }

void case_733()
#line 4705 "cs-parser.jay"
{
		ATypeNameExpression expr = yyVals[-1+yyTop] as ATypeNameExpression;

		if (expr != null) {
			yyVal = new ComposedCast (expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			Error_ExpectingTypeName ((Expression)yyVals[-1+yyTop]);
			yyVal = expr;
		}
	  }

void case_734()
#line 4716 "cs-parser.jay"
{
		if (yyVals[0+yyTop] == null)
			yyVal = yyVals[-1+yyTop];
		else
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_737()
#line 4731 "cs-parser.jay"
{
		Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), Report);
		yyVal = new TypeExpression (TypeManager.void_type, GetLocation (yyVals[0+yyTop]));
	  }

void case_739()
#line 4740 "cs-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_741()
#line 4755 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_742()
#line 4762 "cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AppendTo (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_743()
#line 4768 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockConstantDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_744()
#line 4775 "cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_746()
#line 4785 "cs-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		lbag.AppendTo (current_variable, GetLocation (yyVals[-1+yyTop]));
	  }

void case_747()
#line 4790 "cs-parser.jay"
{
	  	if (yyToken == Token.OPEN_BRACKET_EXPR) {
			Report.Error (650, lexer.Location,
				"Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type");
		} else {
			Error_SyntaxError (yyToken);
		}
	  }

void case_752()
#line 4812 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, null);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-1+yyTop]));
	  }

void case_753()
#line 4821 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_760()
#line 4854 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_762()
#line 4867 "cs-parser.jay"
{
		yyVal = new StackAlloc ((Expression) yyVals[-3+yyTop], (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_763()
#line 4872 "cs-parser.jay"
{
		Report.Error (1575, GetLocation (yyVals[-1+yyTop]), "A stackalloc expression requires [] after type");
		yyVal = new StackAlloc ((Expression) yyVals[0+yyTop], null, GetLocation (yyVals[-1+yyTop]));		
	  }

void case_764()
#line 4880 "cs-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_768()
#line 4898 "cs-parser.jay"
{
		ExpressionStatement s = yyVals[0+yyTop] as ExpressionStatement;
		if (s == null) {
			Expression.Error_InvalidExpressionStatement (Report, GetLocation (yyVals[0+yyTop]));
			s = EmptyExpressionStatement.Instance;
		}

		yyVal = new StatementExpression (s);
	  }

void case_769()
#line 4911 "cs-parser.jay"
{
		Expression expr = (Expression) yyVals[0+yyTop];
		ExpressionStatement s;

	        s = new OptionalAssign (new SimpleName ("$retval", lexer.Location), expr, lexer.Location);
		yyVal = new StatementExpression (s);
	  }

void case_770()
#line 4919 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_773()
#line 4933 "cs-parser.jay"
{ 
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		yyVal = new If ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_774()
#line 4942 "cs-parser.jay"
{
		yyVal = new If ((BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
		
		if (yyVals[-2+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[-2+yyTop]));
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_776()
#line 4959 "cs-parser.jay"
{
		yyVal = new Switch ((Expression) yyVals[-5+yyTop], (ExplicitBlock) current_block.Explicit, (List<SwitchSection>) yyVals[-1+yyTop], GetLocation (yyVals[-7+yyTop]));	
		end_block (GetLocation (yyVals[0+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_777()
#line 4968 "cs-parser.jay"
{
		Report.Warning (1522, 1, current_block.StartLocation, "Empty switch block"); 
		yyVal = new List<SwitchSection> ();
	  }

void case_779()
#line 4977 "cs-parser.jay"
{
		var sections = new List<SwitchSection> (4);

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }

void case_780()
#line 4984 "cs-parser.jay"
{
		var sections = (List<SwitchSection>) yyVals[-1+yyTop];

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }

void case_781()
#line 4991 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);	  
		yyVal = new List<SwitchSection> ();
	  }

void case_784()
#line 5010 "cs-parser.jay"
{
		var labels = new List<SwitchLabel> (4);

		labels.Add ((SwitchLabel) yyVals[0+yyTop]);
		yyVal = labels;
	  }

void case_785()
#line 5017 "cs-parser.jay"
{
		var labels = (List<SwitchLabel>) (yyVals[-1+yyTop]);
		labels.Add ((SwitchLabel) yyVals[0+yyTop]);

		yyVal = labels;
	  }

void case_786()
#line 5027 "cs-parser.jay"
{
	 	yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	 	lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	 }

void case_792()
#line 5046 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new While ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_793()
#line 5058 "cs-parser.jay"
{
		yyVal = new Do ((Statement) yyVals[-5+yyTop], (BooleanExpression) yyVals[-2+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_794()
#line 5066 "cs-parser.jay"
{
		start_block (GetLocation (yyVals[0+yyTop]));
		current_block.IsCompilerGenerated = true;
	  }

void case_795()
#line 5074 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		For f = new For ((Statement) yyVals[-6+yyTop], (BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-8+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));

		yyVal = end_block (GetLocation (yyVals[-5+yyTop]));
	  }

void case_798()
#line 5094 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_799()
#line 5101 "cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_807()
#line 5125 "cs-parser.jay"
{
	  	var sl = yyVals[-2+yyTop] as StatementList;
	  	if (sl == null) {
	  		sl = new StatementList ((Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop]);
			lbag.AddStatement (sl, GetLocation (yyVals[-1+yyTop]));
	  	} else {
	  		sl.Add ((Statement) yyVals[0+yyTop]);
	  		lbag.AppendTo (sl, GetLocation (yyVals[-1+yyTop]));
	  	}
	  		
		yyVal = sl;
	  }

void case_808()
#line 5141 "cs-parser.jay"
{
		Report.Error (230, GetLocation (yyVals[-5+yyTop]), "Type and identifier are both required in a foreach statement");
		yyVal = null;
	  }

void case_809()
#line 5146 "cs-parser.jay"
{
		start_block (GetLocation (yyVals[-5+yyTop]));
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		yyVal = li;
	  }

void case_810()
#line 5155 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Foreach f = new Foreach ((Expression) yyVals[-6+yyTop], (LocalVariable) yyVals[-1+yyTop], (Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-8+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_817()
#line 5178 "cs-parser.jay"
{
		yyVal = new Break (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_818()
#line 5186 "cs-parser.jay"
{
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_819()
#line 5194 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new Goto (lt.Value, GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_820()
#line 5200 "cs-parser.jay"
{
		yyVal = new GotoCase ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_821()
#line 5205 "cs-parser.jay"
{
		yyVal = new GotoDefault (GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_822()
#line 5213 "cs-parser.jay"
{
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_823()
#line 5221 "cs-parser.jay"
{
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_824()
#line 5229 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			Report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			Report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		} else if (RootContext.Version == LanguageVersion.ISO_1){
			Report.FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.ParametersBlock.TopBlock.IsIterator = true;
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_825()
#line 5245 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			Report.Error (1003, lt.Location, "; expected");
		} else if (RootContext.Version == LanguageVersion.ISO_1){
			Report.FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.ParametersBlock.TopBlock.IsIterator = true;
		yyVal = new YieldBreak (lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_829()
#line 5271 "cs-parser.jay"
{
		yyVal = new TryFinally ((Statement) yyVals[-2+yyTop], (Block) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_830()
#line 5276 "cs-parser.jay"
{
		yyVal = new TryFinally (new TryCatch ((Block) yyVals[-3+yyTop], (List<Catch>) yyVals[-2+yyTop], GetLocation (yyVals[-4+yyTop]), true), (Block) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_831()
#line 5281 "cs-parser.jay"
{
		Report.Error (1524, GetLocation (yyVals[-2+yyTop]), "Expected catch or finally");
		yyVal = null;
	  }

void case_832()
#line 5289 "cs-parser.jay"
{
		var l = new List<Catch> (2);

		l.Add ((Catch) yyVals[0+yyTop]);
		yyVal = l;
	  }

void case_833()
#line 5296 "cs-parser.jay"
{
		var l = (List<Catch>) yyVals[-1+yyTop];
		
		Catch c = (Catch) yyVals[0+yyTop];
		if (l [0].IsGeneral) {
			Report.Error (1017, c.loc, "Try statement already has an empty catch block");
		} else {
			if (c.IsGeneral)
				l.Insert (0, c);
			else
				l.Add (c);
		}
		
		yyVal = l;
	  }

void case_837()
#line 5324 "cs-parser.jay"
{
		start_block (GetLocation (yyVals[-3+yyTop]));
		var c = new Catch (current_block, GetLocation (yyVals[-4+yyTop]));
		c.TypeExpression = (FullNamedExpression) yyVals[-2+yyTop];

		if (yyVals[-1+yyTop] != null) {
			var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
			c.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
			current_block.AddLocalName (c.Variable);
		}

		lbag.AddLocation (c, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = c;
	  }

void case_839()
#line 5343 "cs-parser.jay"
{
	  	if (yyToken == Token.CLOSE_PARENS) {
			Report.Error (1015, lexer.Location,
				"A type that derives from `System.Exception', `object', or `string' expected");
		} else {
			Error_SyntaxError (yyToken);
		}
		
		yyVal = new Catch (null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_842()
#line 5371 "cs-parser.jay"
{
		if (!RootContext.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_844()
#line 5381 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Lock ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_845()
#line 5392 "cs-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.FixedVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Fixed.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_846()
#line 5402 "cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_847()
#line 5407 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Fixed f = new Fixed ((Fixed.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		current_block.AddStatement (f);
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_848()
#line 5419 "cs-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.UsingVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Using.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_849()
#line 5429 "cs-parser.jay"
{
		yyVal = current_variable;	  
		current_variable = null;
	  }

void case_850()
#line 5434 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Using u = new Using ((Using.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		lbag.AddStatement (u, GetLocation (yyVals[-8+yyTop]), GetLocation (yyVals[-2+yyTop]));
		current_block.AddStatement (u);
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_851()
#line 5444 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Using u = new Using ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (u, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
		yyVal = u;
	  }

void case_853()
#line 5460 "cs-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		yyVal = current_variable;
	  }

void case_854()
#line 5471 "cs-parser.jay"
{
		lexer.query_parsing = false;
			
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_855()
#line 5483 "cs-parser.jay"
{
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_856()
#line 5494 "cs-parser.jay"
{
	        lexer.query_parsing = false;
		yyVal = yyVals[-1+yyTop];

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_857()
#line 5501 "cs-parser.jay"
{
	        yyVal = yyVals[-1+yyTop];
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_858()
#line 5510 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop])));
	  }

void case_859()
#line 5518 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (
			new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
			}
		);
	  }

void case_860()
#line 5533 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop])));
	  }

void case_861()
#line 5541 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (
			new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
			}
		);
	  }

void case_863()
#line 5560 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_865()
#line 5575 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);

		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop])) {
			IdentifierType = (FullNamedExpression)yyVals[-4+yyTop]
		};
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_866()
#line 5592 "cs-parser.jay"
{
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[-1+yyTop];
		
		if (yyVals[0+yyTop] != null)
			head.Next = (Linq.AQueryClause)yyVals[0+yyTop];
				
		if (yyVals[-2+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-2+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }

void case_869()
#line 5615 "cs-parser.jay"
{
		yyVal = new Linq.Select ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_870()
#line 5622 "cs-parser.jay"
{
	  	if (linq_clause_blocks == null)
	  		linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
	  	current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  	linq_clause_blocks.Push ((Linq.QueryBlock)current_block);
	  }

void case_871()
#line 5630 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }

void case_872()
#line 5637 "cs-parser.jay"
{
		yyVal = new Linq.GroupBy ((Linq.QueryBlock)current_block, (Expression)yyVals[-3+yyTop], linq_clause_blocks.Pop (), (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_876()
#line 5653 "cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-1+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }

void case_883()
#line 5673 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
	  	yyVal = new Linq.Let ((Linq.QueryBlock) current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
	  	
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_885()
#line 5691 "cs-parser.jay"
{
		yyVal = new Linq.Where ((Linq.QueryBlock)current_block, (BooleanExpression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_886()
#line 5701 "cs-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_887()
#line 5709 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_888()
#line 5717 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }

void case_889()
#line 5725 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();

		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];	
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-11+yyTop]));
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
			
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location);

			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-11+yyTop]));	
		}

		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);
	  }

void case_890()
#line 5761 "cs-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_891()
#line 5769 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_892()
#line 5777 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }

void case_893()
#line 5785 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();
		
		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;		
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
		
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location); /* TODO:*/
			
			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};			
		}
		
		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);		
	  }

void case_897()
#line 5840 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		yyVal = yyVals[0+yyTop];
	  }

void case_899()
#line 5851 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }

void case_900()
#line 5858 "cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	  }

void case_902()
#line 5867 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (compiler, (Linq.QueryBlock) current_block, lexer.Location);	 
	 }

void case_903()
#line 5874 "cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	 }

void case_911()
#line 5914 "cs-parser.jay"
{
		/* query continuation block is not linked with query block but with block*/
		/* before. This means each query can use same range variable names for*/
		/* different identifiers.*/

		current_block.SetEndLocation (GetLocation (yyVals[-1+yyTop]));
		current_block = current_block.Parent;
	
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
		
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);		
	  }

void case_912()
#line 5930 "cs-parser.jay"
{
		var current_block = linq_clause_blocks.Pop ();	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
  		yyVal = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, null, rv, GetLocation (yyVals[-3+yyTop])) {
  			next = (Linq.AQueryClause)yyVals[0+yyTop]
  		};
	  }

void case_915()
#line 5956 "cs-parser.jay"
{ 
	        Evaluator.LoadAliases (current_namespace);

		push_current_class (new Class (current_namespace, current_class, new MemberName ("Class" + class_count++),
			Modifiers.PUBLIC, null), null);

		var baseclass_list = new List<FullNamedExpression> ();
		baseclass_list.Add (new TypeExpression (Evaluator.InteractiveBaseClass, lexer.Location));
		current_container.AddBasesForPart (current_class, baseclass_list);

		/* (ref object retval)*/
		Parameter [] mpar = new Parameter [1];
		mpar [0] = new Parameter (new TypeExpression (TypeManager.object_type, Location.Null), "$retval", Parameter.Modifier.REF, null, Location.Null);

		ParametersCompiled pars = new ParametersCompiled (mpar);
		current_local_parameters = pars;
		Method method = new Method (
			current_class,
			null, /* generic*/
			new TypeExpression (TypeManager.void_type, Location.Null),
			Modifiers.PUBLIC | Modifiers.STATIC,
			new MemberName ("Host"),
			pars,
			null /* attributes */);

		oob_stack.Push (method);
	        ++lexer.parsing_block;
		start_block (lexer.Location);
	  }

void case_916()
#line 5986 "cs-parser.jay"
{
		--lexer.parsing_block;
		Method method = (Method) oob_stack.Pop ();

		method.Block = (ToplevelBlock) end_block(lexer.Location);
		current_container.AddMethod (method);

		--lexer.parsing_declaration;
		InteractiveResult = pop_current_class ();
		current_local_parameters = null;
	  }

#line default
   static readonly short [] yyLhs  = {              -1,
    0,    0,    0,    0,    5,    0,    2,    2,    1,    1,
    6,    6,    6,   10,   10,    7,    7,   11,   11,    8,
    8,   12,   12,   13,   20,   16,   18,   18,   18,   21,
   21,   22,   22,   15,   24,   19,   25,   25,   23,   23,
   26,   26,   27,   27,    9,    9,    9,    9,    9,   28,
   28,   28,   28,   28,    3,   17,   17,   36,   36,   37,
   37,   38,   40,   40,   40,   40,   39,   39,   44,   41,
   42,   43,   43,   45,   45,   45,   45,   45,   46,   46,
   50,   47,   49,   51,   51,   51,   52,   52,   53,   53,
   54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
   54,   65,   67,   70,   71,   32,   32,   73,   69,   72,
   72,   74,   74,   75,   75,   75,   75,   75,   75,   75,
   75,   75,   75,   78,   55,   79,   79,   80,   80,   81,
   83,   77,   77,   82,   82,   88,   29,   92,   29,   29,
   87,   95,   87,   89,   89,   96,   96,   97,   98,   97,
   93,   93,   99,   99,  100,  101,   91,   91,   94,   94,
   94,  104,   30,  107,  108,  102,  109,  110,  102,  102,
  103,  103,  106,  106,  113,  113,  113,  113,  113,  113,
  113,  113,  113,  113,  114,  114,  117,  117,  117,  120,
  117,  118,  118,  121,  121,  122,  122,  122,  115,  115,
  115,  123,  123,  123,  116,  125,  127,  128,   56,  130,
  131,  132,   58,  126,  126,  126,  126,  126,  136,  133,
  137,  134,  135,  135,  135,  138,  139,  140,  142,   33,
   33,  141,  141,  143,  143,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  147,   59,  146,  146,  148,  148,
  151,  145,  145,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  153,  152,  154,  152,  152,
  152,   60,  157,  159,  155,  156,  156,  158,  158,  163,
  161,  164,  161,  161,  165,   61,  167,   57,  170,  171,
   57,  166,  173,  166,  168,  168,  174,  174,  175,  176,
  175,  177,  172,  169,  169,  169,  169,  169,  181,  178,
  182,  179,  180,  180,  184,  186,  187,   34,  183,  183,
  183,  185,  185,  185,  188,  188,  189,  190,  189,  191,
  192,  193,   35,  194,  194,   14,   14,  195,  195,  198,
  197,  197,  197,  199,  199,  201,   64,  124,  105,  105,
  129,  129,  202,  202,  202,  200,  200,  203,  203,  204,
  204,  206,  206,   86,   76,   76,   90,   90,  119,  119,
  149,  149,  207,  207,  207,  207,  207,  211,  211,  212,
  212,  210,  210,  210,  210,  210,  210,  210,  213,  213,
  213,  213,  213,  213,  213,  213,  213,  214,  214,  214,
  214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
  214,  214,  214,  214,  214,  214,  215,  215,  215,  216,
  216,  216,  235,  235,  236,  236,  237,  237,  218,  218,
  234,  234,  234,  234,  234,  234,  234,  234,  220,  238,
  238,  239,  239,  240,  240,  242,  242,  242,  243,  243,
  243,  243,  243,  244,  244,  162,  162,  248,  248,  248,
  248,  248,  250,  250,  249,  249,  251,  251,  251,  251,
  252,  221,  247,  247,  247,  253,  253,  254,  254,  222,
  223,  223,  224,  225,  226,  226,  217,  217,  217,  217,
  217,  258,  255,  227,  259,  259,  260,  260,  261,  261,
  262,  262,  262,  262,  256,  256,  208,  208,  263,  263,
  264,  264,  257,  257,   85,   85,  265,  265,  266,  228,
  267,  267,  267,  268,  268,  268,  268,  268,  269,  196,
  229,  230,  231,  232,  271,  233,  270,  270,  273,  272,
  219,  274,  274,  274,  274,  276,  275,  275,  275,  275,
  275,  275,  275,  277,  277,  277,  277,  278,  278,  278,
  278,  278,  278,  279,  279,  279,  280,  280,  280,  280,
  280,  281,  281,  281,  282,  282,  283,  283,  284,  284,
  285,  285,  286,  286,  287,  287,  288,  288,  289,  289,
  289,  289,  289,  289,  289,  289,  289,  289,  289,  290,
  290,  291,  291,  291,  292,  292,  293,  293,  296,  294,
  295,  295,  298,  297,  299,  300,  297,   48,   48,  245,
  245,  245,  245,   84,  302,  303,  304,  305,  306,   31,
   63,   63,   62,   62,  111,  111,  307,  307,  307,  307,
  307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
   66,   66,   68,   68,  308,  308,  309,  310,  310,  311,
  311,  311,  311,  205,  205,  312,  312,  314,  112,  315,
  315,  316,  160,  313,  313,  317,  317,  318,  318,  318,
  318,  322,  322,  323,  323,  323,  320,  320,  320,  320,
  320,  320,  320,  320,  320,  320,  320,  320,  320,  324,
  324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
  324,  324,  338,  338,  338,  338,  325,  339,  321,  340,
  340,  341,  341,  341,  341,  341,  341,  209,  209,  342,
  344,  319,  347,  319,  343,  343,  343,  345,  345,  350,
  350,  351,  351,  346,  346,  348,  348,  352,  352,  353,
  349,  349,  349,  326,  326,  337,  337,  354,  355,  355,
  327,  327,  356,  356,  359,  357,  358,  358,  360,  360,
  360,  363,  361,  362,  362,  364,  364,  328,  328,  328,
  328,  365,  366,  370,  367,  369,  369,  374,  373,  373,
  371,  371,  372,  372,  376,  375,  375,  368,  377,  368,
  329,  329,  329,  329,  329,  329,  378,  379,  380,  380,
  380,  381,  382,  383,  383,  384,  384,  330,  330,  330,
  330,  385,  385,  387,  387,  386,  388,  386,  386,  331,
  332,  389,  335,  333,  391,  392,  336,  393,  394,  334,
  334,  390,  390,  301,  301,  301,  301,  395,  395,  397,
  397,  399,  398,  400,  398,  396,  396,  404,  402,  405,
  406,  402,  401,  401,  407,  407,  408,  408,  408,  408,
  408,  413,  409,  414,  410,  415,  416,  417,  411,  419,
  420,  421,  411,  418,  418,  423,  412,  422,  426,  422,
  425,  428,  425,  424,  424,  424,  427,  427,  427,  403,
  429,  403,    4,    4,  430,    4,  432,    4,  431,  431,
  431,  431,  246,  246,  241,  241,
  };
   static readonly short [] yyLen = {           2,
    2,    3,    2,    1,    0,    3,    0,    1,    1,    2,
    1,    1,    1,    1,    2,    4,    2,    1,    2,    1,
    1,    5,    2,    3,    0,    6,    1,    3,    1,    0,
    1,    0,    1,    1,    0,    6,    0,    1,    0,    1,
    0,    1,    1,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    0,    1,    1,    2,    5,
    4,    2,    1,    1,    1,    1,    1,    3,    0,    3,
    1,    0,    3,    0,    1,    1,    3,    3,    1,    1,
    0,    4,    4,    0,    1,    1,    0,    1,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    0,    0,    0,    0,   13,    5,    0,    4,    0,
    1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    0,    9,    0,    1,    1,    2,    3,
    0,    3,    1,    1,    1,    0,    8,    0,    9,    6,
    0,    0,    3,    0,    1,    1,    2,    2,    0,    5,
    0,    1,    1,    2,    3,    0,    4,    2,    1,    1,
    1,    0,    3,    0,    0,   10,    0,    0,   11,    8,
    1,    1,    0,    1,    1,    3,    3,    3,    5,    3,
    5,    1,    1,    1,    1,    3,    4,    6,    4,    0,
    7,    0,    1,    1,    2,    1,    1,    1,    4,    6,
    4,    1,    2,    2,    1,    0,    0,    0,   10,    0,
    0,    0,   13,    1,    2,    1,    2,    1,    0,    5,
    0,    5,    1,    1,    1,    0,    0,    0,    0,   15,
    5,    0,    1,    1,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    0,    5,    1,    1,    1,    1,
    0,    7,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    0,    7,    0,    7,    2,
    2,    2,    0,    0,    9,    1,    1,    0,    1,    0,
    6,    0,    6,    1,    0,    8,    0,    9,    0,    0,
   10,    0,    0,    3,    0,    1,    1,    2,    2,    0,
    5,    0,    2,    2,    2,    1,    1,    1,    0,    5,
    0,    5,    1,    1,    0,    0,    0,   12,    0,    2,
    2,    0,    1,    2,    1,    3,    2,    0,    5,    0,
    0,    0,   13,    0,    1,    1,    3,    1,    4,    2,
    0,    3,    2,    1,    3,    0,    3,    1,    1,    3,
    1,    2,    3,    4,    4,    0,    3,    1,    3,    3,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    2,    2,    2,    2,    2,    1,    3,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    2,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
    4,    4,    4,    3,    3,    4,    3,    4,    4,    0,
    1,    3,    4,    0,    1,    1,    3,    2,    3,    1,
    2,    3,    2,    1,    1,    0,    1,    1,    3,    3,
    2,    2,    1,    1,    1,    1,    2,    2,    4,    3,
    1,    4,    1,    3,    2,    1,    3,    1,    1,    1,
    4,    3,    2,    2,    6,    3,    7,    4,    3,    7,
    3,    0,    2,    4,    1,    2,    0,    1,    1,    3,
    3,    1,    1,    1,    0,    1,    1,    2,    2,    3,
    1,    2,    0,    1,    2,    4,    1,    3,    0,    5,
    1,    1,    1,    2,    3,    3,    4,    4,    1,    2,
    4,    4,    4,    3,    0,    4,    0,    1,    0,    4,
    4,    1,    2,    2,    1,    4,    1,    2,    2,    2,
    2,    2,    2,    1,    3,    3,    3,    1,    3,    3,
    3,    3,    3,    1,    3,    3,    1,    3,    3,    3,
    3,    1,    3,    3,    1,    3,    1,    3,    1,    3,
    1,    3,    1,    3,    1,    3,    1,    5,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    1,
    3,    3,    2,    1,    0,    1,    1,    1,    0,    2,
    1,    1,    0,    4,    0,    0,    7,    1,    1,    1,
    1,    1,    1,    1,    1,    0,    0,    0,    0,   15,
    0,    1,    0,    1,    1,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    0,    2,    0,    1,    1,    2,    4,    1,    3,    1,
    3,    1,    1,    0,    1,    1,    1,    0,    4,    1,
    1,    0,    4,    0,    1,    1,    2,    1,    1,    1,
    1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    0,    4,    1,
    2,    2,    2,    2,    2,    2,    1,    1,    2,    1,
    0,    6,    0,    7,    0,    2,    1,    0,    1,    1,
    2,    2,    4,    0,    2,    0,    1,    1,    2,    4,
    1,    5,    2,    2,    2,    2,    2,    1,    1,    1,
    1,    1,    5,    7,    0,    8,    0,    1,    1,    2,
    1,    0,    3,    1,    2,    3,    1,    1,    1,    1,
    1,    5,    7,    0,   10,    0,    1,    0,    5,    1,
    0,    1,    0,    1,    1,    1,    3,    6,    0,    9,
    1,    1,    1,    1,    1,    1,    2,    2,    3,    4,
    3,    3,    3,    4,    3,    0,    1,    3,    4,    5,
    3,    1,    2,    0,    1,    2,    0,    7,    3,    2,
    2,    0,    3,    5,    0,    0,   10,    0,    0,   10,
    5,    0,    2,    2,    2,    2,    2,    4,    5,    4,
    5,    0,    5,    0,    6,    3,    2,    0,    3,    0,
    0,    6,    0,    1,    1,    2,    1,    1,    1,    1,
    1,    0,    5,    0,    3,    0,    0,    0,   12,    0,
    0,    0,   13,    0,    2,    0,    3,    1,    0,    4,
    1,    0,    4,    1,    2,    2,    1,    2,    2,    0,
    0,    4,    2,    3,    0,    4,    0,    3,    1,    2,
    1,    0,    0,    1,    1,    1,
  };
   static readonly short [] yyDefRed = {            0,
   49,    8,    0,    0,    0,    0,  917,    0,    0,    0,
    4,    0,    5,    9,   11,   12,   13,   20,   21,   46,
    0,   45,   47,   48,   50,   51,   52,   53,   54,    0,
   58,  162,   23,    0,    0,    0,  346,    0,  348,   17,
    0,   66,   64,   65,    0,    0,    0,    0,    0,   67,
   69,  913,    0,    0,   18,    0,    1,    0,   10,    3,
    0,  652,  658,  650,    0,  647,  657,  651,  649,  648,
  655,  653,  654,  660,  656,  659,    0,    0,  645,   59,
    0,    0,  540,    0,  350,    0,   24,    0,    0,    0,
    0,    0,    0,   62,    0,  770,    0,  394,    0,  400,
  407,    0,    0,    0,  395,    0,    0,    0,  397,  434,
    0,  396,    0,    0,    0,    0,  403,    0,  405,    0,
  432,  392,    0,  399,  401,    0,  393,    0,  490,    0,
  433,    0,  529,  404,  406,    0,  842,  402,    0,    0,
    0,  633,    0,    0,  678,    0,  727,    0,    0,    0,
    0,    0,    0,    0,    0,  431,    0,  625,    0,  769,
  710,    0,    0,  398,    0,    0,  409,  410,    0,  412,
  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,
  423,  424,  425,  426,  429,  430,  629,  557,    0,  555,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  630,  628,  631,  632,  694,  696,    0,  692,  695,
  711,  713,  714,  715,  716,  717,  718,  719,  720,  721,
  722,  712,    0,    0,    0,  771,  772,  788,  789,  790,
  791,  811,  812,  813,  814,  815,  816,    0,    0,    0,
  921,  918,  924,   19,  914,    2,    6,   29,   27,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  372,  374,
    0,    0,  646,  172,  163,  171,    0,  353,    0,  354,
  375,    0,    0,  347,   16,    0,   68,   61,    0,   70,
    0,    0,    0,  817,  435,  436,  840,    0,    0,    0,
    0,    0,  411,    0,  818,    0,  549,  545,  548,  726,
  768,  697,  724,  723,  725,  698,  699,  700,  701,  702,
  703,  704,  705,  706,  707,  708,  709,    0,    0,    0,
  794,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  827,    0,  408,    0,    0,    0,
    0,    0,    0,  841,    0,    0,    0,  740,  736,    0,
    0,    0,    0,    0,    0,    0,    0,  554,  558,  559,
  553,  563,  562,  560,  561,    0,    0,  623,  728,  428,
  427,    0,    0,    0,  345,    0,  734,  735,    0,  493,
  494,    0,    0,    0,  732,  733,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  916,  693,  741,  731,  766,  767,  884,    0,    0,    0,
  896,  856,  854,  877,    0,    0,  875,  878,  879,  880,
  881,  857,  855,  920,    0,    0,    0,  356,    0,    0,
    0,  377,  387,    0,  383,  384,  636,    0,    0,    0,
  359,    0,    0,    0,    0,  382,  385,  386,   22,    0,
  352,  349,   60,    0,    0,   75,   76,   79,   80,  492,
    0,    0,  488,  489,    0,  486,    0,  743,    0,    0,
    0,    0,  764,  765,    0,    0,    0,  634,    0,  821,
  819,  635,    0,    0,  514,    0,    0,    0,  505,    0,
  509,  519,  521,    0,    0,  499,  501,    0,    0,    0,
    0,    0,  496,  503,  518,  822,    0,    0,  823,  831,
    0,    0,    0,  832,    0,    0,  843,    0,    0,  739,
    0,    0,    0,    0,    0,  691,    0,    0,  686,  688,
  689,  690,  439,  440,  825,    0,    0,    0,  197,  196,
  198,    0,    0,    0,    0,  379,    0,  610,    0,    0,
  444,    0,  447,    0,  445,  544,    0,    0,    0,    0,
    0,  473,  476,    0,    0,  468,  475,  474,  564,    0,
  599,  600,  601,  602,  603,  604,  605,  606,  607,  609,
  608,  565,  567,  566,  572,  573,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  596,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  868,  870,  867,    0,  876,   28,   35,    0,    0,
    0,    0,  325,    0,  138,    0,    0,    0,  231,    0,
  107,    0,    0,    0,  164,    0,    0,    0,  355,    0,
   81,   73,    0,  443,  491,    0,  542,    0,  551,  184,
  205,    0,    0,    0,  174,    0,    0,    0,  185,  546,
    0,  845,    0,  806,    0,  797,    0,    0,    0,  820,
    0,    0,    0,  504,    0,  520,  522,  161,  525,  159,
  160,  527,    0,    0,    0,  460,    0,    0,  456,    0,
    0,  483,    0,  524,  498,    0,  541,    0,  836,    0,
  829,    0,  833,  533,    0,    0,    0,  531,    0,    0,
  543,    0,  848,    0,  860,    0,  858,    0,  680,  681,
  679,  687,  824,  618,  624,  617,    0,  729,  613,    0,
    0,    0,  556,  448,  442,  446,  441,  482,  481,  478,
  477,    0,  472,  437,  438,  449,    0,    0,  747,    0,
    0,  885,  862,    0,  886,    0,  882,    0,  897,    0,
    0,    0,    0,  866,    0,   31,   26,  340,    0,  357,
  331,  330,    0,  140,    0,  167,  637,  227,  103,  142,
    0,  363,    0,    0,    0,    0,  360,   86,   85,    0,
    0,   77,   78,  487,    0,    0,    0,    0,    0,  194,
    0,  550,    0,    0,    0,    0,    0,  798,    0,    0,
    0,    0,    0,  844,  511,  510,    0,    0,  463,    0,
    0,  925,  926,  452,  458,    0,  461,    0,  485,    0,
    0,    0,  775,  839,    0,  830,  539,  534,    0,    0,
  530,    0,  851,    0,  792,  861,  859,  622,  621,  620,
  612,  611,  626,  480,    0,  470,  469,  598,    0,  761,
  746,    0,    0,    0,  750,    0,  864,    0,  890,    0,
  905,  906,  899,  869,  871,  911,   14,    0,    0,    0,
  371,    0,    0,  368,  326,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  146,    0,    0,  364,  365,
   83,   82,  755,  134,  135,    0,    0,    0,  758,  203,
  204,    0,  195,    0,    0,    0,  177,  186,  178,  180,
    0,    0,    0,    0,  802,    0,  807,  808,    0,    0,
  528,  526,  462,  464,  465,  459,  453,  457,    0,  516,
    0,  484,  495,  451,    0,  835,    0,    0,  535,    0,
    0,    0,  479,    0,    0,  742,  751,  863,    0,    0,
    0,  883,    0,    0,    0,   15,    0,    0,    0,  677,
  676,    0,  675,    0,  367,    0,  158,    0,    0,    0,
    0,  153,    0,    0,    0,    0,    0,  143,    0,  137,
  147,  165,  170,    0,  744,  759,  189,    0,  201,    0,
    0,    0,  793,  853,    0,    0,    0,  809,  774,  500,
  497,  781,    0,  787,    0,    0,  779,    0,  784,  837,
  538,  537,    0,  627,    0,    0,  865,  887,    0,    0,
    0,  901,    0,  912,   43,    0,    0,  341,  370,  369,
    0,  327,    0,  335,    0,    0,  139,  154,  168,  391,
  390,    0,  388,    0,  638,    0,  665,  228,  104,  149,
    0,    0,    0,  190,    0,  181,  179,  846,  799,    0,
    0,  804,    0,    0,  776,  780,    0,  785,    0,  849,
    0,  753,    0,  891,  908,  909,  902,  872,   36,   44,
    0,    0,    0,    0,  157,  155,    0,    0,    0,    0,
  666,    0,    0,    0,  166,  760,  188,    0,  200,    0,
    0,  810,  786,    0,  682,  838,    0,  762,    0,    0,
    0,  342,    0,    0,  336,  169,  389,    0,    0,    0,
  108,  105,  150,  191,  847,  795,    0,  850,  888,    0,
  903,    0,    0,  328,  672,    0,  673,  670,    0,  668,
  101,    0,  100,   92,   93,    0,    0,   89,   91,   94,
   95,   96,   97,   98,   99,    0,    0,  244,  237,  238,
  236,  239,  240,  241,  242,  243,    0,    0,  234,    0,
    0,    0,    0,  892,  343,  339,    0,    0,    0,  639,
   90,  287,  282,  286,    0,  229,  235,  122,  115,  116,
  114,  117,  118,  119,  120,  121,  123,    0,    0,  112,
  106,  683,    0,    0,  671,  669,    0,    0,    0,    0,
    0,  295,    0,    0,  245,    0,    0,  253,    0,    0,
  109,  113,    0,  889,    0,    0,    0,  281,    0,  280,
    0,    0,    0,  361,    0,  206,    0,    0,    0,    0,
  640,  230,  895,  893,  124,  358,    0,    0,    0,    0,
    0,    0,  210,  362,  248,  247,  246,  259,  258,  255,
  260,  261,  254,  273,  272,  265,  266,  262,  264,  263,
  267,  256,  257,  268,  269,  275,  274,  270,  271,    0,
    0,  299,    0,  278,  276,    0,    0,  207,    0,  251,
  133,  131,    0,    0,  303,    0,    0,    0,    0,  284,
    0,    0,    0,    0,    0,    0,    0,  128,  318,    0,
  300,    0,    0,  312,    0,    0,    0,  307,    0,    0,
  296,    0,  218,    0,  208,    0,    0,    0,    0,  132,
    0,  125,  129,    0,    0,    0,  314,    0,  315,  304,
    0,    0,  298,  308,  279,  277,  294,    0,  285,  289,
    0,    0,  215,  217,  211,  252,  130,  319,  321,  301,
    0,    0,  313,  310,    0,    0,  219,  221,  209,    0,
    0,    0,  312,  290,  292,    0,    0,  212,  323,  324,
  320,  322,  311,    0,    0,  225,  224,  223,  220,  222,
    0,    0,    0,  213,  291,  293,
  };
  protected static readonly short [] yyDgoto  = {             9,
   10,   11,   12,   13,   61,   14,   15,   16,   17,  898,
   56,   18,   19,  256,   36,   20,  672,  250,  639,  446,
 1409,   93,  899,  785,  988, 1056, 1057,   22,   23,   24,
   25,   26,   27,   28,   29,  673,   31,   47,   48,   49,
   50,   51,  280,   95,  475,  476,  477,  301,  583,  811,
  810, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184,
 1185,   77,  257,  461,  652, 1005,  911, 1075, 1152, 1123,
 1201, 1228, 1200, 1229, 1230, 1071, 1323, 1311, 1336, 1337,
 1338,  923, 1334,  924,  701, 1244,  801,  653,  914,  451,
  907,  795, 1000,  880,  912,  915,  916, 1124, 1001, 1002,
  998,   32,  265,   81,  462,  674,  803, 1081,  908, 1117,
   78,  302,  675,  676,  677,  678,  679,  818,  564, 1128,
  819,  565,  821, 1266, 1282, 1355, 1331, 1382, 1267, 1319,
 1400, 1421, 1356, 1357, 1419, 1406, 1407,  650,  910, 1122,
 1197, 1250, 1198, 1199, 1245, 1287, 1269, 1246,  271, 1310,
 1333, 1248, 1328, 1327, 1186, 1213, 1263, 1379, 1352, 1136,
 1380,  584, 1414, 1415, 1262, 1326, 1313, 1346, 1341, 1324,
 1365, 1370, 1344, 1347, 1348, 1403, 1371, 1342, 1343, 1411,
 1401, 1402,  643,  793, 1062,  996, 1113, 1063, 1064, 1143,
  900, 1111, 1162,  455,   37,  162,   85,   39,  272,  790,
  641,  465,  903,  904,  992,  260,  261,  330,  453,  336,
 1072, 1073,  164,  165,  337,  167,  168,  169,  170,  171,
  172,  173,  174,  175,  176,  177,  178,  179,  180,  181,
  182,  183,  184,  185,  186,  288,  766,  963,  523,  707,
  844,  708,  709,  956,  187,  245,  713,  585,  586,  587,
  588,  760,  485,  486,  331,  961,  715,  332,  508,  509,
  510,  511,  333,  514,  703,  343,  729,  730,  858,  298,
  491,  299,  490,  188,  189,  190,  191,  192,  193,  194,
  195,  196,  197,  198,  199,  200,  201,  202,  203,  567,
  568,  569,  745,  746,  870,  747,  204,  557,  372,  972,
  205,  503,  648,  909, 1120, 1249,   79, 1076, 1077, 1169,
 1170,  993,  547,  356,  741, 1157,  548,  549,  303,  304,
  305,  208,  209,  210,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  222,  318,  558,  223,
  224,  350,  771,  624,  883,  816,  668,  927,  881,  884,
  885,  928,  929,  319,  225,  226,  227, 1035,  965, 1036,
 1037, 1038, 1097, 1039,  228,  229,  230,  231,  685,  496,
  946, 1090,  686,  944,  687, 1092, 1093,  232,  233,  234,
  235,  236,  237,  338,  533,  534,  967, 1099,  346,  943,
  827, 1130,  864, 1137,  238,  433,  239,  434,  886,  979,
  435,  635,  784,  781,  782,  984,  436,  437,  438,  439,
  440,  441,  890,  625,  888, 1103, 1203, 1254,  981, 1140,
 1234,  779,  631,  780, 1051,  983, 1052, 1141,  985,   53,
  242,   54,
  };
  protected static readonly short [] yySindex = {         -188,
    0,    0, -197, -190, -178, -105,    0, -162,    0,   77,
    0,  -94,    0,    0,    0,    0,    0,    0,    0,    0,
 3850,    0,    0,    0,    0,    0,    0,    0,    0,    6,
    0,    0,    0,  321,   74,   34,    0,  100,    0,    0,
  118,    0,    0,    0, -240,   74,  155,  129,  203,    0,
    0,    0, 5812,   79,    0,  -57,    0,  -94,    0,    0,
  -94,    0,    0,    0, -185,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,11248,10163,    0,    0,
  399,  155,    0, 3185,    0,  165,    0,  174,  255, -240,
  129,  155,  235,    0,  245,    0,   28,    0,  297,    0,
    0, -227,10772,  305,    0, -229,  274, 5964,    0,    0,
 -229,    0, -229, -229, -146, -229,    0, -229,    0,  332,
    0,    0, 9875,    0,    0, -229,    0, -229,    0, 9875,
    0,  409,    0,    0,    0, -227,    0,    0, -229,  368,
 -229,    0, 8975,11292,    0, 9875,    0,10530,10530,10530,
10530,10530,10530,10530,10530,    0,  -14,    0,11384,    0,
    0,  415,  407,    0,  600, -225,    0,    0,  448,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  936,    0,
  652, -173,  567,  542,  618,  402,  454,  464,  471,  246,
  522,    0,    0,    0,    0,    0,    0, 2479,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  436,  528,   80,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   29,   41,   79,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  556,
11408,  530,11452,  368,  633,  416,  248, 8873,    0,    0,
  528, -225,    0,    0,    0,    0,  459,    0,  368,    0,
    0,   -4,  174,    0,    0,  626,    0,    0,10006,    0,
  770,  625,10137,    0,    0,    0,    0, 9875, -229, -229,
  144,  600,    0,  631,    0,11384,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  721,   99,10772,
    0,11384, 9875,  697,  703, 9875, 9875, 7992,  -26,  716,
 -144,11452,  528,  125,    0,  718,    0,  722,11384, 9875,
  730,  343, -229,    0, 9875,  409, 9351,    0,    0,  368,
 9875, -220,  699, -211,  714, 6116, -244,    0,    0,    0,
    0,    0,    0,    0,    0,  768, 9875,    0,    0,    0,
    0,11224,  799,  174,    0,  380,    0,    0,  388,    0,
    0,  757,10137, 9089,    0,    0,10530, 9875, 9875, 9875,
 9875, 9875, 9875, 9875, 9875, 9875, 9875, 9875,10530,10530,
10530,11384,11384,10530,10530,10530,10530,10530,10530,10530,
10530,10530,10530,10530,10530,10530,10530,10530,10530, 9875,
    0,    0,    0,    0,    0,    0,    0,11476,11520,  764,
    0,    0,    0,    0, -255,  911,    0,    0,    0,    0,
    0,    0,    0,    0,  774,  819,  530,    0,  828,  368,
 -174,    0,    0,  797,    0,    0,    0,  944,  955, -240,
    0,  846, 8903,  800,  802,    0,    0,    0,    0,11384,
    0,    0,    0,  356,  362,    0,    0,    0,    0,    0,
  174,   85,    0,    0,  390,    0,  850,    0,  852,    3,
  409, -229,    0,    0,  807, 9351, -221,    0,  855,    0,
    0,    0,  856,  860,    0,  314,    0,  869,    0,  866,
    0,    0,    0,  485, 6572,    0,    0, 7442,  496, 9875,
  716, 9089,    0,    0,    0,    0,  871,  873,    0,    0,
 -227,  409, -131,    0, 6589,  874,    0,  876,  823,    0,
  878, 9875,  952, 9875,  958,    0, -256, 6116,    0,    0,
    0,    0,    0,    0,    0,  883,  409, 6116,    0,    0,
    0,  368, -240,  845,11544,    0,  892,    0,  898,10530,
    0,  370,    0,  378,    0,    0,  581, 9875, 9875,  900,
 1014,    0,    0,   -8,  902,    0,    0,    0,    0,  652,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  652,  652, -173, -173,
  567,  567,  567,  567,  542,  542,  618,  402,  454,  464,
  471,    0,  905, -198, 9875, -183,  864, -120,  867,  909,
 9875,    0,    0,    0,  930,    0,    0,    0,  916,  931,
  888, 6741,    0,  928,    0, -240,  934,  530,    0,  530,
    0,  530,  925,  939,    0,  938,  174,  607,    0,  182,
    0,    0,10006,    0,    0,10137,    0,  935,    0,    0,
    0,  667,    6,  946,    0,  947,  948,  949,    0,    0,
 9875,    0,  906,    0,  950,    0,  951, 9875, 1021,    0,
 5964, 5964, 6876,    0, 7992,    0,    0,    0,    0,    0,
    0,    0,  953, 9482,  132,    0, -232, -165,    0,  901,
  912,    0, -172,    0,    0,  956,    0,  965,    0, 6893,
    0,  409,    0,    0,  342,  467,  918,    0,  962,  977,
    0, 5964,    0, 5964,    0, 9875,    0, 9875,    0,    0,
    0,    0,    0,    0,    0,    0, 7028,    0,    0,  933,
11224, 1004,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 8958,    0,    0,    0,    0, 9220, 9875,    0, 6724,
  979,    0,    0, 1055,    0, 1058,    0,  728,    0,  984,
 9875, 9875,  941,    0, 1001,    0,    0,    0, -137,    0,
    0,    0,  998,    0,  997,    0,    0,    0,    0,    0,
  993,    0,    3,    3,  996,  999,    0,    0,    0, 9875,
 9875,    0,    0,    0, 9613, 1000,  667,11544,  395,    0,
11384,    0,  109, 1109, 1110, 1003,  992,    0, 9875, 9875,
 1006, 9875, 1094,    0,    0,    0, 6876, 1012,    0,  -84,
 9744,    0,    0,    0,    0, 7311,    0, 1120,    0,  528,
 9875, 1015,    0,    0,  966,    0,    0,    0,  967,  387,
    0,  968,    0,  992,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  545,    0,    0,    0,11452,    0,
    0,  969, 1007,  979,    0, 9875,    0, 9875,    0, 9875,
    0,    0,    0,    0,    0,    0,    0, 1001, -162,    3,
    0, -153,    2,    0,    0, 1127, 1020,    3, 1022, 1022,
 1022, 6876,  971, 1019,  993,    0, 1024, 1027,    0,    0,
    0,    0,    0,    0,    0,  982, 1025, 1000,    0,    0,
    0, -170,    0, -164, 1028, 1029,    0,    0,    0,    0,
 1031, 6876,  979, -198,    0, 1032,    0,    0, 1037, 5964,
    0,    0,    0,    0,    0,    0,    0,    0, 1034,    0,
  716,    0,    0,    0, -196,    0, 1038,  387,    0,  991,
  979,  409,    0,  990, 1033,    0,    0,    0, 9875, 1063,
 9875,    0, 9875, 1060,  911,    0, -162, -127, 1045,    0,
    0, 1005,    0, -137,    0,    6,    0, 9875, 1008, 1042,
 1020,    0, 1047, 7045, 1080, 1080, 1080,    0, 1044,    0,
    0,    0,    0, 1048,    0,    0,    0,  283,    0, 1049,
 1167, 1170,    0,    0, 1061,  979, 9875,    0,    0,    0,
    0,    0, 9875,    0, 1064, -203,    0, -203,    0,    0,
    0,    0, 1062,    0, 9875, 6724,    0,    0, 1083,  763,
 1065,    0, 9875,    0,    0, 1068, -127,    0,    0,    0,
 1023,    0, 1069,    0, 1067,  997,    0,    0,    0,    0,
    0, 1071,    0, 1030,    0, 1080,    0,    0,    0,    0,
 1080, 9613, 1079,    0, 9875,    0,    0,    0,    0, 1066,
  951,    0, 5964, 1075,    0,    0, 6116,    0, 1084,    0,
 1082,    0, 9875,    0,    0,    0,    0,    0,    0,    0,
 1080,    0, 1085,    6,    0,    0, 1080, 7045, 1081, 1087,
    0, 1088, 1090, 6876,    0,    0,    0, 9875,    0, 5964,
 5964,    0,    0, 6116,    0,    0, 5964,    0, 1108, 9875,
 9875,    0, 1099,  916,    0,    0,    0,11316,  -71,    6,
    0,    0,    0,    0,    0,    0, 6116,    0,    0, 1128,
    0, 1086, 9875,    0,    0, 1111,    0,    0, 1112,    0,
    0,10163,    0,    0,    0, 1115,  -71,    0,    0,    0,
    0,    0,    0,    0,    0,  493,10163,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1116,    6,    0,    6,
  916, 1119, 9875,    0,    0,    0, 1117,11316,10989,    0,
    0,    0,    0,    0,11021,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1122,    6,    0,
    0,    0, 1130, 9875,    0,    0,11384,11384,  104,  269,
  368,    0, -240, 3309,    0, 1182,    0,    0,  916,  916,
    0,    0, 1076,    0, 1130, 1089,  797,    0,11384,    0,
11384, 1091, 1135,    0,  846,    0, 1139,  -12,  526,10494,
    0,    0,    0,    0,    0,    0, 1143, 1142, 1146, 1153,
    3, 1158,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1164,
 -189,    0, 1156,    0,    0, 1174, 1178,    0,    3,    0,
    0,    0, 1177,  -37,    0, 1179,    3,    3,  399,    0,
   75, 1184,    3, 9613, 1138, 1183, 1177,    0,    0,10163,
    0,    6,    6,    0, 1140, 1185, 1179,    0, 1188, 1190,
    0, -180,    0,10163,    0,   75,   75, 1196, 1192,    0,
 -189,    0,    0,  161, 1197,10163,    0,10163,    0,    0,
 6876, 1186,    0,    0,    0,    0,    0,   51,    0,    0,
  809, 1200,    0,    0,    0,    0,    0,    0,    0,    0,
 1249, 1302,    0,    0, 1202, 1203,    0,    0,    0,   75,
  564,  564,    0,    0,    0,  -39,  -39,    0,    0,    0,
    0,    0,    0, 9089, 9089,    0,    0,    0,    0,    0,
 1208, 1199, 1206,    0,    0,    0,
  };
  protected static readonly short [] yyRindex = {         2082,
    0,    0,    0,    0,    0, 6268,    0,    0,    0, 2082,
    0, 1574,    0,    0,    0,    0,    0,    0,    0,    0,
11095,    0,    0,    0,    0,    0,    0,    0,    0,  972,
    0,    0,    0,  554, 1204,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  516,  656,    0, 1211,    0,    0,
    0,    0,    0, 1924,    0,   35,    0, 1574,    0,    0,
 1574,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  268,10674,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2319,    0, 2578,
 1211, 1212,    0,    0,  593,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1216,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,11588,
    0,    0, 1209,    0,    0,    0,    0,    0,    0, 1209,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  188,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 5657,    0,    0,    0,
    0,    0,  272,    0, 3879, 3483,    0,    0, 3725,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1144,    0,
 4108, 3964, 4486, 4801, 4990, 5116, 5242, 5368, 5494, 5620,
  524,    0,    0,    0,    0,    0,    0,   35,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1166,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  793,  793, 2008,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1220,
    0,    0,    0, 7206,  383, 2719,    0,    0,    0,    0,
 3339, 2719,    0,    0,    0,    0,    0,    0, 4030,    0,
    0,    0, 2319,    0,    0,    0,    0,    0,  637,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2797,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1222,    0,    0,
    0,    0, 2161, 2797,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2952,
    0,  324,    0,  324,    0,  -33,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1209,    0,    0,    0,
    0, 1221,    0, 2797,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   30,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -24,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1227,  303,
    0,    0,    0,    0,    0,    0,    0, 1180, 1181,  583,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 7972,    0,    0,    0,    0,    0,    0,
 2797, 3637,    0,    0,    0,    0,    0,    0,    0,11140,
    0,    0,    0,    0,    0, 1219,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  613,  677,    0,    0, 1241,
    0,    0,    0,    0,    0,    0,    0,  -25,    0,    0,
 3417, 1248,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1388,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  -21,    0,    0,
    0,    0,    0,    0,    0,    0, 7180,    0,    0,    0,
    0, -163,  596,    0,    0,    0, 1250,    0,    0,    0,
    0, 2797,    0, 2797,    0,    0,    0,    0,    0,  115,
    0,    0,    0,    0,   37,    0,    0,    0,    0, 4171,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 4234, 4297, 4360, 4423,
 4549, 4612, 4675, 4738, 4864, 4927, 5053, 5179, 5305, 5431,
 5557,    0,    0,  685,    0,  324,    0,  324,    0,    0,
    0,    0,    0,    0, 3843,    0,    0,    0, 1824,    0,
  760,    0,    0,    0,    0,  661,    0,    0,    0,    0,
    0,    0,  698,    0,    0,    0, 1215,  704,    0,10268,
    0,    0,    0,    0,    0,    0,    0,  708,    0,    0,
    0,11612, 8136,    0,    0,  729,  735,  742,    0,    0,
    0,    0,    0,    0,    0,    0, 1245,    0,    0,    0,
    0,    0,    0,    0, 1255,    0,    0,    0,    0,    0,
    0,    0, 1256,    0, 1218,    0,    0,   25,    0,  -60,
 3030,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  695,  347,    0,    0,    0, 1253,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  229,    0,    0,    0,
 1252,    0,    0,    0,    0,    0,    0,  193,    0,  334,
    0,    0,    0,    0, 7602,    0,    0,    0, -231,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1258,    0,11140,11140,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1259,11656,    0,11680,    0,
    0,    0,  849,    0,    0,    0,  765,    0, 1260,    0,
    0,    0, 1542,    0,    0,    0, 1264,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3184,
    0, 3571,    0,    0, 1265,    0,    0,    0,    0,  695,
    0,    0,    0,  765,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  627,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 7702, 7802,11140,
    0, 1224,    0,    0,    0,10399, 1263,11140,  130,  130,
  130,    0,    0,    0, 1267,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1268,    0,    0,
    0,    0,    0,    0,  773,  781,    0,    0,    0,    0,
    0,    0, 1273,  685,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 3417,    0,    0,    0, 1272,    0,    0,  695,    0,  805,
 1273, 7180,    0,  535,  720,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  199,    0, 7902, 8691,    0,    0,
    0,    0,    0, -231,    0,  120,    0,    0,    0,    0,
 1271,    0,    0,    0, 1281, 1281, 1281,    0,  783,    0,
    0,    0,    0,    0,    0,    0,    0,  741,    0,  756,
    0,    0,    0,    0,    0, 1252, 1279,    0,    0,    0,
    0,    0,    0,    0,    0, 1284,    0, 6420,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  240,
  487,    0,    0,    0,    0,    0, 8776,    0,    0,    0,
    0,    0, 1285,    0,    0,    0,    0,    0,    0,    0,
    0,  256,    0,    0,    0,  566,    0,    0,    0,    0,
  570,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1282,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1286,  371,    0,  192,    0,    0,  570,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -110,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1705,    0,    0,    0,    0, 8210, 8532,
    0,    0,    0,    0,    0,    0, 1297,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  275,    0,
    0,10840,    0,    0,    0,    0, 8297,    0,    0,    0,
    0,    0,    0,    0,    0,    0,10921,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 8617,    0, 8371,
 1705,    0,    0,    0,    0,    0,    0,    0,  268,    0,
    0,    0,    0,    0,  268,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 8458,    0,
    0,    0,  507,    0,    0,    0,    0,    0,    0,    0,
  606,    0, 8835,    0,    0,    0, 2922,    0, 1705, 1705,
    0,    0,    0,    0,  507,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1307,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  598,    0,    0,    0,
11140,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  787,    0,    0,    0,    0,    0,11180,    0,
    0,    0, 1299,11799,    0, 1300,11140,11140,    0,    0,
10032,    0,11140,    0,    0,    0, 1310,    0,    0,  163,
    0,11761, 9901,    0,    0,    0, 1311,    0,    0,    0,
    0,  643,    0,  816,    0, 9246, 9508,    0,    0,    0,
    0,    0,    0,    0,    0, 1369,    0, 1422,    0,    0,
    0,  790,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,10032,
11721, 9115,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1248, 1248,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,
  };
  protected static readonly short [] yyGindex = {            0,
 1632,  705,   46,    0,    0,   47, -651,   -3, -668,    0,
  794,    0,    0,   23,    0,    0,    1,    0,    0,    0,
 -616,  -72,    0,    0,    0,    0,    0, -733, -573, -547,
    0,    0,    0,    0,    0,   42,  -16,    0, 1642,    0,
 1602,    0,    0,    0,    0, 1035, 1036,  -43, -243,    0,
    0,    0,    0,  518,-1049, -744, -635, -540, -488, -452,
-1084,-1110,    0, -218,    0,  279,    0, -690,    0,    0,
    0,    0,    0,    0,  468,  -45,  335,    0,    0,    0,
  363,-1033,    0, -311, -326,  -27,    0,    0,    0, -312,
  635,    0,    0, -509,    0,    0,  796,    0,    0,  702,
    0,    0,  379,    0, -439, -758,    0,    0,    0,    0,
 -258,  -51,    0,    0,  886,  903,  904,    0, -522,    0,
    0, -529,  907,  473,    0,-1229,    0,    0,    0,    0,
    0,    0,    0,    0,  327,    0,    0,    0,    0,    0,
    0,    0,    0,  533,    0,    0,    0,    0,  -74,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  549,
    0, -514,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  333,    0,    0,  391,    0,    0,  394,  397,  338,
    0,    0,    0,    0,    0,    0,    0,    0,  628,    0,
    0,    0,    0,  148,    0,  178,   45,    0,    0, 1095,
    0,  497,    0,  749,    0, 1210, -235, -207, -102,  413,
    0,  629,    0,  -82,   91,    0,    0,   58,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -295,    0,  693,    0,    0, -693,    0,
    0,    0,  910,    0, -477, -181, 1040,  986,    0,  985,
    0, 1176, 1363, 1092,    0,    0,  803,    0,    0,    0,
    0, 1070,    0,    0,    0,    0,    0,    0, -606,    0,
    0,    0,    0,    0, 1054,    0,  408,  788,  639,  784,
 1335, 1342, 1350, 1351, 1352,    0, 1353,    0,    0,    0,
 1026,    0,  801,    0,    0,    0,    0,    0,    0,    0,
    0, -320,    0,    0,    0,    0,  -41,    0,  706,    0,
  563,    0,  617,    0,    0,    0,  681, -526,  -46, -343,
  -44,    0, 1571,    0,   26,    0,   49,   53,   55,   56,
   57,   60,   64,   65,   67,   68,    0, -644,    0,  -78,
    0,    0,  836,    0, -652,    0,    0,    0,  737,    0,
  897,    0,  857, -467,    0,    0,    0,    0,    0,    0,
  748,    0,    0,  750,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  759,    0,    0,    0,    0,    0,
    0,    0,    0,  -86,    0, 1254,    0,    0,    0,  926,
    0,    0,    0,    0,    0, -223,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1355,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  534,    0,    0,
    0,    0,    0,    0,    0,    0,  651,    0,    0,    0,
    0,    0,
  };
  protected static readonly short [] yyTable = {           463,
   21,  161,  259,  516,   55,  702,  206,  716,  207,  160,
   21,  499,  551,   80,  647,  443,  424,  452,  276,  524,
  292,  742,  787,  656,  294,   35,  421,   46,  684,  266,
  541,  748,  507,  449,  923,  479,  263,  349,  270,  484,
  710,   30,  750,  341,  917,  918,  833,  834, 1126,  258,
  287,   30,  244,  466,   21,   58,   59,  769,   33, 1032,
  378, 1209,   56,  386, 1033,   40, 1321,    1,    2,   46,
  248, 1033,  688,  542,   56, 1377, 1215,   42,  211,  335,
  342,  644,  544,  849,  344, 1017,  335,  863,  402,  865,
  845, 1019,  380,  632,  633,   30,  452,  353,  355,  241,
 1191,  212,  357,   43,  267,  213,  739,  214,  215,  216,
  773,  517,  217,  373,   46, 1227,  218,  219,  901,  220,
  221,  323,  553,  521,  403,  525, 1383, 1384,    1,  324,
  842,  375,  274,  897,  145,   44,  285,  531,  285,  484,
  990,  989,  820,  166, 1227,   83,    3,  955, 1191, 1003,
 1221,   52,  991,  456,  722,  348,  161,  783,  964,  468,
  293,  206,    2,  207,  160,   83,  740,  634,   84,    4,
 1408,  849,    3,  775,   83,    5,  259,  770,  554, 1221,
   38,   56,   38,  835, 1171,  286, 1322,  286,   84, 1378,
  843,  689,  850,  166,  714,  923,  851,   84,  166,  404,
  405,  371,   83,  846,  551,  293,  293,  293,  293,  293,
  293,  293,  293, 1034,  551,   34, 1416,  518, 1339,  519,
 1034,  285,   41,  447,   38,   84,    5,  249,  640, 1364,
    6,    7,    8,  211,   45,  478,    5,  292,  645,  483,
   21,  495, 1018, 1381,  487,  292,  986,  540, 1020,  380,
  489,  366,  783,  969,   38, 1391,  212, 1392,  670,   38,
  213,   38,  214,  215,  216,   83,  325,  217,  539,   38,
  286,  218,  219,  520,  220,  221,  497,    3,  953,  498,
  556,   30,  502,  504,  851,  444,   59,  930,   84,  933,
 1025,  923,    5,  527,  537,  932,  528,  566,  166,  367,
 1360,  536,  923,  538,  772, 1029,  783,  502,  923,  550,
  377,  552, 1284,  385, 1395, 1078, 1079,  472, 1043, 1055,
   38,   38,  145,  335,  874,  874,    5,  951,  368,  684,
 1353, 1417,    1,    2,    1,  371,   38,  454,  512,  483,
  582,  685,  513,  671,  591,  592,  593,  594,  595,  596,
  597,  598,  599,  600,  601,  369,  605,  606,  764, 1258,
  826, 1041,  947, 1042,  470,  243,    5,  427,  710,    5,
  994,   83,  428, 1089,  429, 1396,  623,  293,  371,  427,
  430,  431,  627,  629,  428,  293,  429,  455, 1110,  684,
 1125,  281,  430,  431,   84,  282,  466,  454,  874,  507,
  658,  685, 1008,  467,   87, 1192,  471,  370, 1259,  467,
  166,    3,  995,    3,  765, 1173, 1188,  683,  571,  479,
 1142,  263,  484, 1388,  659,  643, 1146,  368,   38,  797,
   38,  798, 1024,  799,    4,  464,    4,  166,    5,  680,
    5,   86,    5, 1173,  293,  283,  166,  455, 1132,  935,
  425,  432,  466, 1192,  660, 1222,  293,  293,  293,  467,
  259,  293,  293,  442, 1188,  163, 1218,  368,  661,  493,
   83,  700,    5,   38,  368, 1389,  712,  643,  582,  719,
  721,  633,  332,  633, 1222, 1155, 1156,  808,  925,  262,
  566,  661, 1158,   84,  809, 1218,  262,   92,  735,   38,
  737,  550,  426,  552,  654,  744,  370,  841,  945,   38,
   83,  550,   88,  552, 1193,  163,   38,   83,  371,  457,
  163,  494, 1317,  876, 1260,  664,  371, 1164,  847,   83,
   89,  904,   56,   84,  759,  759,  904,  633,  904,  641,
   84,  904,  904,  458,  904,  904,  370,  873,  873,   38,
  371,  737,   84,  370,  334,  262,  262,  726,  378,  684,
 1332,  904, 1193,  641, 1223,  370,  974,   90, 1349, 1350,
  459,  262,   94, 1261, 1359, 1174, 1189,  273,  907,   38,
   38,  502,   84,  907, 1231,  907,  166,  778,  907,  907,
  641,  907,  907, 1223,  662,  471,  792,  471,  530,  278,
  737, 1175, 1190, 1174,   56,   38,   38,  742,  907, 1194,
  279,  531,  292,  667, 1153,  904,  755,  662,  757,  478,
  163,  873,  483,  456, 1189,  275, 1219,  293,  532, 1175,
  838,  464, 1271, 1272,  714,  344,  667,  502,  166,  297,
  464,  418,  960,  452,  831,  667, 1083,   38,  166,  700,
 1190,  471, 1220,  419,  642, 1219,   80, 1194, 1084, 1224,
  712, 1195,  907,  262,  378,  262,  378,  284,  378,  378,
  856,  378,  898,  378,  855,  295,  566,  898,  642,  898,
  351, 1220,  898,  898,  344,  898,  898,  351, 1224,  693,
  654,  351,  866,  328,  867,  329,   82, 1196,  368,   83,
  559,  805,  806,  869,  351,  642,   83,  560,  262, 1195,
  344, 1225,  727,  344,   57,  378,   60,  378,  582,  561,
  378, 1094,   84,  582,  878,  660,  700,   83,  662,   84,
  663,  661,  163,  337,  262,  370,  351,  894,  895,  337,
 1225,   83,   38,  566,  262, 1196,  338, 1226,  348,  371,
   84,  262,  293,  551,  665,  925,  898,  857,  666,  163,
  145, 1054,  246,  375,   84,  247,  921,  922,  163,  264,
  145,  498,  375, 1129,  376,  934, 1226,  370,   84,  597,
  414,  166,  166,   86,  262,  502,   84,  348,  949,  902,
  551,  754,  572,  700,  590,   84,  348,  954,  296,  756,
  574,  573,  857,  320, 1265,  321,  322,  962,  326,  575,
  327,  607,  608,  551,  262,  262, 1154, 1276,  339,   38,
  340,  387,  166,  375,  166,  900,   86,  374,  345,  469,
  900,  347,  900,  351,  859,  900,  900,  415,  900,  900,
  262,  262,  978,  416,  980,  894,  982,  348,  423,  696,
  894, 1206,  894,  697, 1135,  894,  894,  384,  894,  894,
  711, 1393,  597, 1212,  513,  417,  373,  597,  700,  597,
  597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
  351,  351,  262,  351,  351,   63,  597,  145,  597,  373,
  597,  329,  597,  597,  597,   55, 1285,   38,  700, 1422,
 1423,  763,  373,  763,  274,  763,  420,  373,  163,  900,
  250,  973,  373,  767,  373,  373,  373,  373,  408,  409,
  744,  351,  373,  445,  351,  145,  373,  664,   38,  894,
  373,  663,  410,  411,  786, 1047,  664, 1049,  373, 1050,
  663,  373,  448,  373,  356,  758,  597,  262,  356,  666,
  351,  136,  351,  136, 1065,  406,  407,   72,  136,  351,
  163,   72,  614,  351,  614,  285,  297,  379,  297,  454,
  163,   55,  559,  297,  817,  512,  351,  262,  351,  560,
  351,  512,  345,  244,  384,  463,  380,  381,   21,  498,
  473,  561,  356,  749,  902,   38, 1061,  749,   38,  351,
  351, 1101,  700,   74,  288,   74,  382,  925,  351, 1108,
  412,  413,  472,  288,  286,   84,  789,  383,  373,  351,
   71,   71,  356,  522,   71,  480,  356,  351,  351,  356,
  351,  356,  399,  400,  401,  535,  356,  481,  498,  513,
  166,  498,  429,  488,  429,  513,  611,  612,  613,  614,
  550,  351,  552,  745,  262,  745,   38,   21,  351, 1139,
  492,  351,  351,  429,  429,  366,  141,  500,  141,  366,
  356,  351,  366,  501,  366,  351,  754,  515,  754,  366,
  700,  891,  892,  429,  498,  376,  752,  550,  752,  552,
  752,  429,  526,  175,  429,  175, 1160, 1050,  366,  182,
  529,  182, 1168,  163,  163,  187,  183,  187,  183,  187,
  550,  543,  552,   56, 1061,   56, 1105, 1106,   56,  498,
  199,  366,  199,   56,  199,  366,  545,   56,  366,  366,
  366,  852,  262,  852, 1247,  366,   56,  205,  555,  205,
 1247,  873,  873,   56,  163,  176,  163,  176,   56, 1172,
 1187,  148,   56,  148,   56,  302,   56,  302,  309, 1233,
  309,   56, 1168,  262,   56,  570,   56, 1397, 1398,  576,
   56,  536,  536,   56,  643,  643,  630, 1172,   56,   56,
  638,   38,   56,  166,  681,   56,  637,  166, 1006, 1007,
 1255, 1256, 1257,  609,  610,  615,  616,  642, 1187,  649,
 1172,  358,  359,  360,  361,  362,  363,  364,  365,  646,
  651,  655,  657, 1278,  658, 1279,  667, 1286,  669,  682,
  166,  166,  691,  720,  166,  690,  692,  166,   55, 1172,
  262,  694,   57,  262,  695,  733,   57,  717,   57,  718,
  731,   57,  732,   57,  734,  736,   57,  166,   57,  427,
   57,  738,   57,  743,  428,   57,  429,  749,   57,   57,
  751,   56,  430,  431,  752,  762,   57,   57,   57,  763,
  767,   57,   57,   57,  768,   57,  774,  266,   57,  776,
   57,   57,   57,   57,  777,  783,  786,   57,   57,   57,
  498,  262,   57,   57,   57,   38,  788,  789,  794,  796,
  800,   57,   57,  804,   57,   57,  802,   57,   57,   57,
  815,  388,  822,   57,  832,  823,  824,  825,  828,  830,
  829,  837,  852,  243, 1340,   38,  853,  700,  861,  848,
  860, 1354,  389,  390,  391,  392,  393,  394,  395,  396,
  397,  398, 1366, 1368,  862,  871,  873,  882,  887, 1410,
 1410,  889,  893,  896, 1418, 1418, 1354, 1354,    4,  905,
  906,  913,  163,  919,  939,  940,  920,  942,  926,  941,
  582,  582,  948,  950,  952,  959,  518,  976,  966,  968,
  970,  975,  997, 1009,   57,   38,   38,  828,  999, 1010,
 1012, 1004,   38, 1013, 1014, 1015, 1021, 1022, 1030,  564,
 1354, 1023, 1027, 1028, 1040,  564,  857, 1045, 1046, 1048,
 1053, 1058, 1067, 1069,   38,   38,  262, 1059, 1074, 1080,
 1066,  464, 1086, 1082, 1085, 1087, 1095, 1088, 1100, 1104,
 1109, 1115, 1131, 1107,  464, 1112,   38, 1114,   38, 1118,
  589,  564, 1119, 1127, 1133, 1135, 1138, 1144, 1149, 1150,
 1148, 1151,  602,  603,  604, 1159, 1205,  589,  589,  589,
  589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
  589,  589,  589,  351, 1163, 1204, 1207, 1210, 1216,  351,
 1208, 1232,  564, 1235, 1251, 1253, 1270,  564, 1273,  564,
  564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
 1281, 1275, 1283, 1280, 1312,  163,  564, 1314,  564,  163,
  564, 1315,  564,  564,  564,  351,  564,  564, 1316, 1318,
  564,  564,  564,  564,  564,  564,  564,  564,  564, 1320,
  262, 1325,  564,  564,  564,  564,  564,  564,  564,  564,
 1329,  773,  163,  163, 1330, 1335,  163, 1345, 1358,  163,
 1361,  564, 1372, 1362, 1375, 1373, 1376, 1385, 1386, 1390,
  262, 1394, 1399, 1389, 1388, 1425,  564, 1404, 1405,  163,
 1424,  589, 1426,    7,   34,   32,   33,  547,  730,  826,
  351,   25,  351,  351,  507,  351,  351,  615,  329,  796,
  351,  351,  226,  102,  351,  351,  351,  351,  351,  351,
  351,  351,  351,  508,  351,  351,  351,  351,  351,  351,
  351,  351,  351,  351,  466,  800,  616,  506,   32,  532,
  262,  262,  748,  753,  351,  351,   33,  262,  144,  756,
  801,  834,  351,  151,  777,  351,  674,  145,  757,  748,
  351,  152,  663,  828,  828,  803,  778,  333,  805,  262,
  262,  828,  828,  828,  828,  828,  663,  828,  828,  684,
  828,  828,  828,  828,  828,  828,  828,  828,  358,  126,
  305,  262,  828,  262,  828,  828,  828,  828,  828,  828,
  127,  306,  828,  643,  643,  240,  828,  828,   91,  828,
  828,  828,  987,  277, 1211, 1387, 1252,  812,  813, 1363,
 1116,  828, 1068,  828,   30,  828,  828, 1351,  936,  828,
 1011,  828,  828,  828,  828,  828,  828,  828,  828,  828,
  828,  828,  828,  931,  828,  937,  938,  828,  828, 1277,
 1217,  828,  828, 1420, 1214, 1413, 1369, 1374, 1367, 1412,
 1268, 1145, 1060,  840,  728,  577, 1147,  875,  617,  828,
  828,  877,  807,  828,  761,  958,  618,  814,  828,  828,
  828,  828,  828, 1031,  836,  619,  828,  620,  828,  621,
 1236,  622, 1044, 1202,  828,  828,  872, 1134,  422, 1026,
  977, 1121, 1102, 1096, 1016, 1091,  723, 1098, 1274,  971,
  636, 1161,    0,    0,    0,    0,    0,  773,  773,  828,
  828,  828,  828,    0,  828,  773,  773,  773,  773,  773,
  828,  773,  773,    0,  773,  773,  773,  773,  773,  773,
  773,    0,    0,   30,    0,    0,  773,    0,  773,  773,
  773,  773,  773,  773,    0,    0,  773,    0,    0,    0,
  773,  773,    0,  773,  773,  773,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  773,    0,  773,    0,  773,
  773,    0,    0,  773,    0,  773,  773,  773,  773,  773,
  773,  773,  773,  773,  773,  773,  773,    0,  773,    0,
    0,  773,  773,    0,    0,  773,  773,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  589,
    0,    0,    0,  773,  773,    0,    0,  773,    0,    0,
    0,    0,  773,  773,  773,  773,  773,    0,    0,    0,
  773,    0,  773,  922,    0,    0,    0,    0,  773,  773,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  773,  773,  773,  773,    0,  773,    0,
   30,   30,    0,    0,  773,   30,    0,    0,    0,   30,
    0,   30,    0,    0,   30,    0,   30,   30,    0,   30,
    0,   30,    0,   30,    0,   30,   30,   30,   30,    0,
    0,   30,   30,    0,    0,    0,    0,   30,    0,   30,
   30,   30,    0,    0,   30,   30,   30,  919,   30,    0,
    0,   30,    0,   30,   30,   30,   30,    0,    0,    0,
   30,   30,   30,    0,    0,   30,   30,   30,    0,    0,
    0,    0,    0,    0,   30,   30,    0,   30,   30,   30,
   30,   30,   30,    0,    0,    0,   30,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   30,    0,    0,    0,    0,   30,   30,    0,
    0,    0,    0,    0,    0,    0,   30,    0,    0,   30,
   30,    7,    0,    0,   30,    0,    0,    0,   30,    0,
   30,    0,    0,   30,    0,   30,    0,    0,   30,    0,
   30,    0,   30,    0,   30,    0,    0,   30,    0,    0,
   30,   30,    0,    0,    0,    0,    0,   30,   30,   30,
   30,    0,    0,   30,   30,   30,    0,   30,    0,    0,
   30,    0,   30,   30,   30,   30,    0,    0,    0,   30,
   30,   30,    0,    0,   30,   30,   30,    0,    0,    0,
    0,    0,    0,   30,   30,    0,   30,   30,   30,   30,
   30,   30,    0,    0,    0,   30,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  922,   30,    0,    0,   56,    0,   30,   30,   56,    0,
   56,    0,    0,   56,    0,   56,    0,    0,   56,    0,
   56,    0,   56,    0,   56,    0,    0,   56,    0,    0,
   56,   56,    0,    0,    0,    0,    0,    0,   56,   56,
   56,    0,    0,   56,   56,   56,    0,   56,    0,    0,
   56,    0,   56,   56,   56,   56,   30,    0,    0,   56,
   56,   56,    0,    0,   56,   56,   56,    0,    0,    0,
    0,    0,    0,   56,   56,    0,   56,   56,    0,   56,
   56,   56,    0,    0,  919,   56,    0,    0,   56,    0,
    0,    0,   56,    0,   56,    0,    0,   56,    0,   56,
    0,    0,   56,    0,   56,    0,   56,    0,   56,    0,
    0,   56,    0,    0,   56,   56,    0,    0,    0,    0,
    0,    0,   56,   56,   56,    0,    0,   56,   56,   56,
    0,   56,    0,    0,   56,    0,   56,   56,   56,   56,
    0,    0,    0,   56,   56,   56,    0,    0,   56,   56,
   56,    0,    0,    0,    0,    0,   56,   56,   56,    0,
   56,   56,   56,   56,   56,   56,   56,    0,   56,   56,
    0,   56,    0,   56,    0,    0,   56,    0,   56,    0,
   56,    0,   56,    0,    0,   56,    0,    0,   56,   56,
    0,    0,    0,    0,    0,    0,   56,   56,   56,    0,
    0,   56,   56,   56,    0,   56,    0,    0,   56,    0,
   56,   56,   56,   56,    0,    0,    0,   56,   56,   56,
    0,    0,   56,   56,   56,    0,    0,    0,    0,    0,
    0,   56,   56,    0,   56,   56,  517,   56,   56,   56,
   56,  517,  517,   56,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  517,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  517,    0,    0,  517,  517,    0,
    0,    0,  517,    0,    0,  517,    0,  517,    0,  517,
  517,  517,  517,    0,    0,    0,    0,  517,    0,    0,
    0,  517,    0,    0,    0,  517,    0,    0,    0,    0,
    0,    0,    0,  517,   56,    0,  517,    0,  517,  517,
    0,    0,    0,    0,  517,    0,  517,  517,  517,  517,
  517,  517,  517,  517,  517,  517,  517,    0,    0,    0,
    0,    0,  517,  517,    0,  517,  517,  517,  517,  517,
  517,  517,    0,  517,  517,    0,  517,  517,  517,  517,
  517,  517,  517,  517,  517,  517,    0,  517,  517,  517,
  517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
  517,  517,  517,  517,  517,  517,  517,  517,  517,    0,
    0,  517,    0,  517,  351,  517,    0,    0,  517,  351,
  351,    0,    0,  517,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  351,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  351,    0,    0,  351,  351,    0,    0,    0,
  351,    0,    0,  351,    0,  351,    0,  351,  351,  351,
  351,    0,    0,    0,    0,  351,    0,    0,    0,  351,
    0,    0,    0,  351,    0,    0,    0,    0,    0,    0,
    0,  351,    0,    0,  351,    0,  351,  351,    0,    0,
    0,    0,  351,    0,  351,  351,  351,  351,  351,  351,
  351,  351,  351,  351,  351,  351,    0,    0,    0,    0,
  351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
    0,  351,  351,    0,    0,  351,  351,  351,  351,  351,
    0,    0,  351,  351,    0,    0,    0,  351,  351,  351,
  351,  351,  351,  351,  351,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  351,    0,    0,  351,
    0,  351,    0,  351,   96,    0,  351,    0,    0,    0,
    0,  351,   97,   98,   99,  100,    0,    0,  101,  102,
    0,  103,  104,  105,  106,  107,  108,  109,    0,    0,
    0,    0,    0,  110,    0,  111,  112,  113,  114,  115,
  116,    0,    0,  117,    0,    0,    0,  118,  119,    0,
  120,  121,  122,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  123,    0,  124,    0,  125,  126,    0,    0,
  127,    0,  128,  129,  130,  131,  132,  133,  134,  135,
  136,  137,  138,  139,    0,  140,    0,    0,  141,  142,
    0,    0,  143,  144,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  351,    0,    0,    0,    0,  351,  351,
  145,    0,    0,    0,  146,    0,    0,    0,    0,  147,
  148,  149,  150,  151,    0,    0,    0,  152,    0,  153,
    0,  351,    0,    0,    0,  154,  155,    0,    0,    0,
    0,  351,    0,    0,  351,  351,    0,    0,    0,  351,
    0,    0,    0,    0,  351,    0,  351,  351,  351,  351,
  156,  157,  158,  159,  351,    0,    0,    0,  351,    0,
    0,  243,    0,    0,    0,    0,    0,    0,    0,    0,
  351,    0,    0,  351,    0,  351,  351,    0,    0,    0,
    0,  351,    0,  351,  351,  351,  351,  351,  351,  351,
  351,  351,  351,  351,  351,    0,    0,    0,    0,  351,
  351,  351,  351,  351,  351,  351,  351,  351,  351,    0,
  351,  351,    0,    0,  351,  351,  351,  351,  351,    0,
    0,  351,  351,    0,    0,    0,  351,  351,  351,  351,
  351,  351,  351,  351,  344,    0,    0,    0,    0,  344,
  344,    0,    0,    0,    0,  351,    0,    0,  351,    0,
  351,    0,  351,    0,    0,  351,    0,    0,    0,    0,
  351,    0,  344,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  344,    0,    0,  344,  344,    0,    0,    0,
  344,    0,    0,  344,    0,  344,    0,  344,  344,  344,
  344,    0,    0,    0,    0,  344,    0,    0,    0,  344,
    0,    0,    0,  344,    0,    0,    0,    0,    0,    0,
    0,  344,  351,    0,  344,    0,  344,  344,  351,    0,
    0,    0,  344,    0,  344,  344,  344,  344,  344,  344,
  344,  344,  344,  344,  344,    0,    0,    0,    0,    0,
  344,  344,  344,  344,  344,  344,    0,  344,  344,  344,
    0,  344,  344,    0,  351,  344,  344,  344,  344,    0,
    0,    0,  344,  344,    0,    0,    0,  344,  344,  344,
  344,  344,  344,  344,  344,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  344,    0,    0,  344,
    0,  344,    0,  344,    0,  351,  344,    0,    0,    0,
  351,  344,  351,  351,  351,  351,  351,  351,  351,  351,
  351,  351,  351,  351,    0,    0,    0,    0,    0,  351,
  351,  351,  351,  351,  351,  351,  351,  351,    0,  351,
  351,    0,  351,  351,  351,  351,  351,  351,  351,  351,
  351,  351,  372,  351,  351,  351,  351,  351,  351,  351,
  351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
  351,  351,  351,  351,  351,  372,    0,  738,    0,  351,
    0,  351,  738,  738,  351,    0,    0,    0,  372,  351,
    0,    0,    0,  372,    0,    0,  249,    0,  372,    0,
  372,  372,  372,  372,    0,  738,    0,    0,  372,    0,
    0,    0,  372,    0,    0,  738,  372,    0,  738,  738,
    0,    0,    0,  738,  372,    0,  738,  372,  738,  372,
  738,  738,  738,  738,    0,    0,    0,    0,  738,    0,
    0,    0,  738,    0,    0,    0,  738,    0,    0,    0,
    0,    0,    0,    0,  738,  519,    0,  738,    0,  738,
  738,  519,    0,    0,    0,  738,    0,  738,  738,  738,
  738,  738,  738,  738,  738,  738,  738,  738,    0,    0,
    0,    0,    0,  738,  738,  738,  738,  738,  738,    0,
  738,  738,  738,    0,  738,  738,    0,  519,  738,  738,
  738,  738,    0,    0,  372,  738,  738,    0,    0,    0,
  738,  738,  738,  738,  738,  738,  738,  738,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  738,
    0,    0,  738,    0,  738,    0,  738,    0,  519,  738,
    0,    0,    0,  519,  738,  519,  519,  519,  519,  519,
  519,  519,  519,  519,  519,  519,    0,    0,    0,    0,
    0,  519,  519,  519,  519,  519,  519,  519,  519,  519,
  519,    0,  519,  519,    0,  519,  519,  519,  519,  519,
  519,  519,  519,  519,  519,    0,  519,  519,  519,  519,
  519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
  519,  519,  519,  519,  519,  519,  519,  519,    0,  515,
  268,    0,    0,    0,  519,  515,    0,    0,    0,   98,
    0,  100,  519,    0,  101,    0,    0,    0,    0,  105,
    0,    0,    0,  109,    0,    0,    0,    0,    0,    0,
    0,    0,  112,    0,    0,    0,    0,    0,    0,  117,
    0,  515,    0,    0,  119,    0,    0,    0,  122,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  124,    0,  125,    0,    0,    0,  127,    0,    0,    0,
    0,    0,    0,    0,  134,  135,    0,    0,  138,    0,
    0,  269,  515,    0,    0,    0,    0,  515,    0,  515,
  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
    0,    0,    0,    0,    0,  515,  515,    0,  515,  515,
  515,  515,  515,  515,  515,    0,  515,  515,    0,  515,
  515,  515,  515,  515,  515,  515,  515,  515,  515,   62,
  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
  515,  515,   63,    0,  381,    0,    0,   90,  515,  381,
  381,  515,    0,    0,    0,   64,  515,    0,    0,    0,
   66,    0,    0,    0,    0,   67,    0,   68,   69,   70,
   71,    0,  381,    0,    0,   72,    0,    0,    0,   73,
    0,    0,  381, 1264,    0,  381,  381,    0,    0,    0,
  381,   74,    0,  381,   75,  381,   76,  381,  381,  381,
  381,    0,    0,    0,    0,  381,    0,    0,    0,  381,
    0,    0,    0,  381,    0,    0,    0,    0,    0,    0,
    0,  381,  523,    0,  381,    0,  381,  381,  523,    0,
    0,    0,  381,    0,  381,  381,  381,  381,  381,  381,
  381,  381,  381,  381,  381,    0,    0,    0,    0,    0,
  381,  381,    0,  381,  381,  381,    0,  381,  381,  381,
    0,  381,  381,    0,  523,  381,  381,  381,  381,    0,
    0,  460,  381,  381,    0,    0,    0,  381,  381,  381,
  381,  381,  381,  381,  381,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  408,    0,  381,    0,    0,  381,
    0,  381,    0,    0,    0,  523,    0,    0,    0,    0,
  523,  381,  523,  523,  523,  523,  523,  523,  523,  523,
  523,  523,  523,    0,    0,    0,    0,    0,    0,  523,
  408,  523,  523,  523,  523,  523,  523,  523,    0,  523,
  523,    0,  523,  523,  523,  523,  523,  523,  523,  523,
  523,  523,    0,  523,  523,  523,  523,  523,  523,  523,
  523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
  523,  523,  523,  523,  523,    0,  450,    0,    0,    0,
    0,  523,  450,    0,  523,    0,    0,    0,    0,  523,
    0,    0,    0,    0,    0,    0,  344,    0,  408,  408,
  408,  408,    0,  408,    0,  408,  408,    0,  408,  408,
  408,  408,  408,    0,  408,  408,  408,  408,  450,  408,
  408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
  408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
  408,    0,    0,    0,    0,  344,    0,  408,  351,    0,
  408,    0,    0,    0,    0,  408,    0,    0,    0,  450,
    0,    0,    0,    0,  450,    0,  450,  450,  450,  450,
  450,  450,  450,  450,  450,  450,  450,    0,    0,    0,
    0,    0,    0,  450,  351,  450,  450,  450,  450,  450,
  450,  450,    0,  450,  450,    0,  450,  450,  450,  450,
  450,  450,  450,  450,  450,  450,    0,  450,  450,  450,
  450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
  450,  450,  450,  450,  450,  450,  450,  450,  450,    0,
  411,    0,    0,    0,    0,  450,  411,    0,  450,    0,
    0,    0,    0,  450,    0,    0,    0,    0,    0,    0,
    0,  351,  351,  351,  351,  351,    0,    0,    0,  351,
  351,    0,  351,  351,  351,  351,  351,  351,  351,  351,
  351,  351,  411,  351,  351,  351,  351,  351,  351,  351,
  351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
  351,  351,  351,  351,  351,    0,    0,    0,    0,    0,
    0,  351,    0,    0,  351,    0,    0,    0,    0,  351,
    0,    0,    0,  411,    0,    0,    0,    0,  411,    0,
  411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
  411,    0,    0,    0,    0,    0,    0,  411,    0,  411,
  411,  411,  411,  411,  411,  411,    0,  411,  910,    0,
  411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
   62,  411,  411,  411,  411,  411,  411,  411,  411,  411,
  411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
  411,  411,  411,   63,  552,    0,    0,    0,    0,  411,
  552,    0,  411,    0,    0,    0,   64,  411,    0,    0,
   65,   66,    0,    0,    0,    0,   67,    0,   68,   69,
   70,   71,    0,    0,    0,    0,   72,    0,    0,    0,
   73,    0,    0,    0,    0,    0,  552,    0,    0,    0,
    0,  910,   74,    0,    0,   75,  910,   76,  910,  910,
  910,  910,  910,  910,  910,  910,  910,  910,    0,    0,
    0,    0,    0,    0,    0,  910,    0,  910,    0,  910,
    0,  910,  910,  910,    0,    0,    0,  552,    0,  574,
    0,    0,  552,    0,  552,  552,  552,  552,  552,  552,
  552,  552,  552,  552,  552,    0,    0,    0,    0,    0,
    0,  552,    0,  552,    0,  552,    0,  552,  552,  552,
    0,  552,  552,    0,  552,  552,  552,  552,  552,  552,
  552,  552,  552,  552,    0,  910,    0,  552,  552,  552,
  552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
  552,  552,  552,  552,  552,  376,  552,    0,    0,    0,
    0,  376,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  552,  574,    0,    0,    0,    0,  574,    0,  574,
  574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
    0,    0,    0,  376,    0,    0,  574,  376,  574,    0,
  574,    0,  574,  574,  574,    0,    0,    0,    0,    0,
  574,  574,  574,  574,    0,    0,    0,  574,  574,    0,
    0,    0,  574,  574,  574,  574,  574,  574,  574,  574,
    0,    0,    0,  568,    0,    0,    0,    0,  376,  568,
    0,  574,    0,  376,    0,  376,  376,  376,  376,  376,
  376,  376,  376,  376,  376,  376,  574,    0,    0,    0,
    0,  376,  376,    0,  376,  376,  376,    0,  376,  376,
  376,    0,  376,  376,    0,  568,  376,  376,  376,  376,
    0,    0,    0,  376,  376,    0,    0,    0,  376,  376,
  376,  376,  376,  376,  376,  376,  571,    0,    0,    0,
    0,    0,  571,    0,    0,    0,    0,  376,    0,    0,
  376,    0,  376,    0,    0,    0,  568,    0,    0,    0,
    0,  568,  376,  568,  568,  568,  568,  568,  568,  568,
  568,  568,  568,  568,    0,    0,    0,    0,  571,    0,
  568,    0,  568,    0,  568,    0,  568,  568,  568,    0,
  568,  568,    0,    0,  568,  568,  568,  568,    0,  569,
    0,  568,  568,    0,    0,  569,  568,  568,  568,  568,
  568,  568,  568,  568,    0,    0,    0,    0,    0,  571,
    0,    0,    0,    0,  571,  568,  571,  571,  571,  571,
  571,  571,  571,  571,  571,  571,  571,    0,    0,    0,
  568,  569,    0,  571,    0,  571,    0,  571,    0,  571,
  571,  571,    0,  571,  571,    0,    0,  571,  571,  571,
  571,    0,  570,    0,  571,  571,    0,    0,  570,  571,
  571,  571,  571,  571,  571,  571,  571,    0,    0,    0,
    0,    0,  569,    0,    0,    0,    0,  569,  571,  569,
  569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
    0,    0,    0,  571,  570,    0,  569,    0,  569,    0,
  569,    0,  569,  569,  569,    0,  569,  569,    0,    0,
  569,  569,  569,  569,    0,  575,    0,  569,  569,    0,
    0,    0,  569,  569,  569,  569,  569,  569,  569,  569,
    0,    0,    0,    0,    0,  570,    0,    0,    0,    0,
  570,  569,  570,  570,  570,  570,  570,  570,  570,  570,
  570,  570,  570,    0,    0,    0,  569,    0,    0,  570,
    0,  570,    0,  570,    0,  570,  570,  570,    0,  570,
  570,    0,    0,  570,  570,  570,  570,    0,  576,    0,
  570,  570,    0,    0,    0,  570,  570,  570,  570,  570,
  570,  570,  570,    0,    0,    0,    0,    0,  575,    0,
    0,    0,    0,  575,  570,  575,  575,  575,  575,  575,
  575,  575,  575,  575,  575,  575,    0,    0,    0,  570,
    0,    0,  575,    0,  575,    0,  575,    0,  575,  575,
  575,    0,    0,    0,    0,    0,  575,  575,  575,  575,
    0,  577,    0,  575,  575,    0,    0,    0,  575,  575,
  575,  575,  575,  575,  575,  575,    0,    0,    0,    0,
    0,  576,    0,    0,    0,    0,  576,  575,  576,  576,
  576,  576,  576,  576,  576,  576,  576,  576,  576,    0,
    0,    0,  575,    0,    0,  576,    0,  576,    0,  576,
    0,  576,  576,  576,    0,    0,    0,    0,    0,  576,
  576,  576,  576,    0,  578,    0,  576,  576,    0,    0,
    0,  576,  576,  576,  576,  576,  576,  576,  576,    0,
    0,    0,    0,    0,  577,    0,    0,    0,    0,  577,
  576,  577,  577,  577,  577,  577,  577,  577,  577,  577,
  577,  577,    0,    0,    0,  576,    0,    0,  577,    0,
  577,    0,  577,    0,  577,  577,  577,    0,    0,    0,
    0,    0,  577,  577,  577,  577,    0,  579,    0,  577,
  577,    0,    0,    0,    0,    0,  577,  577,  577,  577,
  577,  577,    0,    0,    0,    0,    0,  578,    0,    0,
    0,    0,  578,  577,  578,  578,  578,  578,  578,  578,
  578,  578,  578,  578,  578,    0,    0,    0,  577,    0,
    0,  578,    0,  578,    0,  578,    0,  578,  578,  578,
    0,    0,    0,    0,    0,  578,  578,  578,  578,    0,
  580,    0,  578,  578,    0,    0,    0,    0,    0,  578,
  578,  578,  578,  578,  578,    0,    0,    0,    0,    0,
  579,    0,    0,    0,    0,  579,  578,  579,  579,  579,
  579,  579,  579,  579,  579,  579,  579,  579,    0,    0,
    0,  578,    0,    0,  579,    0,  579,    0,  579,    0,
  579,  579,  579,    0,    0,    0,    0,    0,  579,  579,
  579,  579,    0,  581,    0,  579,  579,    0,    0,    0,
    0,    0,  579,  579,  579,  579,  579,  579,    0,    0,
    0,    0,    0,  580,    0,    0,    0,    0,  580,  579,
  580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
  580,    0,    0,    0,  579,    0,    0,  580,    0,  580,
    0,  580,    0,  580,  580,  580,    0,    0,    0,    0,
    0,  580,  580,  580,  580,    0,  582,    0,  580,  580,
    0,    0,    0,    0,    0,  580,  580,  580,  580,  580,
  580,    0,    0,    0,    0,    0,  581,    0,    0,    0,
    0,  581,  580,  581,  581,  581,  581,  581,  581,  581,
  581,  581,  581,  581,    0,    0,    0,  580,    0,    0,
  581,    0,  581,    0,  581,    0,  581,  581,  581,    0,
    0,    0,    0,    0,  581,  581,  581,  581,    0,  583,
    0,  581,  581,    0,    0,    0,    0,    0,  581,  581,
  581,  581,  581,  581,    0,    0,    0,    0,    0,  582,
    0,    0,    0,    0,  582,  581,  582,  582,  582,  582,
  582,  582,  582,  582,  582,  582,  582,    0,    0,    0,
  581,    0,    0,  582,    0,  582,    0,  582,    0,  582,
  582,  582,    0,    0,    0,    0,    0,    0,    0,  582,
  582,    0,  584,    0,  582,  582,    0,    0,    0,    0,
    0,    0,    0,  582,  582,  582,  582,    0,    0,    0,
    0,    0,  583,    0,    0,    0,    0,  583,  582,  583,
  583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
    0,    0,    0,  582,    0,    0,  583,    0,  583,    0,
  583,    0,  583,  583,  583,    0,    0,    0,    0,    0,
    0,    0,  583,  583,    0,  585,    0,  583,  583,    0,
    0,    0,    0,    0,    0,    0,  583,  583,  583,  583,
    0,    0,    0,    0,    0,  584,    0,    0,    0,    0,
  584,  583,  584,  584,  584,  584,  584,  584,  584,  584,
  584,  584,  584,    0,    0,    0,  583,    0,    0,  584,
    0,  584,    0,  584,    0,  584,  584,  584,    0,    0,
    0,    0,    0,    0,    0,  584,  584,    0,  586,    0,
  584,  584,    0,    0,    0,    0,    0,    0,    0,  584,
  584,  584,  584,    0,    0,    0,    0,    0,  585,    0,
    0,    0,    0,  585,  584,  585,  585,  585,  585,  585,
  585,  585,  585,  585,  585,  585,    0,    0,    0,  584,
    0,    0,  585,    0,  585,    0,  585,    0,  585,  585,
  585,    0,    0,    0,    0,    0,    0,    0,  585,  585,
    0,  587,    0,  585,  585,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  585,  585,    0,    0,    0,    0,
    0,  586,    0,    0,    0,    0,  586,  585,  586,  586,
  586,  586,  586,  586,  586,  586,  586,  586,  586,    0,
    0,    0,  585,    0,    0,  586,    0,  586,    0,  586,
    0,  586,  586,  586,    0,    0,    0,    0,    0,    0,
    0,  586,  586,    0,  588,    0,  586,  586,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  586,  586,    0,
    0,    0,    0,    0,  587,    0,    0,    0,    0,  587,
  586,  587,  587,  587,  587,  587,  587,  587,  587,  587,
  587,  587,    0,    0,    0,  586,    0,    0,  587,    0,
  587,    0,  587,    0,  587,  587,  587,    0,    0,    0,
    0,    0,    0,    0,    0,  587,    0,  589,    0,  587,
  587,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  587,  587,    0,    0,    0,    0,    0,  588,    0,    0,
    0,    0,  588,  587,  588,  588,  588,  588,  588,  588,
  588,  588,  588,  588,  588,    0,    0,    0,  587,    0,
    0,  588,    0,  588,    0,  588,    0,  588,  588,  588,
    0,    0,    0,    0,    0,    0,    0,    0,  588,    0,
  590,    0,  588,  588,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  588,  588,    0,    0,    0,    0,    0,
  589,    0,    0,    0,    0,  589,  588,  589,  589,  589,
  589,  589,  589,  589,  589,  589,  589,  589,    0,    0,
    0,  588,    0,    0,  589,    0,  589,    0,  589,    0,
  589,  589,  589,    0,    0,    0,    0,    0,    0,    0,
    0,  589,    0,  591,    0,    0,  589,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  589,  589,    0,    0,
    0,    0,    0,  590,    0,    0,    0,    0,  590,  589,
  590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
  590,    0,    0,    0,  589,    0,    0,  590,    0,  590,
    0,  590,    0,  590,  590,  590,    0,    0,    0,    0,
    0,    0,    0,    0,  590,    0,  592,    0,    0,  590,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  590,
  590,    0,    0,    0,    0,    0,  591,    0,    0,    0,
    0,  591,  590,  591,  591,  591,  591,  591,  591,  591,
  591,  591,  591,  591,    0,    0,    0,  590,    0,    0,
  591,    0,  591,    0,  591,    0,  591,  591,  591,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  593,
    0,    0,  591,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  591,  591,    0,    0,    0,    0,    0,  592,
    0,    0,    0,    0,  592,  591,  592,  592,  592,  592,
  592,  592,  592,  592,  592,  592,  592,    0,    0,    0,
  591,    0,    0,  592,    0,  592,    0,  592,    0,  592,
  592,  592,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  594,    0,    0,  592,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  592,  592,    0,    0,    0,
    0,    0,  593,    0,    0,    0,    0,  593,  592,  593,
  593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
    0,    0,    0,  592,    0,    0,  593,    0,  593,    0,
  593,    0,  593,  593,  593,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  595,    0,    0,  593,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  593,
    0,    0,    0,    0,    0,  594,    0,    0,    0,    0,
  594,  593,  594,  594,  594,  594,  594,  594,  594,  594,
  594,  594,  594,    0,    0,    0,  593,    0,  351,  594,
    0,  594,    0,  594,    0,  594,  594,  594,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  594,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  594,    0,  351,    0,    0,    0,  595,    0,
    0,    0,    0,  595,  594,  595,  595,  595,  595,  595,
  595,  595,  595,  595,  595,  595,    0,    0,    0,  594,
    0,    0,  595,    0,  595,    0,  595,    0,  595,  595,
  595,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  595,    0,    0,    0,    0,    0,
    0,    0,    0,  351,    0,    0,    0,    0,    0,    0,
  351,    0,  351,    0,  351,    0,    0,  351,    0,  351,
  351,    0,  351,  351,  351,  351,  351,  351,  351,  351,
  351,  351,  595,  351,  351,  351,  351,  351,  351,  351,
  351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
  351,  351,  351,  351,  351,    0,    0,   96,    0,  351,
    0,  351,    0,    0,  351,   97,   98,   99,  100,  351,
    0,  101,  102,    0,  103,  104,  105,  106,  107,  108,
  109,    0,    0,    0,    0,    0,  110,    0,  111,  112,
  113,  114,  115,  116,    0,    0,  117,    0,    0,    0,
  118,  119,    0,  120,  121,  122,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  123,    0,  124,    0,  125,
  126,    0,    0,  127,    0,  128,  129,  130,  131,  132,
  133,  134,  135,  136,  137,  138,  139,    0,  140,    0,
    0,  141,  142,    0,    0,  143,  144,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  145,    0,    0,    0,  146,    0,    0,
    0,    0,  147,  148,  149,  150,  151,    0,    0,    0,
  152,    0,  153,    0,    0,    0,    0,    0,  154,  155,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  300,
    0,    0,    0,  156,  157,  158,  159,   97,   98,   99,
  100,    0,    0,  101,  102,    0,  103,  104,  105,  106,
  107,  108,  109,    0,    0,    0,    0,    0,  110,    0,
  111,  112,  113,  114,  115,  116,    0,    0,  117,    0,
    0,    0,  118,  119,    0,  120,  121,  122,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  123,    0,  124,
    0,  125,  126,    0,    0,  127,    0,  128,  129,  130,
  131,  132,  133,  134,  135,  136,  137,  138,  139,    0,
  140,    0,    0,  141,  142,    0,    0,  143,  144,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  145,    0,    0,    0,  146,
    0,    0,    0,    0,  147,  148,  149,  150,  151,    0,
    0,    0,  152,    0,  153,    0,    0,    0,    0,    0,
  154,  155,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  546,    0,    0,    0,  156,  157,  158,  159,   97,
   98,   99,  100,    0,    0,  101,  102,    0,  103,  104,
  105,  106,  107,  108,  109,    0,    0,    0,    0,    0,
  110,    0,  111,  112,  113,  114,  115,  116,    0,    0,
  117,    0,    0,    0,  118,  119,    0,  120,  121,  122,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  123,
    0,  124,    0,  125,  126,    0,    0,  127,    0,  128,
  129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
  139,    0,  140,    0,    0,  141,  142,    0,    0,  143,
  144,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  145,    0,    0,
    0,  146,    0,    0,    0,    0,  147,  148,  149,  150,
  151,    0,    0,    0,  152,    0,  153,    0,    0,    0,
    0,    0,  154,  155,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  915,    0,    0,    0,  156,  157,  158,
  159,  915,  915,  915,  915,    0,    0,  915,  915,    0,
  915,  915,  915,  915,  915,  915,  915,    0,    0,    0,
    0,    0,  915,    0,  915,  915,  915,  915,  915,  915,
    0,    0,  915,    0,    0,    0,  915,  915,    0,  915,
  915,  915,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  915,    0,  915,    0,  915,  915,    0,    0,  915,
    0,  915,  915,  915,  915,  915,  915,  915,  915,  915,
  915,  915,  915,    0,  915,    0,    0,  915,  915,    0,
    0,  915,  915,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  915,
    0,    0,    0,  915,    0,    0,    0,    0,  915,  915,
  915,  915,  915,    0,    0,    0,  915,    0,  915,    0,
    0,    0,    0,    0,  915,  915,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  782,    0,    0,    0,  915,
  915,  915,  915,  782,  782,  782,  782,    0,    0,  782,
  782,    0,  782,  782,  782,  782,  782,  782,  782,    0,
    0,    0,    0,    0,  782,    0,  782,  782,  782,  782,
  782,  782,    0,    0,  782,    0,    0,    0,  782,  782,
    0,  782,  782,  782,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  782,    0,  782,    0,  782,  782,    0,
    0,  782,    0,  782,  782,  782,  782,  782,  782,  782,
  782,  782,  782,  782,  782,    0,  782,    0,    0,  782,
  782,    0,    0,  782,  782,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  782,    0,    0,    0,  782,    0,    0,    0,    0,
  782,  782,  782,  782,  782,    0,    0,    0,  782,    0,
  782,    0,    0,    0,    0,    0,  782,  782,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  698,    0,    0,
    0,  782,  782,  782,  782,   97,   98,    0,  100,    0,
    0,  101,  289,    0,  724,    0,  105,  106,  107,    0,
  109,    0,    0,   98,    0,  100,  110,    0,  101,  112,
    0,    0,    0,  105,    0,    0,  117,  109,    0,    0,
    0,  119,    0,  120,  121,  122,  112,    0,    0,    0,
    0,    0,    0,  117,    0,    0,    0,  124,  119,  125,
  126,    0,  122,  127,    0,    0,  129,    0,  131,    0,
  133,  134,  135,  290,  124,  138,  125,    0,    0,    0,
  127,    0,  142,    0,    0,  143,  144,    0,  134,  135,
    0,    0,  138,    0,    0,  254,    0,    0,    0,    0,
    0,    0,    0,  515,  699,    0,    0,  146,    0,    0,
    0,    0,    0,  148,  149,  150,  151,    0,    0,    0,
  152,    0,  153,    0,    0,    0,    0,    0,  154,  155,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  698,
    0,    0,    0,  156,  334,  158,  159,   97,   98,    0,
  100,    0,    0,  101,  289,    0,  791,    0,  105,  106,
  107,  725,  109,    0,    0,   98,    0,  100,  110,    0,
  101,  112,    0,    0,    0,  105,    0,    0,  117,  109,
    0,    0,    0,  119,    0,  120,  121,  122,  112,    0,
    0,    0,    0,    0,    0,  117,    0,    0,    0,  124,
  119,  125,  126,  879,  122,  127,    0,    0,  129,    0,
  131,    0,  133,  134,  135,  290,  124,  138,  125,    0,
    0,    0,  127,    0,  142,    0,    0,  143,  144,    0,
  134,  135,    0,    0,  138,    0,    0,  269,    0,    0,
    0,    0,    0,    0,    0,  515,    0,    0,    0,  146,
    0,    0,    0,    0,    0,  148,  149,  150,  151,    0,
    0,    0,  152,    0,  153,    0,    0,    0,    0,    0,
  154,  155,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  698,    0,    0,    0,  156,  334,  158,  159,   97,
   98,    0,  100,    0,    0,  101,  289,    0,  854,    0,
  105,  106,  107,   90,  109,    0,    0,   98,    0,  100,
  110,    0,  101,  112,    0,    0,    0,  105,    0,    0,
  117,  109,    0,    0,    0,  119,    0,  120,  121,  122,
  112,    0,    0,    0,    0,    0,    0,  117,    0,    0,
    0,  124,  119,  125,  126,    0,  122,  127,    0,    0,
  129,    0,  131,    0,  133,  134,  135,  290,  124,  138,
  125,    0,    0,    0,  127,    0,  142,    0,    0,  143,
  144,    0,  134,  135,    0,    0,  138,    0,    0,  269,
    0,    0,    0,    0,    0,    0,    0,  515,    0,    0,
    0,  146,    0,    0,    0,    0,    0,  148,  149,  150,
  151,    0,    0,    0,  152,    0,  153,    0,    0,    0,
    0,    0,  154,  155,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  868,    0,    0,    0,  156,  334,  158,
  159,   97,   98,    0,  100,    0,    0,  101,  289,    0,
 1070,    0,  105,  106,  107,   90,  109,    0,    0,   98,
    0,  100,  110,    0,  101,  112,    0,    0,    0,  105,
    0,    0,  117,  109,    0,    0,    0,  119,    0,  120,
  121,  122,  112,    0,    0,    0,    0,    0,    0,  117,
    0,    0,    0,  124,  119,  125,  126,    0,  122,  127,
    0,    0,  129,    0,  131,    0,  133,  134,  135,  290,
  124,  138,  125,    0,    0,    0,  127,    0,  142,    0,
    0,  143,  144,    0,  134,  135,    0,    0,  138,    0,
    0,  269,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  146,    0,    0,    0,    0,    0,  148,
  149,  150,  151,    0,    0,    0,  152,    0,  153,    0,
    0,    0,    0,    0,  154,  155,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  619,    0,    0,    0,  156,
  334,  158,  159,  619,  619,    0,  619,    0,    0,  619,
  619,    0,    0,    0,  619,  619,  619,   90,  619,    0,
    0,    0,    0,    0,  619,    0,  373,  619,    0,    0,
    0,    0,    0,    0,  619,    0,    0,    0,    0,  619,
    0,  619,  619,  619,    0,    0,    0,    0,    0,  373,
    0,    0,    0,    0,    0,  619,    0,  619,  619,    0,
    0,  619,  373,    0,  619,    0,  619,  373,  619,  619,
  619,  619,  373,  619,  373,  373,  373,  373,    0,    0,
  619,    0,  373,  619,  619,    0,  373,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  373,    0,
    0,  373,    0,  373,    0,  619,    0,    0,    0,    0,
    0,  619,  619,  619,  619,    0,    0,    0,  619,    0,
  619,    0,    0,    0,    0,    0,  619,  619,    0,    0,
    0,    0,  373,    0,   97,   98,    0,  100,    0,    0,
  101,  289,    0,    0,    0,  105,  106,  107,    0,  109,
    0,  619,  619,  619,  619,  110,    0,    0,  112,    0,
    0,    0,    0,    0,    0,  117,    0,    0,    0,    0,
  119,    0,  120,  121,  122,    0,    0,    0,  373,    0,
    0,    0,    0,    0,    0,    0,  124,    0,  125,  126,
    0,    0,  127,    0,    0,  129,    0,  131,    0,  133,
  134,  135,  290,    0,  138,    0,    0,    0,    0,    0,
    0,  142,    0,    0,  143,  144,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  704,  957,    0,    0,  146,    0,    0,    0,
    0,    0,  148,  149,  150,  151,    0,    0,    0,  152,
    0,  153,    0,    0,    0,    0,    0,  154,  155,    0,
    0,    0,    0,    0,    0,   97,   98,    0,  100,    0,
    0,  101,  289,    0,    0,    0,  105,  106,  107,    0,
  109,    0,  156,  705,  158,  159,  110,    0,    0,  112,
    0,    0,  706,    0,    0,    0,  117,    0,    0,    0,
    0,  119,    0,  120,  121,  122,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  124,    0,  125,
  126,    0,    0,  127,    0,    0,  129,    0,  131,    0,
  133,  134,  135,  290,    0,  138,    0,    0,    0,    0,
    0,    0,  142,    0,    0,  143,  144,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  704,    0,    0,    0,  146,    0,    0,
    0,    0,    0,  148,  149,  150,  151,    0,    0,    0,
  152,    0,  153,    0,    0,    0,    0,    0,  154,  155,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  156,  705,  158,  159,   39,    0,    0,
    0,    0,   39,  706,    0,    0,   39,    0,   39,    0,
    0,   39,    0,   39,    0,    0,   39,    0,   39,    0,
   39,    0,   39,    0,    0,   39,    0,    0,   39,   39,
    0,    0,    0,    0,    0,    0,   39,   39,   39,    0,
    0,   39,   39,   39,    0,   39,    0,    0,   39,    0,
   39,   39,   39,   39,    0,    0,    0,   39,   39,   39,
    0,    0,   39,   39,   39,    0,    0,    0,    0,    0,
    0,   39,   39,    0,   39,   39,   39,   39,   39,   39,
    0,    0,    0,   39,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   40,    0,    0,
    0,    0,   40,    0,   39,   39,   40,    0,   40,    0,
    0,   40,    0,   40,    0,    0,   40,    0,   40,    0,
   40,    0,   40,    0,    0,   40,    0,    0,   40,   40,
    0,    0,    0,    0,    0,    0,   40,   40,   40,    0,
    0,   40,   40,   40,    0,   40,    0,    0,   40,    0,
   40,   40,   40,   40,   39,    0,    0,   40,   40,   40,
    0,    0,   40,   40,   40,    0,    0,    0,    0,    0,
    0,   40,   40,    0,   40,   40,   40,   40,   40,   40,
    0,    0,    0,   40,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   37,    0,    0,
    0,    0,   37,    0,   40,   40,   37,    0,   37,    0,
    0,   37,    0,   37,    0,    0,   37,    0,   37,    0,
   37,    0,   37,    0,    0,   37,    0,    0,   37,   37,
    0,    0,    0,    0,    0,    0,   37,   37,   37,    0,
    0,   37,   37,   37,    0,   37,    0,    0,   37,    0,
   37,   37,   37,   37,   40,    0,    0,   37,   37,   37,
    0,    0,   37,   37,   37,    0,    0,    0,    0,    0,
    0,   37,   37,    0,   37,   37,    0,   37,   37,   37,
    0,    0,    0,   37,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   38,    0,    0,
    0,    0,   38,    0,   37,   37,   38,    0,   38,    0,
    0,   38,    0,   38,    0,    0,   38,    0,   38,    0,
   38,    0,   38,    0,    0,   38,    0,    0,   38,   38,
    0,    0,    0,    0,    0,    0,   38,   38,   38,    0,
    0,   38,   38,   38,    0,   38,    0,    0,   38,    0,
   38,   38,   38,   38,   37,    0,    0,   38,   38,   38,
    0,    0,   38,   38,   38,    0,    0,    0,    0,    0,
    0,   38,   38,  351,   38,   38,    0,   38,   38,   38,
    0,    0,    0,   38,    0,    0,    0,  505,    0,    0,
    0,    0,    0,    0,    0,   97,   98,    0,  100,    0,
    0,  101,  289,    0,   38,   38,  105,  106,  107,  351,
  109,    0,    0,    0,    0,    0,  110,    0,    0,  112,
    0,    0,    0,    0,    0,    0,  117,    0,    0,    0,
    0,  119,    0,  120,  121,  122,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  124,    0,  125,
  126,    0,    0,  127,   38,    0,  129,    0,  131,    0,
  133,  134,  135,  290,    0,  138,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  351,  351,  351,
  351,    0,    0,    0,  351,  351,    0,    0,  351,  351,
  351,  351,  351,  351,  351,  351,  351,  146,  351,  351,
  351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
  351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
    0,    0,    0,    0,    0,    0,  351,    0,    0,  351,
    0,    0,    0,    0,    0,    0,   57,    0,   57,    0,
   57,    0,   57,  156,  506,   57,    0,   57,   57,    0,
   57,    0,   57,    0,   57,    0,   57,   57,   57,   57,
    0,    0,   57,   57,    0,    0,    0,    0,   57,   57,
   57,   57,   57,    0,    0,   57,   57,   57,    0,   57,
    0,   57,   57,   57,   57,   57,   57,   57,   57,    0,
   57,   57,   57,   57,    0,    0,   57,   57,   57,    0,
   57,    0,    0,    0,    0,   57,   57,    0,   57,   57,
   56,   57,   57,   57,   56,    0,   56,   57,    0,   56,
    0,   56,   56,    0,   56,    0,   56,    0,   56,    0,
   56,   56,   56,   56,   57,   57,   56,   56,    0,    0,
    0,    0,   56,    0,   56,   56,   56,   57,    0,   56,
    0,   56,    0,   56,    0,    0,   56,    0,   56,   56,
   56,   56,    0,    0,    0,   56,   56,   56,    0,    0,
   56,   56,   56,    0,    0,    0,    0,    0,    0,   56,
   56,    0,   56,   56,    0,   56,   56,   56,   57,    0,
    0,   56,    0,    0,    0,    0,    0,   56,    0,    0,
    0,   56,    0,   56,    0,    0,   56,    0,   56,   56,
    0,   56,   87,   56,    0,   56,    0,   56,   56,   56,
   56,   56,    0,   56,   56,    0,    0,    0,    0,   56,
    0,   56,   56,   56,    0,    0,   56,    0,   56,    0,
   56,    0,    0,   56,    0,   56,   56,   56,   56,    0,
    0,    0,   56,   56,   56,    0,    0,   56,   56,   56,
    0,    0,   56,    0,    0,    0,   56,   56,    0,   56,
   56,   56,   56,   56,   56,   56,    0,   56,   56,    0,
   56,    0,   56,   56,    0,   56,    0,   56,    0,   56,
    0,   56,   56,   56,   56,    0,    0,   56,   56,   88,
    0,    0,    0,   56,    0,   56,   56,   56,   56,    0,
   56,    0,   56,    0,   56,    0,    0,   56,    0,   56,
   56,   56,   56,    0,    0,    0,   56,   56,   56,    0,
    0,   56,   56,   56,    0,    0,    0,    0,    0,    0,
   56,   56,    0,   56,   56,    0,   56,   56,   56,   56,
    0,    0,   56,    0,    0,    0,    0,    0,   56,    0,
    0,    0,   56,    0,   56,    0,    0,   56,    0,   56,
   56,    0,   56,  110,   56,    0,   56,    0,   56,   56,
   56,   56,   56,    0,   56,   56,    0,    0,    0,    0,
   56,    0,   56,   56,   56,    0,    0,   56,    0,   56,
    0,   56,    0,    0,   56,    0,   56,   56,   56,   56,
    0,    0,    0,   56,   56,   56,    0,    0,   56,   56,
   56,    0,    0,   56,    0,    0,    0,   56,   56,    0,
   56,   56,   56,   56,   56,   56,   56,    0,   56,   56,
    0,   56,    0,   56,   56,    0,   56,    0,   56,    0,
   56,    0,   56,   56,   56,   56,    0,    0,   56,   56,
  111,    0,    0,    0,   56,    0,   56,   56,   56,   56,
    0,   56,    0,   56,    0,   56,    0,    0,   56,    0,
   56,   56,   56,   56,    0,    0,    0,   56,   56,   56,
    0,    0,   56,   56,   56,    0,    0,    0,    0,    0,
    0,   56,   56,    0,   56,   56,    0,   56,   56,   56,
   56,    0,    0,   56,    0,    0,    0,   56,    0,    0,
    0,   56,    0,   56,    0,    0,   56,    0,   56,   56,
    0,   56,    0,   56,  232,   56,    0,   56,   56,   56,
   56,    0,    0,   56,   56,    0,    0,    0,    0,   56,
    0,   56,   56,   56,    0,    0,   56,    0,   56,    0,
   56,    0,    0,   56,    0,   56,   56,   56,   56,    0,
    0,    0,   56,   56,   56,    0,    0,   56,   56,   56,
    0,    0,    0,    0,   56,    0,   56,   56,    0,   56,
   56,   56,   56,   56,   56,   56,    0,   56,   56,    0,
   56,    0,   56,    0,    0,   56,    0,   56,    0,   56,
    0,   56,    0,    0,   56,    0,    0,   56,   56,  233,
    0,    0,    0,    0,    0,   56,   56,   56,    0,    0,
   56,   56,   56,    0,   56,    0,    0,   56,    0,   56,
   56,   56,   56,    0,    0,    0,   56,   56,   56,    0,
    0,   56,   56,   56,    0,    0,    0,    0,    0,    0,
   56,   56,    0,   56,   56,    0,   56,   56,   56,   56,
    0,    0,   56,    0,    0,    0,   56,    0,    0,    0,
   56,    0,   56,    0,    0,   56,    0,   56,    0,    0,
   56,    0,   56,   41,   56,    0,   56,    0,    0,   56,
    0,    0,   56,   56,    0,    0,    0,    0,    0,    0,
   56,   56,   56,    0,    0,   56,   56,   56,    0,   56,
    0,    0,   56,    0,   56,   56,   56,   56,    0,    0,
    0,   56,   56,   56,    0,  351,   56,   56,   56,    0,
    0,    0,    0,   56,    0,   56,   56,    0,   56,   56,
    0,   56,   56,   56,    0,    0,    0,   56,  351,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  351,    0,   62,    0,    0,  351,    0,   42,  351,
    0,  351,    0,  351,  351,  351,  351,    0,    0,    0,
    0,  351,    0,    0,    0,  351,   63,    0,    0,  351,
    0,    0,    0,   62,    0,    0,    0,  351,    0,   64,
  351,    0,  351,    0,   66,    0,    0,    0,    0,   67,
    0,   68,   69,   70,   71,    0,   63,    0,   56,   72,
    0,  351,    0,   73,    0,    0,    0,    0,  351,   64,
  283,    0,  351,    0,   66,   74,    0,    0,   75,   67,
   76,   68,   69,   70,   71,  351,    0,    0,    0,   72,
    0,   97,   98,   73,  100,    0,    0,  101,  289,    0,
    0,    0,  105,  106,  107,   74,  109,    0,   75,   98,
   76,  100,  110,    0,  101,  112,    0,  351,    0,  105,
    0,    0,  117,  109,    0,    0,    0,  119,    0,  120,
  121,  122,  112,  578,    0,    0,    0,    0,    0,  117,
  579,    0,    0,  124,  119,  125,  126,    0,  122,  127,
    0,    0,  129,    0,  131,  460,  133,  134,  135,  290,
  124,  138,  125,    0,    0,    0,  127,    0,  580,    0,
    0,  143,  144,    0,  134,  135,    0,    0,  138,    0,
    0,  269,    0,    0,    0,  646,    0,    0,    0,    0,
    0,    0,    0,  146,  874,    0,  581,    0,    0,  148,
  149,  150,  151,    0,    0,    0,  152,    0,  153,    0,
    0,    0,    0,    0,  154,  155,    0,    0,    0,    0,
    0,    0,   97,   98,    0,  100,    0,    0,  101,  289,
    0,    0,    0,  105,  106,  107,    0,  109,    0,  156,
  482,  158,  159,  110,    0,   30,  112,   30,    0,    0,
    0,    0,    0,  117,    0,    0,    0,  352,  119,    0,
  120,  121,  122,    0,  578,    0,    0,    0,   30,    0,
    0,  579,    0,    0,  124,    0,  125,  126,    0,    0,
  127,   30,    0,  129,    0,  131,   30,  133,  134,  135,
  290,   30,  138,   30,   30,   30,   30,    0,    0,  580,
    0,   30,  143,  144,    0,   30,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   30,    0,    0,
   30,    0,   30,    0,  146,    0,    0,  581,    0,    0,
  148,  149,  150,  151,    0,    0,    0,  152,    0,  153,
    0,    0,    0,    0,    0,  154,  155,   30,   30,    0,
    0,    0,    0,   97,   98,    0,  100,    0,    0,  101,
  289,    0,    0,    0,  105,  106,  107,    0,  109,    0,
  156,  482,  158,  159,  110,    0,   56,  112,    0,    0,
    0,    0,    0,    0,  117,    0,    0,    0,    0,  119,
    0,  120,  121,  122,    0,  578,    0,    0,    0,   56,
    0,    0,  579,    0,    0,  124,    0,  125,  126,    0,
    0,  127,   56,    0,  129,    0,  131,   56,  133,  134,
  135,  290,   56,  138,   56,   56,   56,   56,    0,    0,
  580,    0,   56,  143,  144,    0,   56,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   56,    0,
    0,   56,    0,   56,    0,  146,    0,    0,    0,    0,
    0,  148,  149,  150,  151,    0,    0,    0,  152,    0,
  153,    0,    0,    0,   56,   56,  154,  155,  214,    0,
    0,    0,    0,    0,   97,   98,    0,  100,    0,    0,
  101,  289,    0,    0,    0,  105,  106,  107,    0,  109,
    0,  156,  482,  158,  159,  110,    0,    0,  112,    0,
    0,    0,    0,    0,    0,  117,    0,    0,    0,    0,
  119,    0,  120,  121,  122,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  124,    0,  125,  126,
    0,    0,  127,    0,    0,  129,    0,  131,    0,  133,
  134,  135,  290,    0,  138,    0,    0,  140,    0,    0,
    0,  142,    0,    0,  143,  144,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  146,    0,    0,    0,
    0,    0,  148,  149,  150,  151,    0,    0,    0,  152,
    0,  153,    0,    0,    0,    0,    0,  154,  155,    0,
    0,    0,    0,    0,    0,   97,   98,    0,  100,    0,
    0,  101,  289,    0,    0,    0,  105,  106,  107,    0,
  109,    0,  156,  334,  158,  159,  110,    0,   56,  112,
    0,    0,    0,    0,    0,    0,  117,    0,    0,    0,
    0,  119,    0,  120,  121,  122,    0,    0,    0,    0,
    0,   56,    0,    0,    0,    0,    0,  124,    0,  125,
  126,    0,    0,  127,   56,    0,  129,    0,  131,   56,
  133,  134,  135,  290,   56,  138,   56,   56,   56,   56,
    0,    0,  142,    0,   56,  143,  144,    0,   56,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   56,    0,    0,   56,  839,   56,    0,  146,    0,    0,
    0,    0,    0,  148,  149,  150,  151,    0,    0,    0,
  152,    0,  153,    0,    0,    0,   56,   56,  154,  155,
  216,    0,    0,    0,    0,    0,   97,   98,    0,  100,
    0,    0,  101,  289,    0,    0,    0,  105,  106,  107,
    0,  109,    0,  156,  334,  158,  159,  110,    0,    0,
  112,    0,    0,    0,    0,    0,    0,  117,    0,    0,
    0,    0,  119,    0,  120,  121,  122,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  124,    0,
  125,  126,    0,    0,  127,    0,    0,  129,    0,  131,
    0,  133,  134,  135,  290,    0,  138,    0,    0,    0,
    0,    0,    0,  142,    0,    0,  143,  144,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  515,    0,    0,    0,  146,    0,
    0,    0,    0,    0,  148,  149,  150,  151,    0,    0,
    0,  152,    0,  153,    0,    0,    0,    0,    0,  154,
  155,    0,    0,    0,    0,    0,    0,   97,   98,    0,
  100,    0,    0,  101,  289,    0,    0,    0,  105,  106,
  107,    0,  109,    0,  156,  334,  158,  159,  110,    0,
    0,  112,    0,    0,    0,    0,    0,    0,  117,    0,
    0,    0,    0,  119,    0,  120,  121,  122,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  124,
    0,  125,  126,    0,    0,  127,    0,    0,  129,    0,
  131,    0,  133,  134,  135,  290,    0,  138,    0,    0,
    0,    0,    0,    0,  142,    0,    0,  143,  144,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  518,    0,    0,    0,  146,
    0,    0,    0,    0,    0,  148,  149,  150,  151,    0,
    0,    0,  152,    0,  153,    0,    0,    0,    0,    0,
  154,  155,    0,    0,    0,    0,    0,    0,   97,   98,
    0,  100,    0,    0,  101,  289,    0,    0,    0,  105,
  106,  107,    0,  109,    0,  156,  334,  158,  159,  110,
    0,   56,  112,   56,    0,    0,    0,    0,    0,  117,
    0,    0,    0,    0,  119,    0,  120,  121,  122,    0,
    0,    0,    0,    0,   56,    0,    0,    0,    0,    0,
  124,    0,  125,  126,    0,    0,  127,   56,    0,  129,
    0,  131,   56,  133,  134,  135,  290,   56,  138,   56,
   56,   56,   56,    0,    0,  142,    0,   56,  143,  144,
    0,   56,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   56,    0,    0,   56,    0,   56,    0,
  146,    0,    0,    0,    0,    0,  148,  149,  150,  151,
    0,    0,    0,  152,    0,  153,    0,    0,    0,    0,
    0,  154,  155,  317,    0,    0,    0,    0,    0,   97,
   98,    0,  100,    0,    0,  101,  289,    0,    0,    0,
  105,  106,  107,    0,  109,    0,  156,  334,  158,  159,
  110,    0,   56,  112,    0,    0,    0,    0,    0,    0,
  117,    0,    0,    0,    0,  119,    0,  120,  121,  122,
    0,    0,    0,    0,    0,   56,    0,    0,    0,    0,
    0,  124,    0,  125,  126,    0,    0,  127,   56,    0,
  129,    0,  131,   56,  133,  134,  135,  290,   56,  138,
   56,   56,   56,   56,    0,    0,  142,    0,   56,  143,
  144,    0,   56,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   56,    0,    0,   56,    0,   56,
    0,  146,    0,    0,    0,    0,    0,  148,  149,  150,
  151,    0,    0,    0,  152,    0,  153,    0,    0,    0,
   56,   56,  154,  155,    0,    0,    0,    0,    0,    0,
   97,   98,    0,  100,    0,    0,  101,  289,    0,    0,
    0,  105,  106,  107,    0,  109,    0,  156,  474,  158,
  159,  110,    0,   62,  112,    0,    0,    0,    0,    0,
    0,  117,    0,    0,    0,    0,  119,    0,  120,  121,
  122,    0,    0,    0,    0,    0,   63,    0,    0,    0,
    0,    0,  124,    0,  125,  126,    0,    0,  127,   64,
    0,  129,    0,  131,   66,  133,  134,  135,  290,   67,
  138,   68,   69,   70,   71,    0,    0,  142,    0,   72,
  143,  144,    0,   73,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   74,    0,    0,   75,    0,
   76,    0,  146,    0,    0,    0,    0,    0,  148,  149,
  150,  151,    0,    0,    0,  152,    0,  153,    0,    0,
    0,    0,    0,  154,  155,    0,    0,    0,    0,    0,
    0,   84,   84,    0,   84,    0,    0,   84,   84,    0,
    0,    0,   84,   84,   84,    0,   84,    0,  156,  482,
  158,  159,   84,    0,    0,   84,    0,    0,    0,    0,
    0,    0,   84,    0,    0,    0,    0,   84,    0,   84,
   84,   84,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   84,    0,   84,   84,    0,    0,   84,
    0,    0,   84,    0,   84,    0,   84,   84,   84,   84,
    0,   84,    0,    0,    0,    0,    0,    0,   84,    0,
    0,   84,   84,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   84,    0,    0,    0,    0,    0,   84,
   84,   84,   84,    0,    0,    0,   84,    0,   84,    0,
    0,    0,    0,    0,   84,   84,    0,    0,    0,    0,
    0,    0,  156,  156,    0,  156,    0,    0,  156,  156,
    0,    0,    0,  156,  156,  156,    0,  156,    0,   84,
   84,   84,   84,  156,    0,    0,  156,    0,    0,    0,
    0,    0,    0,  156,    0,    0,    0,    0,  156,    0,
  156,  156,  156,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  156,    0,  156,  156,    0,    0,
  156,    0,    0,  156,    0,  156,    0,  156,  156,  156,
  156,    0,  156,    0,    0,    0,    0,    0,    0,  156,
    0,    0,  156,  156,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  156,    0,    0,    0,    0,    0,
  156,  156,  156,  156,    0,    0,    0,  156, 1288,  156,
    0,    0,    0,    0,    0,  156,  156,    0,    0,    0,
    0,    0,    0,   97,   98,    0,  100,    0,    0,  101,
  289,    0,    0,    0,  105,  106,  107,    0,  109,    0,
  156,  156,  156,  156,  110,    0,    0,  112,    0,    0,
 1289,    0,    0,    0,  117,    0,    0,    0,    0,  119,
    0,  120,  121,  122,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  124,    0,  125,  126,    0,
    0,  127,    0,    0,  129,    0,  131,    0,  133,  134,
  135,  290,    0,  138,    0, 1290, 1291, 1292, 1293,    0,
 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301,    0,    0,
 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309,    0,    0,
    0,    0,    0,    0,    0,  146,    0,    0,    0,    0,
    0,  148,  149,  150,  151,    0,    0,    0,  152,    0,
  153,    0,    0,    0,    0,    0,  154,  155,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  644,    0,  644,    0,
  644,  156,  291,  644,  159,  644,  644,    0,  644,    0,
  644,    0,  644,    0,  644,  644,  644,    0,    0,    0,
  644,  644,    0,    0,    0,    0,  644,    0,  644,  644,
    0,    0,    0,  644,    0,    0,    0,  644,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  644,  644,
    0,  644,    0,    0,    0,  644,  644,    0,    0,    0,
    0,    0,    0,  644,  644,    0,    0,  644,    0,    0,
  644,    0,    0,    0,    0,  644,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  644,  644,    0,   97,   98,    0,  100,    0,
    0,  101,  289,    0,    0,  644,  105,  106,  107,    0,
  109,    0,    0,    0,    0,    0,  110,    0,    0,  112,
    0,    0,    0,    0,    0,    0,  117,    0,    0,    0,
    0,  119,    0,  120,  121,  122,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  644,  124,    0,  125,
  126,    0,    0,  127,    0,    0,  129,    0,  131,    0,
  133,  134,  135,  290,  643,  138,  643,    0,  140,  643,
    0,  643,  643,    0,  643,    0,  643,    0,  643,    0,
  643,  643,  643,    0,    0,    0,  643,  643,    0,    0,
    0,    0,  643,    0,  643,  643,    0,  146,    0,  643,
    0,    0,    0,  643,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  643,    0,  643,    0,    0,
    0,  643,  643,    0,    0,    0,    0,    0,    0,  643,
  643,    0,    0,  643,    0,    0,  643,    0,    0,    0,
    0,  643,    0,  156,  291,  643,    0,  643,    0,    0,
  643,    0,  643,  643,    0,  643,    0,  643,    0,  643,
    0,  643,  643,  643,    0,    0,    0,  643,  643,    0,
    0,  643,    0,  643,    0,  643,  643,    0,    0,    0,
  643,    0,    0,    0,  643,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  643,    0,  643,    0,
    0,    0,  643,  643,    0,    0,    0,    0,    0,    0,
  643,  643,  643,   98,  643,  100,    0,  643,  101,    0,
    0, 1237,  643,  105,    0,  251,    0,  109,    0,  252,
 1238, 1239,    0,    0,    0,  253,  112,    0,    0,    0,
    0, 1240,    0,  117,    0,   98,    0,  100,  119,    0,
  101,    0,  122, 1237,    0,  105,    0,  251,    0,  109,
    0,  252, 1238, 1239,  124,    0,  125,  253,  112,    0,
  127,    0,    0, 1240,    0,  117,    0,    0,  134,  135,
  119,    0,  138,    0,  122, 1241,    0,    0,    0,    0,
  255,    0,    0,  643,    0,    0,  124,    0,  125,    0,
    0,    0,  127,    0,    0,    0,    0,    0,    0,    0,
  134,  135,    0,    0,  138,    0,    0, 1241,    0,  643,
 1242,  643,  255,    0,  643,    0,  643,    0,    0,  643,
    0,  643,    0,  643,    0,  643,    0,    0,    0,    0,
    0,  643,  643,    0,    0,    0,    0,    0,    0,  643,
  643,    0,    0,    0,  643,    0,    0,    0,  643,    0,
    0, 1243,    0,    0,   56,    0,   56,    0,    0,   56,
  643,    0,  643,    0,   56,    0,  643,  643,   56,    0,
    0,    0,    0,    0,  643,  643,    0,   56,  643,    0,
    0,  643,    0, 1243,   56,    0,  643,    0,    0,   56,
    0,    0,    0,   56,   56,   56,   56,   56,    0,   56,
    0,    0,   56,    0,   56,   56,    0,   56,   56,    0,
    0,   56,    0,    0,   56,    0,    0,   56,    0,   56,
   56,    0,    0,   56,   56,    0,   56,    0,    0,   56,
    0,    0,    0,   56,    0,   56,    0,   56,   98,    0,
  100,    0,   56,  101,    0,   56,    0,   56,  105,    0,
    0,   56,  109,    0,   56,    0,  173,  643,    0,   56,
   56,  112,   98,   56,  100,    0,   56,  101,  117,    0,
    0,    0,  105,  119,  251,    0,  109,  122,  252,  559,
    0,    0,    0,    0,  253,  112,  560,    0,    0,  124,
    0,  125,  117,    0,  173,  127,    0,  119,  561,    0,
    0,  122,   56,  134,  135,    0,   98,  138,  100,    0,
  562,  101,    0,  124,    0,  125,  105,    0,    0,  127,
  109,    0,    0,    0,    0,    0,    0,  134,  135,  112,
   98,  138,  100,    0,  254,  101,  117, 1165,    0,  255,
  105,  119,   56,    0,  109,  122,    0,    0,    0,    0,
    0,    0,    0,  112,    0,    0,    0,  124,    0,  125,
  117,    0,    0,  127,    0,  119,    0, 1166,    0,  122,
    0,  134,  135,    0,    0,  138,    0,    0,  269,    0,
    0,  124,    0,  125,    0,    0,  563,  127, 1167,    0,
    0,    0,    0,    0,    0,  134,  135,    0,   98,  138,
  100,    0,  269,  101,    0,    0,    0,    0,  105,    0,
   90,    0,  109,    0,    0,    0,    0,    0,    0,    0,
    0,  112,   98,    0,  100,    0,    0,  101,  117,    0,
    0,    0,  105,  119,    0,    0,  109,  122,    0,    0,
    0,    0,    0,    0,    0,  112,    0,    0,    0,  124,
    0,  125,  117,    0,  354,  127,    0,  119,    0,    0,
    0,  122,    0,  134,  135,    0,   98,  138,  100,    0,
  269,  101,    0,  124,    0,  125,  105,    0,   90,  127,
  109,    0,    0,    0,    0,    0,    0,  134,  135,  112,
   98,  138,  100,    0,  254,  101,  117,    0,    0,    0,
  105,  119,    0,    0,  109,  122,    0,    0,    0,    0,
    0,    0,    0,  112,    0,    0,    0,  124,    0,  125,
  117,    0,    0,  127,    0,  119,    0,    0,    0,  122,
    0,  134,  135,    0,   98,  138,  100,    0,  450,  101,
    0,  124,    0,  125,  105,    0,   90,  127,  109,    0,
    0,    0,    0,    0,    0,  134,  135,  112,   98,  138,
  100,    0,  269,  101,  117,    0,    0,    0,  105,  119,
   90,    0,  109,  122,    0,    0,    0,    0,    0,    0,
    0,  112,    0,    0,    0,  124,    0,  125,  117,    0,
    0,  127,    0,  119,    0,    0,    0,  122,    0,  134,
  135,    0,  502,  138,  502,    0,  269,  502,    0,  124,
    0,  125,  502,    0,   90,  127,  502,    0,    0,    0,
    0,    0,    0,  134,  135,  502,  192,  138,  192,    0,
  562,  192,  502,    0,    0,    0,  192,  502,  626,    0,
  192,  502,    0,    0,    0,    0,    0,    0,    0,  192,
    0,    0,    0,  502,    0,  502,  192,    0,    0,  502,
    0,  192,    0,    0,    0,  192,    0,  502,  502,    0,
  202,  502,  202,    0,  502,  202,    0,  192,    0,  192,
  202,    0,  628,  192,  202,    0,    0,    0,    0,    0,
    0,  192,  192,  202,  193,  192,  193,    0,  192,  193,
  202,    0,    0,    0,  193,  202,   90,    0,  193,  202,
    0,    0,    0,    0,    0,    0,    0,  193,    0,    0,
    0,  202,    0,  202,  193,    0,    0,  202,    0,  193,
    0,   30,    0,  193,    0,  202,  202,    0,    0,  202,
    0,    0,  202,    0,    0,  193,    0,  193,    0,    0,
  502,  193,    0,    0,   30,    0,    0,    0,    0,  193,
  193,    0,    0,  193,    0,    0,  193,   30,    0,    0,
    0,   56,   30,    0,  192,    0,    0,   30,    0,   30,
   30,   30,   30,    0,    0,   30,    0,   30,    0,    0,
    0,   30,    0,    0,   56,    0,    0,    0,    0,    0,
    0,    0,    0,   30,    0,    0,   30,   56,   30,   56,
    0,   56,   56,    0,    0,    0,    0,   56,  202,   56,
   56,   56,   56,    0,    0,   56,    0,   56,    0,    0,
    0,   56,   56,   30,   30,    0,    0,    0,    0,    0,
    0,    0,  193,   56,    0,   56,   56,    0,   56,    0,
   56,    0,    0,    0,    0,   56,    0,   56,   56,   56,
   56,    0,    0,   56,    0,   56,    0,    0,    0,   56,
    0,    0,    0,  316,    0,    0,    0,    0,    0,    0,
    0,   56,    0,    0,   56,    0,   56,
  };
  protected static readonly short [] yyCheck = {           258,
    0,   53,   77,  330,    8,  515,   53,  522,   53,   53,
   10,  323,  356,   30,  454,  239,  224,  253,   91,  332,
  103,  548,  639,  463,  103,    3,  208,    5,  496,   81,
  351,  558,  328,  252,    0,  279,   78,  140,   84,  283,
  518,    0,  565,  130,  803,  804,  691,  692, 1082,   77,
  102,   10,   56,  261,   54,   10,   10,  256,  256,  256,
  163, 1172,  294,  166,  268,  256,  256,  256,  257,   47,
  256,  268,  294,  294,  306,  256, 1187,  256,   53,  123,
  132,  256,  294,  256,  136,  256,  130,  732,  262,  734,
  256,  256,  256,  349,  350,   54,  332,  143,  144,   54,
 1150,   53,  146,  282,   82,   53,  363,   53,   53,   53,
  294,  256,   53,  159,   92, 1200,   53,   53,  256,   53,
   53,  268,  367,  331,  298,  333, 1356, 1357,  256,  276,
  363,  357,   88,  785,  362,  314,  366,  269,  366,  383,
  294,  900,  672,   53, 1229,  386,  335,  841, 1198,  908,
 1200,  257,  306,  256,  286,  381,  208,  268,  852,  262,
  103,  208,  257,  208,  208,  386,  423,  423,  409,  358,
 1400,  256,  335,  294,  386,  364,  251,  376,  423, 1229,
    3,  413,    5,  693,  256,  415,  376,  415,  409,  370,
  423,  413,  365,  103,  521,  256,  369,  409,  108,  373,
  374,  157,  386,  369,  548,  148,  149,  150,  151,  152,
  153,  154,  155,  417,  558,  413,  256,  362,  256,  364,
  417,  366,  413,  251,   47,  409,  364,  413,  447, 1340,
  419,  420,  421,  208,  413,  279,  364,  320,  413,  283,
  240,  320,  413, 1354,  288,  328,  898,  350,  413,  413,
  296,  266,  363,  860,   77, 1366,  208, 1368,  256,   82,
  208,   84,  208,  208,  208,  386,  413,  208,  347,   92,
  415,  208,  208,  418,  208,  208,  322,  335,  363,  323,
  367,  240,  326,  327,  369,  240,  240,  817,  409,  819,
  943,  257,  364,  339,  346,  818,  340,  372,  208,  314,
 1334,  345,  363,  347,  625,  950,  417,  351,  369,  356,
  163,  356,  325,  166,  264, 1006, 1007,  273,  971,  988,
  143,  144,  362,  367,  349,  350,  364,  837,  343,  363,
  256,  371,  256,  257,  256,  291,  159,  363,  365,  383,
  384,  363,  369,  341,  388,  389,  390,  391,  392,  393,
  394,  395,  396,  397,  398,  370,  402,  403,  367,  256,
  681,  968,  830,  970,  369,  423,  364,  339,  846,  364,
  369,  386,  344, 1026,  346,  325,  420,  320,  334,  339,
  352,  353,  428,  429,  344,  328,  346,  363, 1057,  423,
 1081,  364,  352,  353,  409,  368,  367,  423,  423,  695,
  413,  423,  912,  367,  371, 1150,  411,  422,  305,  262,
  320,  335,  411,  335,  423, 1149, 1150,  496,  374,  663,
 1111,  463,  666,  263,  470,  263, 1117,  343,  251,  648,
  253,  650,  942,  652,  358,  258,  358,  347,  364,  491,
  364,  368,  364, 1177,  387,  418,  356,  423, 1093,  341,
  371,  423,  423, 1198,  370, 1200,  399,  400,  401,  423,
  535,  404,  405,  423, 1198,   53, 1200,  343,  339,  371,
  386,  515,  364,  296,  343,  315,  520,  315,  522,  531,
  532,  367,  363,  369, 1229, 1130, 1131,  306,  815,   77,
  565,  362, 1137,  409,  313, 1229,   84,  369,  542,  322,
  544,  548,  423,  548,  460,  557,  422,  376,  829,  332,
  386,  558,  413,  558, 1150,  103,  339,  386,  474,  272,
  108,  423, 1281,  767,  256,  481,  482, 1144,  710,  386,
  413,  339,  413,  409,  578,  579,  344,  423,  346,  272,
  409,  349,  350,  296,  352,  353,  422,  349,  350,  372,
  506,  364,  409,  422,  363,  143,  144,  535,  256, 1027,
 1319,  369, 1198,  296, 1200,  422,  879,  413, 1327, 1328,
  323,  159,  370,  305, 1333, 1149, 1150,  413,  339,  402,
  403,  625,  409,  344, 1201,  346,  496,  631,  349,  350,
  323,  352,  353, 1229,  339,  367,  642,  369,  256,  365,
  413, 1149, 1150, 1177,  413,  428,  429, 1134,  369, 1150,
  366,  269,  695,  339, 1124,  423,  572,  362,  574,  663,
  208,  423,  666,  726, 1198,  371, 1200,  570,  286, 1177,
  703,  454, 1249, 1250,  961,  364,  362,  681,  548,  366,
  463,  396,  850,  879,  688,  371,  364,  470,  558,  693,
 1198,  423, 1200,  408,  272, 1229,  673, 1198,  376, 1200,
  704, 1150,  423,  251,  362,  253,  364,  371,  366,  367,
  722,  369,  339,  371,  720,  371,  751,  344,  296,  346,
  357, 1229,  349,  350,  413,  352,  353,  364, 1229,  376,
  646,  368,  736,  362,  738,  364,  376, 1150,  343,  386,
  306,  657,  658,  747,  381,  323,  386,  313,  296, 1198,
  364, 1200,  535,  367,   10,  413,   12,  415,  762,  325,
  418, 1033,  409,  767,  768,  370,  770,  386,  367,  409,
  369,  376,  320,  363,  322,  422,  413,  781,  782,  369,
 1229,  386,  565,  818,  332, 1198,  376, 1200,  381,  705,
  409,  339,  695, 1097,  365, 1082,  423,  416,  369,  347,
  362,  985,   58,  357,  409,   61,  810,  811,  356,  371,
  362,  815,  357, 1085,  368,  821, 1229,  422,  409,  256,
  379,  691,  692,  368,  372,  829,  409,  381,  832,  789,
 1134,  422,  413,  837,  387,  409,  381,  841,  106,  422,
  413,  422,  416,  111, 1244,  113,  114,  851,  116,  422,
  118,  404,  405, 1157,  402,  403, 1128, 1257,  126,  642,
  128,  374,  732,  357,  734,  339,  368,  413,  136,  371,
  344,  139,  346,  141,  368,  349,  350,  384,  352,  353,
  428,  429,  886,  380,  888,  339,  890,  381,  413,  365,
  344, 1163,  346,  369,  362,  349,  350,  165,  352,  353,
  365, 1371,  339,  371,  369,  395,  261,  344,  912,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
  365,  366,  470,  368,  369,  370,  363,  362,  365,  284,
  367,  364,  369,  370,  371,  899,  371,  720,  942, 1414,
 1415,  367,  297,  369,  860,  371,  385,  302,  496,  423,
  305,  367,  307,  369,  309,  310,  311,  312,  377,  378,
  972,  368,  317,  368,  371,  362,  321,  362,  751,  423,
  325,  362,  391,  392,  371,  979,  371,  981,  333,  983,
  371,  336,  413,  338,  362,  365,  423,  535,  366,  369,
  368,  369,  357,  371,  998,  389,  390,  365,  376,  364,
  548,  369,  367,  368,  369,  366,  369,  368,  371,  337,
  558,    0,  306,  376,  308,  363,  381,  565,  366,  313,
  368,  369,  290,  987,  292, 1244,  387,  388,  988, 1033,
  365,  325,  410,  367,  994,  818,  996,  371,  821,  387,
  388, 1045, 1046,  367,  362,  369,  407, 1334,  413, 1053,
  393,  394,  968,  371,  415,  409,  410,  418,  413,  407,
  365,  366,  362,  331,  369,  256,  366,  415,  368,  369,
  418,  371,  381,  382,  383,  343,  376,  413, 1082,  363,
  950, 1085,  366,  413,  368,  369,  408,  409,  410,  411,
 1097,  357, 1097,  369,  642,  371,  879, 1057,  364, 1103,
  340,  367,  368,  387,  388,  362,  369,  371,  371,  366,
  410,  368,  369,  371,  371,  381,  369,  362,  371,  376,
 1124,  354,  355,  407, 1128,  368,  367, 1134,  369, 1134,
  371,  415,  371,  365,  418,  367, 1140, 1141,  339,  365,
  371,  367, 1148,  691,  692,  365,  365,  367,  367,  369,
 1157,  413, 1157,  265, 1114,  267,  354,  355,  270, 1163,
  365,  362,  367,  275,  369,  366,  413,  279,  369,  370,
  371,  367,  720,  369, 1209,  376,  288,  365,  371,  367,
 1215,  349,  350,  295,  732,  365,  734,  367,  300, 1149,
 1150,  369,  304,  371,  306,  369,  308,  371,  369, 1203,
  371,  313, 1208,  751,  316,  367,  318,  359,  360,  413,
  322,  367,  368,  325,  359,  360,  413, 1177,  330,  331,
  362, 1004,  334, 1093,  492,  337,  413, 1097,  910,  911,
 1234, 1237, 1238,  406,  407,  412,  413,  370, 1198,  256,
 1200,  148,  149,  150,  151,  152,  153,  154,  155,  413,
  256,  366,  413, 1259,  413, 1261,  367, 1269,  367,  413,
 1130, 1131,  367,  531, 1134,  371,  367, 1137,  257, 1229,
  818,  363,  261,  821,  369,  413,  265,  367,  267,  367,
  367,  270,  367,  272,  367,  294,  275, 1157,  277,  339,
  279,  294,  281,  371,  344,  284,  346,  413,  287,  288,
  369,  413,  352,  353,  367,  366,  295,  296,  297,  256,
  369,  300,  301,  302,  370,  304,  413, 1329,  307,  413,
  309,  310,  311,  312,  376,  356,  371,  316,  317,  318,
 1334,  879,  321,  322,  323, 1118,  366,  410,  371,  366,
  376,  330,  331,  366,  333,  334,  368,  336,  337,  338,
  376,  376,  367,  342,  294,  369,  369,  369,  413,  369,
  371,  369,  367,  423, 1324, 1148,  362, 1371,  367,  418,
  413, 1331,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406, 1342, 1343,  368,  413,  343,  369,  294, 1401,
 1402,  294,  369,  413, 1406, 1407, 1356, 1357,  358,  362,
  364,  369,  950,  368,  256,  256,  368,  376,  369,  367,
 1414, 1415,  367,  280,  363,  256,  362,  371,  413,  413,
  413,  413,  256,  413,  413, 1208, 1209,    0,  369,  371,
  367,  370, 1215,  367,  413,  371,  369,  369,  365,  256,
 1400,  371,  371,  367,  367,  262,  416,  418,  376,  347,
  351,  367,  371,  367, 1237, 1238, 1004,  413,  339,  376,
  413, 1244,  256,  376,  376,  256,  363,  367,  367,  347,
  363,  365,  367,  369, 1257,  413, 1259,  369, 1261,  369,
  387,  298,  413,  365,  370,  362,  365,  363,  362,  362,
  370,  362,  399,  400,  401,  348,  371,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
  417,  418,  419,  256,  376,  348,  366,  363,  363,  262,
  369,  363,  339,  367,  363,  356,  305,  344,  413,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
  366,  413,  364,  413,  362, 1093,  363,  366,  365, 1097,
  367,  366,  369,  370,  371,  298,  373,  374,  366,  362,
  377,  378,  379,  380,  381,  382,  383,  384,  385,  366,
 1118,  376,  389,  390,  391,  392,  393,  394,  395,  396,
  367,    0, 1130, 1131,  367,  369, 1134,  369,  365, 1137,
  413,  408,  413,  371,  367,  371,  367,  362,  367,  363,
 1148,  376,  363,  315,  263,  367,  423,  366,  366, 1157,
  363,  518,  367,    0,  371,  365,  365,  362,  413,  371,
  363,  362,  368,  366,  363,  368,  369,  367,  362,  371,
  373,  374,  413,  413,  377,  378,  379,  380,  381,  382,
  383,  384,  385,  363,  387,  388,  389,  390,  391,  392,
  393,  394,  395,  396,  367,  371,  367,  363,  363,  367,
 1208, 1209,  371,  570,  407,  408,  363, 1215,  371,  371,
  371,  367,  415,  371,  363,  418,  413,  371,  371,  367,
  423,  371,  362,  256,  257,  367,  363,  363,  367, 1237,
 1238,  264,  265,  266,  267,  268,  371,  270,  271,  363,
  273,  274,  275,  276,  277,  278,  279,  280,  362,  371,
  371, 1259,  285, 1261,  287,  288,  289,  290,  291,  292,
  371,  371,  295,  315,  263,   54,  299,  300,   47,  302,
  303,  304,  899,   92, 1177, 1361, 1229,  663,  663, 1337,
 1066,  314, 1001,  316,    0,  318,  319, 1329,  823,  322,
  915,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,  817,  337,  823,  823,  340,  341, 1257,
 1198,  344,  345, 1407, 1186, 1403, 1343, 1347, 1342, 1402,
 1244, 1114,  994,  704,  535,  383, 1118,  762,  414,  362,
  363,  767,  658,  366,  579,  846,  415,  666,  371,  372,
  373,  374,  375,  961,  695,  416,  379,  417,  381,  418,
 1208,  419,  972, 1157,  387,  388,  751, 1097,  208,  944,
  884, 1076, 1046, 1036,  928, 1027,  533, 1038, 1255,  864,
  436, 1141,   -1,   -1,   -1,   -1,   -1,  256,  257,  412,
  413,  414,  415,   -1,  417,  264,  265,  266,  267,  268,
  423,  270,  271,   -1,  273,  274,  275,  276,  277,  278,
  279,   -1,   -1,    0,   -1,   -1,  285,   -1,  287,  288,
  289,  290,  291,  292,   -1,   -1,  295,   -1,   -1,   -1,
  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,   -1,  337,   -1,
   -1,  340,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  846,
   -1,   -1,   -1,  362,  363,   -1,   -1,  366,   -1,   -1,
   -1,   -1,  371,  372,  373,  374,  375,   -1,   -1,   -1,
  379,   -1,  381,    0,   -1,   -1,   -1,   -1,  387,  388,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  412,  413,  414,  415,   -1,  417,   -1,
  256,  257,   -1,   -1,  423,  261,   -1,   -1,   -1,  265,
   -1,  267,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
   -1,  277,   -1,  279,   -1,  281,  282,  283,  284,   -1,
   -1,  287,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,
  296,  297,   -1,   -1,  300,  301,  302,    0,  304,   -1,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,
  316,  317,  318,   -1,   -1,  321,  322,  323,   -1,   -1,
   -1,   -1,   -1,   -1,  330,  331,   -1,  333,  334,  335,
  336,  337,  338,   -1,   -1,   -1,  342,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  358,   -1,   -1,   -1,   -1,  363,  364,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  372,   -1,   -1,  256,
  257,    0,   -1,   -1,  261,   -1,   -1,   -1,  265,   -1,
  267,   -1,   -1,  270,   -1,  272,   -1,   -1,  275,   -1,
  277,   -1,  279,   -1,  281,   -1,   -1,  284,   -1,   -1,
  287,  288,   -1,   -1,   -1,   -1,   -1,  413,  295,  296,
  297,   -1,   -1,  300,  301,  302,   -1,  304,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,  316,
  317,  318,   -1,   -1,  321,  322,  323,   -1,   -1,   -1,
   -1,   -1,   -1,  330,  331,   -1,  333,  334,  335,  336,
  337,  338,   -1,   -1,   -1,  342,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,  358,   -1,   -1,  261,   -1,  363,  364,  265,   -1,
  267,   -1,   -1,  270,   -1,  272,   -1,   -1,  275,   -1,
  277,   -1,  279,   -1,  281,   -1,   -1,  284,   -1,   -1,
  287,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,  296,
  297,   -1,   -1,  300,  301,  302,   -1,  304,   -1,   -1,
  307,   -1,  309,  310,  311,  312,  413,   -1,   -1,  316,
  317,  318,   -1,   -1,  321,  322,  323,   -1,   -1,   -1,
   -1,   -1,   -1,  330,  331,   -1,  333,  334,   -1,  336,
  337,  338,   -1,   -1,  257,  342,   -1,   -1,  261,   -1,
   -1,   -1,  265,   -1,  267,   -1,   -1,  270,   -1,  272,
   -1,   -1,  275,   -1,  277,   -1,  279,   -1,  281,   -1,
   -1,  284,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,  296,  297,   -1,   -1,  300,  301,  302,
   -1,  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,   -1,  316,  317,  318,   -1,   -1,  321,  322,
  323,   -1,   -1,   -1,   -1,   -1,  413,  330,  331,   -1,
  333,  334,  261,  336,  337,  338,  265,   -1,  267,  342,
   -1,  270,   -1,  272,   -1,   -1,  275,   -1,  277,   -1,
  279,   -1,  281,   -1,   -1,  284,   -1,   -1,  287,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,  296,  297,   -1,
   -1,  300,  301,  302,   -1,  304,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,  316,  317,  318,
   -1,   -1,  321,  322,  323,   -1,   -1,   -1,   -1,   -1,
   -1,  330,  331,   -1,  333,  334,  256,  336,  337,  338,
  413,  261,  262,  342,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  294,   -1,   -1,  297,  298,   -1,
   -1,   -1,  302,   -1,   -1,  305,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,
   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  333,  413,   -1,  336,   -1,  338,  339,
   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,  362,  363,   -1,  365,  366,  367,  368,  369,
  370,  371,   -1,  373,  374,   -1,  376,  377,  378,  379,
  380,  381,  382,  383,  384,  385,   -1,  387,  388,  389,
  390,  391,  392,  393,  394,  395,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,   -1,
   -1,  411,   -1,  413,  256,  415,   -1,   -1,  418,  261,
  262,   -1,   -1,  423,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  294,   -1,   -1,  297,  298,   -1,   -1,   -1,
  302,   -1,   -1,  305,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,
   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  333,   -1,   -1,  336,   -1,  338,  339,   -1,   -1,
   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,  357,   -1,   -1,   -1,   -1,
  362,  363,  364,  365,  366,  367,  368,  369,  370,  371,
   -1,  373,  374,   -1,   -1,  377,  378,  379,  380,  381,
   -1,   -1,  384,  385,   -1,   -1,   -1,  389,  390,  391,
  392,  393,  394,  395,  396,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  408,   -1,   -1,  411,
   -1,  413,   -1,  415,  256,   -1,  418,   -1,   -1,   -1,
   -1,  423,  264,  265,  266,  267,   -1,   -1,  270,  271,
   -1,  273,  274,  275,  276,  277,  278,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,  287,  288,  289,  290,  291,
  292,   -1,   -1,  295,   -1,   -1,   -1,  299,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  314,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,   -1,  337,   -1,   -1,  340,  341,
   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,  261,  262,
  362,   -1,   -1,   -1,  366,   -1,   -1,   -1,   -1,  371,
  372,  373,  374,  375,   -1,   -1,   -1,  379,   -1,  381,
   -1,  284,   -1,   -1,   -1,  387,  388,   -1,   -1,   -1,
   -1,  294,   -1,   -1,  297,  298,   -1,   -1,   -1,  302,
   -1,   -1,   -1,   -1,  307,   -1,  309,  310,  311,  312,
  412,  413,  414,  415,  317,   -1,   -1,   -1,  321,   -1,
   -1,  423,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  333,   -1,   -1,  336,   -1,  338,  339,   -1,   -1,   -1,
   -1,  344,   -1,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,  357,   -1,   -1,   -1,   -1,  362,
  363,  364,  365,  366,  367,  368,  369,  370,  371,   -1,
  373,  374,   -1,   -1,  377,  378,  379,  380,  381,   -1,
   -1,  384,  385,   -1,   -1,   -1,  389,  390,  391,  392,
  393,  394,  395,  396,  256,   -1,   -1,   -1,   -1,  261,
  262,   -1,   -1,   -1,   -1,  408,   -1,   -1,  411,   -1,
  413,   -1,  415,   -1,   -1,  418,   -1,   -1,   -1,   -1,
  423,   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  294,   -1,   -1,  297,  298,   -1,   -1,   -1,
  302,   -1,   -1,  305,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,
   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  333,  256,   -1,  336,   -1,  338,  339,  262,   -1,
   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,
  362,  363,  364,  365,  366,  367,   -1,  369,  370,  371,
   -1,  373,  374,   -1,  298,  377,  378,  379,  380,   -1,
   -1,   -1,  384,  385,   -1,   -1,   -1,  389,  390,  391,
  392,  393,  394,  395,  396,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  408,   -1,   -1,  411,
   -1,  413,   -1,  415,   -1,  339,  418,   -1,   -1,   -1,
  344,  423,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,  357,   -1,   -1,   -1,   -1,   -1,  363,
  364,  365,  366,  367,  368,  369,  370,  371,   -1,  373,
  374,   -1,  376,  377,  378,  379,  380,  381,  382,  383,
  384,  385,  261,  387,  388,  389,  390,  391,  392,  393,
  394,  395,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  284,   -1,  256,   -1,  413,
   -1,  415,  261,  262,  418,   -1,   -1,   -1,  297,  423,
   -1,   -1,   -1,  302,   -1,   -1,  305,   -1,  307,   -1,
  309,  310,  311,  312,   -1,  284,   -1,   -1,  317,   -1,
   -1,   -1,  321,   -1,   -1,  294,  325,   -1,  297,  298,
   -1,   -1,   -1,  302,  333,   -1,  305,  336,  307,  338,
  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,
   -1,   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  333,  256,   -1,  336,   -1,  338,
  339,  262,   -1,   -1,   -1,  344,   -1,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,   -1,  362,  363,  364,  365,  366,  367,   -1,
  369,  370,  371,   -1,  373,  374,   -1,  298,  377,  378,
  379,  380,   -1,   -1,  413,  384,  385,   -1,   -1,   -1,
  389,  390,  391,  392,  393,  394,  395,  396,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  408,
   -1,   -1,  411,   -1,  413,   -1,  415,   -1,  339,  418,
   -1,   -1,   -1,  344,  423,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,
   -1,  362,  363,  364,  365,  366,  367,  368,  369,  370,
  371,   -1,  373,  374,   -1,  376,  377,  378,  379,  380,
  381,  382,  383,  384,  385,   -1,  387,  388,  389,  390,
  391,  392,  393,  394,  395,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,   -1,  256,
  256,   -1,   -1,   -1,  415,  262,   -1,   -1,   -1,  265,
   -1,  267,  423,   -1,  270,   -1,   -1,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,  298,   -1,   -1,  300,   -1,   -1,   -1,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,   -1,  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  330,  331,   -1,   -1,  334,   -1,
   -1,  337,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1,   -1,   -1,  362,  363,   -1,  365,  366,
  367,  368,  369,  370,  371,   -1,  373,  374,   -1,  376,
  377,  378,  379,  380,  381,  382,  383,  384,  385,  261,
  387,  388,  389,  390,  391,  392,  393,  394,  395,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  284,   -1,  256,   -1,   -1,  413,  415,  261,
  262,  418,   -1,   -1,   -1,  297,  423,   -1,   -1,   -1,
  302,   -1,   -1,   -1,   -1,  307,   -1,  309,  310,  311,
  312,   -1,  284,   -1,   -1,  317,   -1,   -1,   -1,  321,
   -1,   -1,  294,  325,   -1,  297,  298,   -1,   -1,   -1,
  302,  333,   -1,  305,  336,  307,  338,  309,  310,  311,
  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,
   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  333,  256,   -1,  336,   -1,  338,  339,  262,   -1,
   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,
  362,  363,   -1,  365,  366,  367,   -1,  369,  370,  371,
   -1,  373,  374,   -1,  298,  377,  378,  379,  380,   -1,
   -1,  413,  384,  385,   -1,   -1,   -1,  389,  390,  391,
  392,  393,  394,  395,  396,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  262,   -1,  408,   -1,   -1,  411,
   -1,  413,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  423,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,  363,
  298,  365,  366,  367,  368,  369,  370,  371,   -1,  373,
  374,   -1,  376,  377,  378,  379,  380,  381,  382,  383,
  384,  385,   -1,  387,  388,  389,  390,  391,  392,  393,
  394,  395,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,   -1,  256,   -1,   -1,   -1,
   -1,  415,  262,   -1,  418,   -1,   -1,   -1,   -1,  423,
   -1,   -1,   -1,   -1,   -1,   -1,  364,   -1,  366,  367,
  368,  369,   -1,  371,   -1,  373,  374,   -1,  376,  377,
  378,  379,  380,   -1,  382,  383,  384,  385,  298,  387,
  388,  389,  390,  391,  392,  393,  394,  395,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,   -1,   -1,   -1,   -1,  413,   -1,  415,  262,   -1,
  418,   -1,   -1,   -1,   -1,  423,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,  363,  298,  365,  366,  367,  368,  369,
  370,  371,   -1,  373,  374,   -1,  376,  377,  378,  379,
  380,  381,  382,  383,  384,  385,   -1,  387,  388,  389,
  390,  391,  392,  393,  394,  395,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,   -1,
  256,   -1,   -1,   -1,   -1,  415,  262,   -1,  418,   -1,
   -1,   -1,   -1,  423,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  365,  366,  367,  368,  369,   -1,   -1,   -1,  373,
  374,   -1,  376,  377,  378,  379,  380,  381,  382,  383,
  384,  385,  298,  387,  388,  389,  390,  391,  392,  393,
  394,  395,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,   -1,   -1,   -1,   -1,   -1,
   -1,  415,   -1,   -1,  418,   -1,   -1,   -1,   -1,  423,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,  363,   -1,  365,
  366,  367,  368,  369,  370,  371,   -1,  373,  256,   -1,
  376,  377,  378,  379,  380,  381,  382,  383,  384,  385,
  261,  387,  388,  389,  390,  391,  392,  393,  394,  395,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  284,  256,   -1,   -1,   -1,   -1,  415,
  262,   -1,  418,   -1,   -1,   -1,  297,  423,   -1,   -1,
  301,  302,   -1,   -1,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,
  321,   -1,   -1,   -1,   -1,   -1,  298,   -1,   -1,   -1,
   -1,  339,  333,   -1,   -1,  336,  344,  338,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  363,   -1,  365,   -1,  367,
   -1,  369,  370,  371,   -1,   -1,   -1,  339,   -1,  256,
   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,  363,   -1,  365,   -1,  367,   -1,  369,  370,  371,
   -1,  373,  374,   -1,  376,  377,  378,  379,  380,  381,
  382,  383,  384,  385,   -1,  423,   -1,  389,  390,  391,
  392,  393,  394,  395,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  256,  408,   -1,   -1,   -1,
   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  423,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1,  294,   -1,   -1,  363,  298,  365,   -1,
  367,   -1,  369,  370,  371,   -1,   -1,   -1,   -1,   -1,
  377,  378,  379,  380,   -1,   -1,   -1,  384,  385,   -1,
   -1,   -1,  389,  390,  391,  392,  393,  394,  395,  396,
   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,  339,  262,
   -1,  408,   -1,  344,   -1,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,  423,   -1,   -1,   -1,
   -1,  362,  363,   -1,  365,  366,  367,   -1,  369,  370,
  371,   -1,  373,  374,   -1,  298,  377,  378,  379,  380,
   -1,   -1,   -1,  384,  385,   -1,   -1,   -1,  389,  390,
  391,  392,  393,  394,  395,  396,  256,   -1,   -1,   -1,
   -1,   -1,  262,   -1,   -1,   -1,   -1,  408,   -1,   -1,
  411,   -1,  413,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  344,  423,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,   -1,   -1,   -1,  298,   -1,
  363,   -1,  365,   -1,  367,   -1,  369,  370,  371,   -1,
  373,  374,   -1,   -1,  377,  378,  379,  380,   -1,  256,
   -1,  384,  385,   -1,   -1,  262,  389,  390,  391,  392,
  393,  394,  395,  396,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,  408,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
  423,  298,   -1,  363,   -1,  365,   -1,  367,   -1,  369,
  370,  371,   -1,  373,  374,   -1,   -1,  377,  378,  379,
  380,   -1,  256,   -1,  384,  385,   -1,   -1,  262,  389,
  390,  391,  392,  393,  394,  395,  396,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  408,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1,  423,  298,   -1,  363,   -1,  365,   -1,
  367,   -1,  369,  370,  371,   -1,  373,  374,   -1,   -1,
  377,  378,  379,  380,   -1,  256,   -1,  384,  385,   -1,
   -1,   -1,  389,  390,  391,  392,  393,  394,  395,  396,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  408,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,  423,   -1,   -1,  363,
   -1,  365,   -1,  367,   -1,  369,  370,  371,   -1,  373,
  374,   -1,   -1,  377,  378,  379,  380,   -1,  256,   -1,
  384,  385,   -1,   -1,   -1,  389,  390,  391,  392,  393,
  394,  395,  396,   -1,   -1,   -1,   -1,   -1,  339,   -1,
   -1,   -1,   -1,  344,  408,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,  423,
   -1,   -1,  363,   -1,  365,   -1,  367,   -1,  369,  370,
  371,   -1,   -1,   -1,   -1,   -1,  377,  378,  379,  380,
   -1,  256,   -1,  384,  385,   -1,   -1,   -1,  389,  390,
  391,  392,  393,  394,  395,  396,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  408,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,  423,   -1,   -1,  363,   -1,  365,   -1,  367,
   -1,  369,  370,  371,   -1,   -1,   -1,   -1,   -1,  377,
  378,  379,  380,   -1,  256,   -1,  384,  385,   -1,   -1,
   -1,  389,  390,  391,  392,  393,  394,  395,  396,   -1,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,
  408,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,  423,   -1,   -1,  363,   -1,
  365,   -1,  367,   -1,  369,  370,  371,   -1,   -1,   -1,
   -1,   -1,  377,  378,  379,  380,   -1,  256,   -1,  384,
  385,   -1,   -1,   -1,   -1,   -1,  391,  392,  393,  394,
  395,  396,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,  408,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,  423,   -1,
   -1,  363,   -1,  365,   -1,  367,   -1,  369,  370,  371,
   -1,   -1,   -1,   -1,   -1,  377,  378,  379,  380,   -1,
  256,   -1,  384,  385,   -1,   -1,   -1,   -1,   -1,  391,
  392,  393,  394,  395,  396,   -1,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,   -1,  344,  408,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,  423,   -1,   -1,  363,   -1,  365,   -1,  367,   -1,
  369,  370,  371,   -1,   -1,   -1,   -1,   -1,  377,  378,
  379,  380,   -1,  256,   -1,  384,  385,   -1,   -1,   -1,
   -1,   -1,  391,  392,  393,  394,  395,  396,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  408,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,  423,   -1,   -1,  363,   -1,  365,
   -1,  367,   -1,  369,  370,  371,   -1,   -1,   -1,   -1,
   -1,  377,  378,  379,  380,   -1,  256,   -1,  384,  385,
   -1,   -1,   -1,   -1,   -1,  391,  392,  393,  394,  395,
  396,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  344,  408,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,   -1,   -1,  423,   -1,   -1,
  363,   -1,  365,   -1,  367,   -1,  369,  370,  371,   -1,
   -1,   -1,   -1,   -1,  377,  378,  379,  380,   -1,  256,
   -1,  384,  385,   -1,   -1,   -1,   -1,   -1,  391,  392,
  393,  394,  395,  396,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,  408,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
  423,   -1,   -1,  363,   -1,  365,   -1,  367,   -1,  369,
  370,  371,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  379,
  380,   -1,  256,   -1,  384,  385,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  393,  394,  395,  396,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  408,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1,  423,   -1,   -1,  363,   -1,  365,   -1,
  367,   -1,  369,  370,  371,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  379,  380,   -1,  256,   -1,  384,  385,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  393,  394,  395,  396,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  408,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,  423,   -1,   -1,  363,
   -1,  365,   -1,  367,   -1,  369,  370,  371,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  379,  380,   -1,  256,   -1,
  384,  385,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  393,
  394,  395,  396,   -1,   -1,   -1,   -1,   -1,  339,   -1,
   -1,   -1,   -1,  344,  408,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,  423,
   -1,   -1,  363,   -1,  365,   -1,  367,   -1,  369,  370,
  371,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  379,  380,
   -1,  256,   -1,  384,  385,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  395,  396,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  408,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,  423,   -1,   -1,  363,   -1,  365,   -1,  367,
   -1,  369,  370,  371,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  379,  380,   -1,  256,   -1,  384,  385,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  395,  396,   -1,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,
  408,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,  423,   -1,   -1,  363,   -1,
  365,   -1,  367,   -1,  369,  370,  371,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  380,   -1,  256,   -1,  384,
  385,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  395,  396,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,  408,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,  423,   -1,
   -1,  363,   -1,  365,   -1,  367,   -1,  369,  370,  371,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  380,   -1,
  256,   -1,  384,  385,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  395,  396,   -1,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,   -1,  344,  408,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,  423,   -1,   -1,  363,   -1,  365,   -1,  367,   -1,
  369,  370,  371,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  380,   -1,  256,   -1,   -1,  385,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  395,  396,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  408,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,  423,   -1,   -1,  363,   -1,  365,
   -1,  367,   -1,  369,  370,  371,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  380,   -1,  256,   -1,   -1,  385,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  395,
  396,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  344,  408,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,   -1,   -1,  423,   -1,   -1,
  363,   -1,  365,   -1,  367,   -1,  369,  370,  371,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,  385,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  395,  396,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,  408,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
  423,   -1,   -1,  363,   -1,  365,   -1,  367,   -1,  369,
  370,  371,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,   -1,   -1,  385,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  395,  396,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  408,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1,  423,   -1,   -1,  363,   -1,  365,   -1,
  367,   -1,  369,  370,  371,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,  385,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  408,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,  423,   -1,  262,  363,
   -1,  365,   -1,  367,   -1,  369,  370,  371,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  385,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  396,   -1,  298,   -1,   -1,   -1,  339,   -1,
   -1,   -1,   -1,  344,  408,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,  423,
   -1,   -1,  363,   -1,  365,   -1,  367,   -1,  369,  370,
  371,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  385,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,
  364,   -1,  366,   -1,  368,   -1,   -1,  371,   -1,  373,
  374,   -1,  376,  377,  378,  379,  380,  381,  382,  383,
  384,  385,  423,  387,  388,  389,  390,  391,  392,  393,
  394,  395,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,   -1,   -1,  256,   -1,  413,
   -1,  415,   -1,   -1,  418,  264,  265,  266,  267,  423,
   -1,  270,  271,   -1,  273,  274,  275,  276,  277,  278,
  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,  287,  288,
  289,  290,  291,  292,   -1,   -1,  295,   -1,   -1,   -1,
  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,   -1,  337,   -1,
   -1,  340,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  362,   -1,   -1,   -1,  366,   -1,   -1,
   -1,   -1,  371,  372,  373,  374,  375,   -1,   -1,   -1,
  379,   -1,  381,   -1,   -1,   -1,   -1,   -1,  387,  388,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,   -1,  412,  413,  414,  415,  264,  265,  266,
  267,   -1,   -1,  270,  271,   -1,  273,  274,  275,  276,
  277,  278,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,
  287,  288,  289,  290,  291,  292,   -1,   -1,  295,   -1,
   -1,   -1,  299,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,   -1,
  337,   -1,   -1,  340,  341,   -1,   -1,  344,  345,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  362,   -1,   -1,   -1,  366,
   -1,   -1,   -1,   -1,  371,  372,  373,  374,  375,   -1,
   -1,   -1,  379,   -1,  381,   -1,   -1,   -1,   -1,   -1,
  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,   -1,  412,  413,  414,  415,  264,
  265,  266,  267,   -1,   -1,  270,  271,   -1,  273,  274,
  275,  276,  277,  278,  279,   -1,   -1,   -1,   -1,   -1,
  285,   -1,  287,  288,  289,  290,  291,  292,   -1,   -1,
  295,   -1,   -1,   -1,  299,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,   -1,  337,   -1,   -1,  340,  341,   -1,   -1,  344,
  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,   -1,   -1,
   -1,  366,   -1,   -1,   -1,   -1,  371,  372,  373,  374,
  375,   -1,   -1,   -1,  379,   -1,  381,   -1,   -1,   -1,
   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,   -1,  412,  413,  414,
  415,  264,  265,  266,  267,   -1,   -1,  270,  271,   -1,
  273,  274,  275,  276,  277,  278,  279,   -1,   -1,   -1,
   -1,   -1,  285,   -1,  287,  288,  289,  290,  291,  292,
   -1,   -1,  295,   -1,   -1,   -1,  299,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  314,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,   -1,  337,   -1,   -1,  340,  341,   -1,
   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,
   -1,   -1,   -1,  366,   -1,   -1,   -1,   -1,  371,  372,
  373,  374,  375,   -1,   -1,   -1,  379,   -1,  381,   -1,
   -1,   -1,   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  412,
  413,  414,  415,  264,  265,  266,  267,   -1,   -1,  270,
  271,   -1,  273,  274,  275,  276,  277,  278,  279,   -1,
   -1,   -1,   -1,   -1,  285,   -1,  287,  288,  289,  290,
  291,  292,   -1,   -1,  295,   -1,   -1,   -1,  299,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  314,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,   -1,  337,   -1,   -1,  340,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  362,   -1,   -1,   -1,  366,   -1,   -1,   -1,   -1,
  371,  372,  373,  374,  375,   -1,   -1,   -1,  379,   -1,
  381,   -1,   -1,   -1,   -1,   -1,  387,  388,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,  412,  413,  414,  415,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,  256,   -1,  275,  276,  277,   -1,
  279,   -1,   -1,  265,   -1,  267,  285,   -1,  270,  288,
   -1,   -1,   -1,  275,   -1,   -1,  295,  279,   -1,   -1,
   -1,  300,   -1,  302,  303,  304,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,  316,  300,  318,
  319,   -1,  304,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,  316,  334,  318,   -1,   -1,   -1,
  322,   -1,  341,   -1,   -1,  344,  345,   -1,  330,  331,
   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  362,  363,   -1,   -1,  366,   -1,   -1,
   -1,   -1,   -1,  372,  373,  374,  375,   -1,   -1,   -1,
  379,   -1,  381,   -1,   -1,   -1,   -1,   -1,  387,  388,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,   -1,  412,  413,  414,  415,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,  256,   -1,  275,  276,
  277,  413,  279,   -1,   -1,  265,   -1,  267,  285,   -1,
  270,  288,   -1,   -1,   -1,  275,   -1,   -1,  295,  279,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,  316,
  300,  318,  319,  320,  304,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,  316,  334,  318,   -1,
   -1,   -1,  322,   -1,  341,   -1,   -1,  344,  345,   -1,
  330,  331,   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  362,   -1,   -1,   -1,  366,
   -1,   -1,   -1,   -1,   -1,  372,  373,  374,  375,   -1,
   -1,   -1,  379,   -1,  381,   -1,   -1,   -1,   -1,   -1,
  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,   -1,  412,  413,  414,  415,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,  256,   -1,
  275,  276,  277,  413,  279,   -1,   -1,  265,   -1,  267,
  285,   -1,  270,  288,   -1,   -1,   -1,  275,   -1,   -1,
  295,  279,   -1,   -1,   -1,  300,   -1,  302,  303,  304,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,  316,  300,  318,  319,   -1,  304,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,  316,  334,
  318,   -1,   -1,   -1,  322,   -1,  341,   -1,   -1,  344,
  345,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,  337,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,   -1,   -1,
   -1,  366,   -1,   -1,   -1,   -1,   -1,  372,  373,  374,
  375,   -1,   -1,   -1,  379,   -1,  381,   -1,   -1,   -1,
   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,   -1,  412,  413,  414,
  415,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
  256,   -1,  275,  276,  277,  413,  279,   -1,   -1,  265,
   -1,  267,  285,   -1,  270,  288,   -1,   -1,   -1,  275,
   -1,   -1,  295,  279,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,  316,  300,  318,  319,   -1,  304,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
  316,  334,  318,   -1,   -1,   -1,  322,   -1,  341,   -1,
   -1,  344,  345,   -1,  330,  331,   -1,   -1,  334,   -1,
   -1,  337,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  366,   -1,   -1,   -1,   -1,   -1,  372,
  373,  374,  375,   -1,   -1,   -1,  379,   -1,  381,   -1,
   -1,   -1,   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  412,
  413,  414,  415,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,  413,  279,   -1,
   -1,   -1,   -1,   -1,  285,   -1,  261,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,  284,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,  297,   -1,  325,   -1,  327,  302,  329,  330,
  331,  332,  307,  334,  309,  310,  311,  312,   -1,   -1,
  341,   -1,  317,  344,  345,   -1,  321,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,
   -1,  336,   -1,  338,   -1,  366,   -1,   -1,   -1,   -1,
   -1,  372,  373,  374,  375,   -1,   -1,   -1,  379,   -1,
  381,   -1,   -1,   -1,   -1,   -1,  387,  388,   -1,   -1,
   -1,   -1,  367,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,  412,  413,  414,  415,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,  413,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,
   -1,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  362,  363,   -1,   -1,  366,   -1,   -1,   -1,
   -1,   -1,  372,  373,  374,  375,   -1,   -1,   -1,  379,
   -1,  381,   -1,   -1,   -1,   -1,   -1,  387,  388,   -1,
   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,
  279,   -1,  412,  413,  414,  415,  285,   -1,   -1,  288,
   -1,   -1,  422,   -1,   -1,   -1,  295,   -1,   -1,   -1,
   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,
   -1,   -1,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  362,   -1,   -1,   -1,  366,   -1,   -1,
   -1,   -1,   -1,  372,  373,  374,  375,   -1,   -1,   -1,
  379,   -1,  381,   -1,   -1,   -1,   -1,   -1,  387,  388,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  412,  413,  414,  415,  256,   -1,   -1,
   -1,   -1,  261,  422,   -1,   -1,  265,   -1,  267,   -1,
   -1,  270,   -1,  272,   -1,   -1,  275,   -1,  277,   -1,
  279,   -1,  281,   -1,   -1,  284,   -1,   -1,  287,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,  296,  297,   -1,
   -1,  300,  301,  302,   -1,  304,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,  316,  317,  318,
   -1,   -1,  321,  322,  323,   -1,   -1,   -1,   -1,   -1,
   -1,  330,  331,   -1,  333,  334,  335,  336,  337,  338,
   -1,   -1,   -1,  342,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,   -1,  261,   -1,  363,  364,  265,   -1,  267,   -1,
   -1,  270,   -1,  272,   -1,   -1,  275,   -1,  277,   -1,
  279,   -1,  281,   -1,   -1,  284,   -1,   -1,  287,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,  296,  297,   -1,
   -1,  300,  301,  302,   -1,  304,   -1,   -1,  307,   -1,
  309,  310,  311,  312,  413,   -1,   -1,  316,  317,  318,
   -1,   -1,  321,  322,  323,   -1,   -1,   -1,   -1,   -1,
   -1,  330,  331,   -1,  333,  334,  335,  336,  337,  338,
   -1,   -1,   -1,  342,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,   -1,  261,   -1,  363,  364,  265,   -1,  267,   -1,
   -1,  270,   -1,  272,   -1,   -1,  275,   -1,  277,   -1,
  279,   -1,  281,   -1,   -1,  284,   -1,   -1,  287,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,  296,  297,   -1,
   -1,  300,  301,  302,   -1,  304,   -1,   -1,  307,   -1,
  309,  310,  311,  312,  413,   -1,   -1,  316,  317,  318,
   -1,   -1,  321,  322,  323,   -1,   -1,   -1,   -1,   -1,
   -1,  330,  331,   -1,  333,  334,   -1,  336,  337,  338,
   -1,   -1,   -1,  342,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,   -1,  261,   -1,  363,  364,  265,   -1,  267,   -1,
   -1,  270,   -1,  272,   -1,   -1,  275,   -1,  277,   -1,
  279,   -1,  281,   -1,   -1,  284,   -1,   -1,  287,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,  296,  297,   -1,
   -1,  300,  301,  302,   -1,  304,   -1,   -1,  307,   -1,
  309,  310,  311,  312,  413,   -1,   -1,  316,  317,  318,
   -1,   -1,  321,  322,  323,   -1,   -1,   -1,   -1,   -1,
   -1,  330,  331,  262,  333,  334,   -1,  336,  337,  338,
   -1,   -1,   -1,  342,   -1,   -1,   -1,  256,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,  363,  364,  275,  276,  277,  298,
  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,  413,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  366,  367,  368,
  369,   -1,   -1,   -1,  373,  374,   -1,   -1,  377,  378,
  379,  380,  381,  382,  383,  384,  385,  366,  387,  388,
  389,  390,  391,  392,  393,  394,  395,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
   -1,   -1,   -1,   -1,   -1,   -1,  415,   -1,   -1,  418,
   -1,   -1,   -1,   -1,   -1,   -1,  261,   -1,  263,   -1,
  265,   -1,  267,  412,  413,  270,   -1,  272,  273,   -1,
  275,   -1,  277,   -1,  279,   -1,  281,  282,  283,  284,
   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,  293,  294,
  295,  296,  297,   -1,   -1,  300,  301,  302,   -1,  304,
   -1,  306,  307,  308,  309,  310,  311,  312,  313,   -1,
  315,  316,  317,  318,   -1,   -1,  321,  322,  323,   -1,
  325,   -1,   -1,   -1,   -1,  330,  331,   -1,  333,  334,
  261,  336,  337,  338,  265,   -1,  267,  342,   -1,  270,
   -1,  272,  273,   -1,  275,   -1,  277,   -1,  279,   -1,
  281,  282,  283,  284,  359,  360,  287,  288,   -1,   -1,
   -1,   -1,  293,   -1,  295,  296,  297,  372,   -1,  300,
   -1,  302,   -1,  304,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,   -1,  316,  317,  318,   -1,   -1,
  321,  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,
  331,   -1,  333,  334,   -1,  336,  337,  338,  413,   -1,
   -1,  342,   -1,   -1,   -1,   -1,   -1,  261,   -1,   -1,
   -1,  265,   -1,  267,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  363,  277,   -1,  279,   -1,  281,  282,  283,
  284,  372,   -1,  287,  288,   -1,   -1,   -1,   -1,  293,
   -1,  295,  296,  297,   -1,   -1,  300,   -1,  302,   -1,
  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,  316,  317,  318,   -1,   -1,  321,  322,  323,
   -1,   -1,  413,   -1,   -1,   -1,  330,  331,   -1,  333,
  334,  261,  336,  337,  338,  265,   -1,  267,  342,   -1,
  270,   -1,  272,  273,   -1,  275,   -1,  277,   -1,  279,
   -1,  281,  282,  283,  284,   -1,   -1,  287,  288,  363,
   -1,   -1,   -1,  293,   -1,  295,  296,  297,  372,   -1,
  300,   -1,  302,   -1,  304,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,  316,  317,  318,   -1,
   -1,  321,  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,
  330,  331,   -1,  333,  334,   -1,  336,  337,  338,  413,
   -1,   -1,  342,   -1,   -1,   -1,   -1,   -1,  261,   -1,
   -1,   -1,  265,   -1,  267,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  363,  277,   -1,  279,   -1,  281,  282,
  283,  284,  372,   -1,  287,  288,   -1,   -1,   -1,   -1,
  293,   -1,  295,  296,  297,   -1,   -1,  300,   -1,  302,
   -1,  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,   -1,  316,  317,  318,   -1,   -1,  321,  322,
  323,   -1,   -1,  413,   -1,   -1,   -1,  330,  331,   -1,
  333,  334,  261,  336,  337,  338,  265,   -1,  267,  342,
   -1,  270,   -1,  272,  273,   -1,  275,   -1,  277,   -1,
  279,   -1,  281,  282,  283,  284,   -1,   -1,  287,  288,
  363,   -1,   -1,   -1,  293,   -1,  295,  296,  297,  372,
   -1,  300,   -1,  302,   -1,  304,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,  316,  317,  318,
   -1,   -1,  321,  322,  323,   -1,   -1,   -1,   -1,   -1,
   -1,  330,  331,   -1,  333,  334,   -1,  336,  337,  338,
  413,   -1,   -1,  342,   -1,   -1,   -1,  261,   -1,   -1,
   -1,  265,   -1,  267,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,   -1,  277,  363,  279,   -1,  281,  282,  283,
  284,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,  293,
   -1,  295,  296,  297,   -1,   -1,  300,   -1,  302,   -1,
  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,  316,  317,  318,   -1,   -1,  321,  322,  323,
   -1,   -1,   -1,   -1,  413,   -1,  330,  331,   -1,  333,
  334,  261,  336,  337,  338,  265,   -1,  267,  342,   -1,
  270,   -1,  272,   -1,   -1,  275,   -1,  277,   -1,  279,
   -1,  281,   -1,   -1,  284,   -1,   -1,  287,  288,  363,
   -1,   -1,   -1,   -1,   -1,  295,  296,  297,   -1,   -1,
  300,  301,  302,   -1,  304,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,  316,  317,  318,   -1,
   -1,  321,  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,
  330,  331,   -1,  333,  334,   -1,  336,  337,  338,  413,
   -1,   -1,  342,   -1,   -1,   -1,  261,   -1,   -1,   -1,
  265,   -1,  267,   -1,   -1,  270,   -1,  272,   -1,   -1,
  275,   -1,  277,  363,  279,   -1,  281,   -1,   -1,  284,
   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,  296,  297,   -1,   -1,  300,  301,  302,   -1,  304,
   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,  316,  317,  318,   -1,  261,  321,  322,  323,   -1,
   -1,   -1,   -1,  413,   -1,  330,  331,   -1,  333,  334,
   -1,  336,  337,  338,   -1,   -1,   -1,  342,  284,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  297,   -1,  261,   -1,   -1,  302,   -1,  363,  305,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,
   -1,  317,   -1,   -1,   -1,  321,  284,   -1,   -1,  325,
   -1,   -1,   -1,  261,   -1,   -1,   -1,  333,   -1,  297,
  336,   -1,  338,   -1,  302,   -1,   -1,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,  284,   -1,  413,  317,
   -1,  357,   -1,  321,   -1,   -1,   -1,   -1,  364,  297,
  366,   -1,  368,   -1,  302,  333,   -1,   -1,  336,  307,
  338,  309,  310,  311,  312,  381,   -1,   -1,   -1,  317,
   -1,  264,  265,  321,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,  333,  279,   -1,  336,  265,
  338,  267,  285,   -1,  270,  288,   -1,  413,   -1,  275,
   -1,   -1,  295,  279,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,  288,  306,   -1,   -1,   -1,   -1,   -1,  295,
  313,   -1,   -1,  316,  300,  318,  319,   -1,  304,  322,
   -1,   -1,  325,   -1,  327,  413,  329,  330,  331,  332,
  316,  334,  318,   -1,   -1,   -1,  322,   -1,  341,   -1,
   -1,  344,  345,   -1,  330,  331,   -1,   -1,  334,   -1,
   -1,  337,   -1,   -1,   -1,  413,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  366,  367,   -1,  369,   -1,   -1,  372,
  373,  374,  375,   -1,   -1,   -1,  379,   -1,  381,   -1,
   -1,   -1,   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,  412,
  413,  414,  415,  285,   -1,  261,  288,  263,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,  413,  300,   -1,
  302,  303,  304,   -1,  306,   -1,   -1,   -1,  284,   -1,
   -1,  313,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,  297,   -1,  325,   -1,  327,  302,  329,  330,  331,
  332,  307,  334,  309,  310,  311,  312,   -1,   -1,  341,
   -1,  317,  344,  345,   -1,  321,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,
  336,   -1,  338,   -1,  366,   -1,   -1,  369,   -1,   -1,
  372,  373,  374,  375,   -1,   -1,   -1,  379,   -1,  381,
   -1,   -1,   -1,   -1,   -1,  387,  388,  363,  364,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
  412,  413,  414,  415,  285,   -1,  261,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,  306,   -1,   -1,   -1,  284,
   -1,   -1,  313,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,  297,   -1,  325,   -1,  327,  302,  329,  330,
  331,  332,  307,  334,  309,  310,  311,  312,   -1,   -1,
  341,   -1,  317,  344,  345,   -1,  321,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,
   -1,  336,   -1,  338,   -1,  366,   -1,   -1,   -1,   -1,
   -1,  372,  373,  374,  375,   -1,   -1,   -1,  379,   -1,
  381,   -1,   -1,   -1,  359,  360,  387,  388,  363,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,  412,  413,  414,  415,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,  337,   -1,   -1,
   -1,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  366,   -1,   -1,   -1,
   -1,   -1,  372,  373,  374,  375,   -1,   -1,   -1,  379,
   -1,  381,   -1,   -1,   -1,   -1,   -1,  387,  388,   -1,
   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,
  279,   -1,  412,  413,  414,  415,  285,   -1,  261,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,  284,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,  297,   -1,  325,   -1,  327,  302,
  329,  330,  331,  332,  307,  334,  309,  310,  311,  312,
   -1,   -1,  341,   -1,  317,  344,  345,   -1,  321,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  333,   -1,   -1,  336,  363,  338,   -1,  366,   -1,   -1,
   -1,   -1,   -1,  372,  373,  374,  375,   -1,   -1,   -1,
  379,   -1,  381,   -1,   -1,   -1,  359,  360,  387,  388,
  363,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,  412,  413,  414,  415,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  362,   -1,   -1,   -1,  366,   -1,
   -1,   -1,   -1,   -1,  372,  373,  374,  375,   -1,   -1,
   -1,  379,   -1,  381,   -1,   -1,   -1,   -1,   -1,  387,
  388,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,   -1,  279,   -1,  412,  413,  414,  415,  285,   -1,
   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,  345,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  362,   -1,   -1,   -1,  366,
   -1,   -1,   -1,   -1,   -1,  372,  373,  374,  375,   -1,
   -1,   -1,  379,   -1,  381,   -1,   -1,   -1,   -1,   -1,
  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,   -1,  279,   -1,  412,  413,  414,  415,  285,
   -1,  261,  288,  263,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,  297,   -1,  325,
   -1,  327,  302,  329,  330,  331,  332,  307,  334,  309,
  310,  311,  312,   -1,   -1,  341,   -1,  317,  344,  345,
   -1,  321,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,   -1,
  366,   -1,   -1,   -1,   -1,   -1,  372,  373,  374,  375,
   -1,   -1,   -1,  379,   -1,  381,   -1,   -1,   -1,   -1,
   -1,  387,  388,  363,   -1,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,  412,  413,  414,  415,
  285,   -1,  261,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,  284,   -1,   -1,   -1,   -1,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,  297,   -1,
  325,   -1,  327,  302,  329,  330,  331,  332,  307,  334,
  309,  310,  311,  312,   -1,   -1,  341,   -1,  317,  344,
  345,   -1,  321,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,
   -1,  366,   -1,   -1,   -1,   -1,   -1,  372,  373,  374,
  375,   -1,   -1,   -1,  379,   -1,  381,   -1,   -1,   -1,
  359,  360,  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,  412,  413,  414,
  415,  285,   -1,  261,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,  284,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,  297,
   -1,  325,   -1,  327,  302,  329,  330,  331,  332,  307,
  334,  309,  310,  311,  312,   -1,   -1,  341,   -1,  317,
  344,  345,   -1,  321,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,
  338,   -1,  366,   -1,   -1,   -1,   -1,   -1,  372,  373,
  374,  375,   -1,   -1,   -1,  379,   -1,  381,   -1,   -1,
   -1,   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,  412,  413,
  414,  415,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,
   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  366,   -1,   -1,   -1,   -1,   -1,  372,
  373,  374,  375,   -1,   -1,   -1,  379,   -1,  381,   -1,
   -1,   -1,   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,  412,
  413,  414,  415,  285,   -1,   -1,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,
   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  366,   -1,   -1,   -1,   -1,   -1,
  372,  373,  374,  375,   -1,   -1,   -1,  379,  285,  381,
   -1,   -1,   -1,   -1,   -1,  387,  388,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
  412,  413,  414,  415,  285,   -1,   -1,  288,   -1,   -1,
  327,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,  372,  373,  374,  375,   -1,
  377,  378,  379,  380,  381,  382,  383,  384,   -1,   -1,
  387,  388,  389,  390,  391,  392,  393,  394,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  366,   -1,   -1,   -1,   -1,
   -1,  372,  373,  374,  375,   -1,   -1,   -1,  379,   -1,
  381,   -1,   -1,   -1,   -1,   -1,  387,  388,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  263,   -1,  265,   -1,
  267,  412,  413,  270,  415,  272,  273,   -1,  275,   -1,
  277,   -1,  279,   -1,  281,  282,  283,   -1,   -1,   -1,
  287,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,  296,
   -1,   -1,   -1,  300,   -1,   -1,   -1,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,  316,
   -1,  318,   -1,   -1,   -1,  322,  323,   -1,   -1,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,
  337,   -1,   -1,   -1,   -1,  342,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  360,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,  372,  275,  276,  277,   -1,
  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  413,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,  265,  334,  267,   -1,  337,  270,
   -1,  272,  273,   -1,  275,   -1,  277,   -1,  279,   -1,
  281,  282,  283,   -1,   -1,   -1,  287,  288,   -1,   -1,
   -1,   -1,  293,   -1,  295,  296,   -1,  366,   -1,  300,
   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,   -1,   -1,
   -1,  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,
  331,   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,
   -1,  342,   -1,  412,  413,  265,   -1,  267,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,   -1,  277,   -1,  279,
   -1,  281,  282,  283,   -1,   -1,   -1,  287,  288,   -1,
   -1,  372,   -1,  293,   -1,  295,  296,   -1,   -1,   -1,
  300,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,   -1,
   -1,   -1,  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,
  330,  331,  413,  265,  334,  267,   -1,  337,  270,   -1,
   -1,  273,  342,  275,   -1,  277,   -1,  279,   -1,  281,
  282,  283,   -1,   -1,   -1,  287,  288,   -1,   -1,   -1,
   -1,  293,   -1,  295,   -1,  265,   -1,  267,  300,   -1,
  270,   -1,  304,  273,   -1,  275,   -1,  277,   -1,  279,
   -1,  281,  282,  283,  316,   -1,  318,  287,  288,   -1,
  322,   -1,   -1,  293,   -1,  295,   -1,   -1,  330,  331,
  300,   -1,  334,   -1,  304,  337,   -1,   -1,   -1,   -1,
  342,   -1,   -1,  413,   -1,   -1,  316,   -1,  318,   -1,
   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  330,  331,   -1,   -1,  334,   -1,   -1,  337,   -1,  265,
  372,  267,  342,   -1,  270,   -1,  272,   -1,   -1,  275,
   -1,  277,   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,
   -1,  287,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
  296,   -1,   -1,   -1,  300,   -1,   -1,   -1,  304,   -1,
   -1,  413,   -1,   -1,  265,   -1,  267,   -1,   -1,  270,
  316,   -1,  318,   -1,  275,   -1,  322,  323,  279,   -1,
   -1,   -1,   -1,   -1,  330,  331,   -1,  288,  334,   -1,
   -1,  337,   -1,  413,  295,   -1,  342,   -1,   -1,  300,
   -1,   -1,   -1,  304,  265,  306,  267,  308,   -1,  270,
   -1,   -1,  313,   -1,  275,  316,   -1,  318,  279,   -1,
   -1,  322,   -1,   -1,  325,   -1,   -1,  288,   -1,  330,
  331,   -1,   -1,  334,  295,   -1,  337,   -1,   -1,  300,
   -1,   -1,   -1,  304,   -1,  306,   -1,  308,  265,   -1,
  267,   -1,  313,  270,   -1,  316,   -1,  318,  275,   -1,
   -1,  322,  279,   -1,  325,   -1,  367,  413,   -1,  330,
  331,  288,  265,  334,  267,   -1,  337,  270,  295,   -1,
   -1,   -1,  275,  300,  277,   -1,  279,  304,  281,  306,
   -1,   -1,   -1,   -1,  287,  288,  313,   -1,   -1,  316,
   -1,  318,  295,   -1,  365,  322,   -1,  300,  325,   -1,
   -1,  304,  413,  330,  331,   -1,  265,  334,  267,   -1,
  337,  270,   -1,  316,   -1,  318,  275,   -1,   -1,  322,
  279,   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,  288,
  265,  334,  267,   -1,  337,  270,  295,  272,   -1,  342,
  275,  300,  413,   -1,  279,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  288,   -1,   -1,   -1,  316,   -1,  318,
  295,   -1,   -1,  322,   -1,  300,   -1,  302,   -1,  304,
   -1,  330,  331,   -1,   -1,  334,   -1,   -1,  337,   -1,
   -1,  316,   -1,  318,   -1,   -1,  413,  322,  323,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  265,  334,
  267,   -1,  337,  270,   -1,   -1,   -1,   -1,  275,   -1,
  413,   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  288,  265,   -1,  267,   -1,   -1,  270,  295,   -1,
   -1,   -1,  275,  300,   -1,   -1,  279,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  288,   -1,   -1,   -1,  316,
   -1,  318,  295,   -1,  413,  322,   -1,  300,   -1,   -1,
   -1,  304,   -1,  330,  331,   -1,  265,  334,  267,   -1,
  337,  270,   -1,  316,   -1,  318,  275,   -1,  413,  322,
  279,   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,  288,
  265,  334,  267,   -1,  337,  270,  295,   -1,   -1,   -1,
  275,  300,   -1,   -1,  279,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  288,   -1,   -1,   -1,  316,   -1,  318,
  295,   -1,   -1,  322,   -1,  300,   -1,   -1,   -1,  304,
   -1,  330,  331,   -1,  265,  334,  267,   -1,  337,  270,
   -1,  316,   -1,  318,  275,   -1,  413,  322,  279,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,  288,  265,  334,
  267,   -1,  337,  270,  295,   -1,   -1,   -1,  275,  300,
  413,   -1,  279,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  288,   -1,   -1,   -1,  316,   -1,  318,  295,   -1,
   -1,  322,   -1,  300,   -1,   -1,   -1,  304,   -1,  330,
  331,   -1,  265,  334,  267,   -1,  337,  270,   -1,  316,
   -1,  318,  275,   -1,  413,  322,  279,   -1,   -1,   -1,
   -1,   -1,   -1,  330,  331,  288,  265,  334,  267,   -1,
  337,  270,  295,   -1,   -1,   -1,  275,  300,  413,   -1,
  279,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,
   -1,   -1,   -1,  316,   -1,  318,  295,   -1,   -1,  322,
   -1,  300,   -1,   -1,   -1,  304,   -1,  330,  331,   -1,
  265,  334,  267,   -1,  337,  270,   -1,  316,   -1,  318,
  275,   -1,  413,  322,  279,   -1,   -1,   -1,   -1,   -1,
   -1,  330,  331,  288,  265,  334,  267,   -1,  337,  270,
  295,   -1,   -1,   -1,  275,  300,  413,   -1,  279,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,   -1,   -1,
   -1,  316,   -1,  318,  295,   -1,   -1,  322,   -1,  300,
   -1,  261,   -1,  304,   -1,  330,  331,   -1,   -1,  334,
   -1,   -1,  337,   -1,   -1,  316,   -1,  318,   -1,   -1,
  413,  322,   -1,   -1,  284,   -1,   -1,   -1,   -1,  330,
  331,   -1,   -1,  334,   -1,   -1,  337,  297,   -1,   -1,
   -1,  261,  302,   -1,  413,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,  315,   -1,  317,   -1,   -1,
   -1,  321,   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  333,   -1,   -1,  336,  297,  338,  261,
   -1,  263,  302,   -1,   -1,   -1,   -1,  307,  413,  309,
  310,  311,  312,   -1,   -1,  315,   -1,  317,   -1,   -1,
   -1,  321,  284,  363,  364,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  413,  333,   -1,  297,  336,   -1,  338,   -1,
  302,   -1,   -1,   -1,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,  315,   -1,  317,   -1,   -1,   -1,  321,
   -1,   -1,   -1,  363,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  333,   -1,   -1,  336,   -1,  338,
  };

#line 6020 "cs-parser.jay"

// <summary>
//  A class used to hold info about an operator declarator
// </summary>
class OperatorDeclaration {
	public readonly Operator.OpType optype;
	public readonly FullNamedExpression ret_type;
	public readonly Location location;

	public OperatorDeclaration (Operator.OpType op, FullNamedExpression ret_type, Location location)
	{
		optype = op;
		this.ret_type = ret_type;
		this.location = location;
	}
}

void Error_ExpectingTypeName (Expression expr)
{
	if (expr is Invocation){
		Report.Error (1002, expr.Location, "Expecting `;'");
	} else {
		Expression.Error_InvalidExpressionStatement (Report, expr.Location);
	}
}

void Error_ParameterModifierNotValid (string modifier, Location loc)
{
	Report.Error (631, loc, "The parameter modifier `{0}' is not valid in this context",
			              modifier);
}

void Error_DuplicateParameterModifier (Location loc, Parameter.Modifier mod)
{
	Report.Error (1107, loc, "Duplicate parameter modifier `{0}'",
  		Parameter.GetModifierSignature (mod));
}

void Error_TypeExpected (Location loc)
{
	Report.Error (1031, loc, "Type expected");
}

void Error_UnsafeCodeNotAllowed (Location loc)
{
	Report.Error (227, loc, "Unsafe code requires the `unsafe' command line option to be specified");
}

void Warning_EmptyStatement (Location loc)
{
	Report.Warning (642, 3, loc, "Possible mistaken empty statement");
}

void Error_NamedArgumentExpected (NamedArgument a)
{
	Report.Error (1738, a.Location, "Named arguments must appear after the positional arguments");
}

void push_current_class (TypeContainer tc, object partial_token)
{
	if (RootContext.EvalMode){
		tc.ModFlags = (tc.ModFlags & ~(Modifiers.PRIVATE|Modifiers.INTERNAL)) | Modifiers.PUBLIC;
		undo.AddTypeContainer (current_container, tc);
	}

	if (partial_token != null)
		current_container = current_container.AddPartial (tc);
	else
		current_container = current_container.AddTypeContainer (tc);

	++lexer.parsing_declaration;
	current_class = tc;
	ubag.PushTypeDeclaration (tc);
}

DeclSpace pop_current_class ()
{
	DeclSpace retval = current_class;

	current_class = current_class.Parent;
	current_container = current_class.PartialContainer;
	ubag.PopTypeDeclaration ();
	
	return retval;
}

// <summary>
//   Given the @class_name name, it creates a fully qualified name
//   based on the containing declaration space
// </summary>
MemberName
MakeName (MemberName class_name)
{
	Namespace ns = current_namespace.NS;

	if (current_container == RootContext.ToplevelTypes) {
		if (ns.Name.Length != 0)
			return new MemberName (ns.MemberName, class_name);
		else
			return class_name;
	} else {
		return new MemberName (current_container.MemberName, class_name);
	}
}

[System.Diagnostics.Conditional ("FULL_AST")]
void StoreModifierLocation (object token, Location loc)
{
	if (lbag == null)
		return;

	if (mod_locations == null)
  		mod_locations = new List<Tuple<Modifiers, Location>> ();

	mod_locations.Add (Tuple.Create ((Modifiers) token, loc));
}

List<Tuple<Modifiers, Location>> GetModifierLocations ()
{
	var result = mod_locations;
	mod_locations = null;
	return result;
}

string CheckAttributeTarget (string a, Location l)
{
	switch (a) {
	case "assembly" : case "module" : case "field" : case "method" : case "param" : case "property" : case "type" :
			return a;
	}

	Report.Warning (658, 1, l,
		 "`{0}' is invalid attribute target. All attributes in this attribute section will be ignored", a);
	return string.Empty;
}

static bool IsUnaryOperator (Operator.OpType op)
{
	switch (op) {
		
	case Operator.OpType.LogicalNot: 
	case Operator.OpType.OnesComplement: 
	case Operator.OpType.Increment:
	case Operator.OpType.Decrement:
	case Operator.OpType.True: 
	case Operator.OpType.False: 
	case Operator.OpType.UnaryPlus: 
	case Operator.OpType.UnaryNegation:
		return true;
	}
	return false;
}

void syntax_error (Location l, string msg)
{
	Report.Error (1003, l, "Syntax error, " + msg);
}

Tokenizer lexer;

public Tokenizer Lexer {
	get {
		return lexer;
	}
}		   

static CSharpParser ()
{
	oob_stack = new Stack<object> ();
}

public CSharpParser (SeekableStreamReader reader, CompilationUnit file, CompilerContext ctx)
{
	if (RootContext.EvalMode)
		undo = new Undo ();

	this.file = file;
	this.compiler = ctx;
	current_namespace = new NamespaceEntry (ctx, null, file, null);
	current_class = current_namespace.SlaveDeclSpace;
	current_container = current_class.PartialContainer; // == RootContest.ToplevelTypes
	oob_stack.Clear ();
	lexer = new Tokenizer (reader, file, ctx);
	
	use_global_stacks = true;
}

public void parse ()
{
	eof_token = Token.EOF;
	Tokenizer.LocatedToken.Initialize ();
	
	try {
		if (yacc_verbose_flag > 1)
			yyparse (lexer, new yydebug.yyDebugSimple ());
		else
			yyparse (lexer);
			
		Tokenizer tokenizer = lexer as Tokenizer;
		tokenizer.cleanup ();		
	} catch (Exception e){
	  	if (e is yyParser.yyUnexpectedEof) {
			Error_SyntaxError (yyToken);
			UnexpectedEOF = true;
			return;
		}
			
		if (e is yyParser.yyException) {
			Report.Error (-25, lexer.Location, "Parsing error");
		} else {
			// Used by compiler-tester to test internal errors
			if (yacc_verbose_flag > 0)
				throw;
		
			Report.Error (589, lexer.Location, "Internal compiler error during parsing");
		}
	}

	if (RootContext.ToplevelTypes.NamespaceEntry != null)
		throw new InternalErrorException ("who set it?");
}

void CheckToken (int error, int yyToken, string msg, Location loc)
{
	if (yyToken >= Token.FIRST_KEYWORD && yyToken <= Token.LAST_KEYWORD)
		Report.Error (error, loc, "{0}: `{1}' is a keyword", msg, GetTokenName (yyToken));
	else
		Report.Error (error, loc, msg);
}

string ConsumeStoredComment ()
{
	string s = tmpComment;
	tmpComment = null;
	Lexer.doc_state = XmlCommentState.Allowed;
	return s;
}

Location GetLocation (object obj)
{
	var lt = obj as Tokenizer.LocatedToken;
	if (lt != null)
		return lt.Location;
		
	var mn = obj as MemberName;
	if (mn != null)
		return mn.Location;
		
	var expr = obj as Expression;
	if (expr != null)
		return expr.Location;

	return lexer.Location;
}

Report Report {
	get { return compiler.Report; }
}

public LocationsBag LocationsBag {
	get {
		return lbag;
	}
	set {
		lbag = value;
	}
}

public UsingsBag UsingsBag {
	get {
		return ubag;
	}
	set {
		ubag = value;
	}
}

void start_block (Location loc)
{
	if (current_block == null) {
		current_block = new ToplevelBlock (compiler, current_local_parameters, loc);
	} else if (parsing_anonymous_method) {
		current_block = new ParametersBlock (current_block, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else {
		current_block = new ExplicitBlock (current_block, loc, Location.Null);
	}
}

Block
end_block (Location loc)
{
	Block retval = current_block.Explicit;
	retval.SetEndLocation (loc);
	current_block = retval.Parent;
	return retval;
}

void start_anonymous (bool lambda, ParametersCompiled parameters, Location loc)
{
	if (RootContext.Version == LanguageVersion.ISO_1){
		Report.FeatureIsNotAvailable (loc, "anonymous methods");
	}

	oob_stack.Push (current_anonymous_method);
	oob_stack.Push (current_local_parameters);
	oob_stack.Push (current_variable);

	current_local_parameters = parameters;

	current_anonymous_method = lambda 
		? new LambdaExpression (loc) 
		: new AnonymousMethodExpression (loc);

	// Force the next block to be created as a ToplevelBlock
	parsing_anonymous_method = true;
}

/*
 * Completes the anonymous method processing, if lambda_expr is null, this
 * means that we have a Statement instead of an Expression embedded 
 */
AnonymousMethodExpression end_anonymous (ParametersBlock anon_block)
{
	AnonymousMethodExpression retval;

	current_anonymous_method.Block = anon_block;
	retval = current_anonymous_method;

	current_variable = (BlockVariableDeclaration) oob_stack.Pop ();
	current_local_parameters = (ParametersCompiled) oob_stack.Pop ();
	current_anonymous_method = (AnonymousMethodExpression) oob_stack.Pop ();

	return retval;
}

public NamespaceEntry CurrentNamespace {
       get { 
       	   return current_namespace;
       }
}

void Error_SyntaxError (int token)
{
	Error_SyntaxError (0, token, "Unexpected symbol");
}

void Error_SyntaxError (int error_code, int token, string msg)
{
	// An error message has been reported by tokenizer
	if (token == Token.ERROR)
		return;

	string symbol = GetSymbolName (token);
	string expecting = GetExpecting ();
	var loc = lexer.Location - symbol.Length;
	
	if (error_code == 0) {
		if (expecting == "`identifier'") {
			if (token > Token.FIRST_KEYWORD && token < Token.LAST_KEYWORD) {
				Report.Error (1041, loc, "Identifier expected, `{0}' is a keyword", symbol);
				return;
			}
			
			error_code = 1001;
			expecting = "identifier";
		} else if (expecting == "`)'") {
			error_code = 1026;
		} else {
			error_code = 1525;
		}
	}
	
	if (string.IsNullOrEmpty (expecting))
		Report.Error (error_code, loc, "{1} `{0}'", symbol, msg);
	else
		Report.Error (error_code, loc, "{2} `{0}', expecting {1}", symbol, expecting, msg);	  
}

string GetExpecting ()
{
	int [] tokens = yyExpectingTokens (yyExpectingState);
	var names = new List<string> (tokens.Length);
	bool has_type = false;
	bool has_identifier = false;
	for (int i = 0; i < tokens.Length; i++){
		int token = tokens [i];
		has_identifier |= token == Token.IDENTIFIER;
		
		string name = GetTokenName (token);
		if (name == "<internal>")
			continue;
			
		has_type |= name == "type";
		if (names.Contains (name))
			continue;
		
		names.Add (name);
	}

	//
	// Too many tokens to enumerate
	//
	if (names.Count > 8)
		return null;

	if (has_type && has_identifier)
		names.Remove ("identifier");

	if (names.Count == 1)
		return "`" + GetTokenName (tokens [0]) + "'";
	
	StringBuilder sb = new StringBuilder ();
	names.Sort ();
	int count = names.Count;
	for (int i = 0; i < count; i++){
		bool last = i + 1 == count;
		if (last)
			sb.Append ("or ");
		sb.Append ('`');
		sb.Append (names [i]);
		sb.Append (last ? "'" : count < 3 ? "' " : "', ");
	}
	return sb.ToString ();
}


string GetSymbolName (int token)
{
	switch (token){
	case Token.LITERAL:
		return ((Constant)lexer.Value).GetValue ().ToString ();
	case Token.IDENTIFIER:
		return ((Tokenizer.LocatedToken)lexer.Value).Value;

	case Token.BOOL:
		return "bool";
	case Token.BYTE:
		return "byte";
	case Token.CHAR:
		return "char";
	case Token.VOID:
		return "void";
	case Token.DECIMAL:
		return "decimal";
	case Token.DOUBLE:
		return "double";
	case Token.FLOAT:
		return "float";
	case Token.INT:
		return "int";
	case Token.LONG:
		return "long";
	case Token.SBYTE:
		return "sbyte";
	case Token.SHORT:
		return "short";
	case Token.STRING:
		return "string";
	case Token.UINT:
		return "uint";
	case Token.ULONG:
		return "ulong";
	case Token.USHORT:
		return "ushort";
	case Token.OBJECT:
		return "object";
		
	case Token.PLUS:
		return "+";
	case Token.UMINUS:
	case Token.MINUS:
		return "-";
	case Token.BANG:
		return "!";
	case Token.BITWISE_AND:
		return "&";
	case Token.BITWISE_OR:
		return "|";
	case Token.STAR:
		return "*";
	case Token.PERCENT:
		return "%";
	case Token.DIV:
		return "/";
	case Token.CARRET:
		return "^";
	case Token.OP_INC:
		return "++";
	case Token.OP_DEC:
		return "--";
	case Token.OP_SHIFT_LEFT:
		return "<<";
	case Token.OP_SHIFT_RIGHT:
		return ">>";
	case Token.OP_LT:
		return "<";
	case Token.OP_GT:
		return ">";
	case Token.OP_LE:
		return "<=";
	case Token.OP_GE:
		return ">=";
	case Token.OP_EQ:
		return "==";
	case Token.OP_NE:
		return "!=";
	case Token.OP_AND:
		return "&&";
	case Token.OP_OR:
		return "||";
	case Token.OP_PTR:
		return "->";
	case Token.OP_COALESCING:	
		return "??";
	case Token.OP_MULT_ASSIGN:
		return "*=";
	case Token.OP_DIV_ASSIGN:
		return "/=";
	case Token.OP_MOD_ASSIGN:
		return "%=";
	case Token.OP_ADD_ASSIGN:
		return "+=";
	case Token.OP_SUB_ASSIGN:
		return "-=";
	case Token.OP_SHIFT_LEFT_ASSIGN:
		return "<<=";
	case Token.OP_SHIFT_RIGHT_ASSIGN:
		return ">>=";
	case Token.OP_AND_ASSIGN:
		return "&=";
	case Token.OP_XOR_ASSIGN:
		return "^=";
	case Token.OP_OR_ASSIGN:
		return "|=";
	}

	return GetTokenName (token);
}

static string GetTokenName (int token)
{
	switch (token){
	case Token.ABSTRACT:
		return "abstract";
	case Token.AS:
		return "as";
	case Token.ADD:
		return "add";
	case Token.BASE:
		return "base";
	case Token.BREAK:
		return "break";
	case Token.CASE:
		return "case";
	case Token.CATCH:
		return "catch";
	case Token.CHECKED:
		return "checked";
	case Token.CLASS:
		return "class";
	case Token.CONST:
		return "const";
	case Token.CONTINUE:
		return "continue";
	case Token.DEFAULT:
		return "default";
	case Token.DELEGATE:
		return "delegate";
	case Token.DO:
		return "do";
	case Token.ELSE:
		return "else";
	case Token.ENUM:
		return "enum";
	case Token.EVENT:
		return "event";
	case Token.EXPLICIT:
		return "explicit";
	case Token.EXTERN:
		return "extern";
	case Token.FALSE:
		return "false";
	case Token.FINALLY:
		return "finally";
	case Token.FIXED:
		return "fixed";
	case Token.FOR:
		return "for";
	case Token.FOREACH:
		return "foreach";
	case Token.GOTO:
		return "goto";
	case Token.IF:
		return "if";
	case Token.IMPLICIT:
		return "implicit";
	case Token.IN:
		return "in";
	case Token.INTERFACE:
		return "interface";
	case Token.INTERNAL:
		return "internal";
	case Token.IS:
		return "is";
	case Token.LOCK:
		return "lock";
	case Token.NAMESPACE:
		return "namespace";
	case Token.NEW:
		return "new";
	case Token.NULL:
		return "null";
	case Token.OPERATOR:
		return "operator";
	case Token.OUT:
		return "out";
	case Token.OVERRIDE:
		return "override";
	case Token.PARAMS:
		return "params";
	case Token.PRIVATE:
		return "private";
	case Token.PROTECTED:
		return "protected";
	case Token.PUBLIC:
		return "public";
	case Token.READONLY:
		return "readonly";
	case Token.REF:
		return "ref";
	case Token.RETURN:
		return "return";
	case Token.REMOVE:
		return "remove";
	case Token.SEALED:
		return "sealed";
	case Token.SIZEOF:
		return "sizeof";
	case Token.STACKALLOC:
		return "stackalloc";
	case Token.STATIC:
		return "static";
	case Token.STRUCT:
		return "struct";
	case Token.SWITCH:
		return "switch";
	case Token.THIS:
		return "this";
	case Token.THROW:
		return "throw";
	case Token.TRUE:
		return "true";
	case Token.TRY:
		return "try";
	case Token.TYPEOF:
		return "typeof";
	case Token.UNCHECKED:
		return "unchecked";
	case Token.UNSAFE:
		return "unsafe";
	case Token.USING:
		return "using";
	case Token.VIRTUAL:
		return "virtual";
	case Token.VOLATILE:
		return "volatile";
	case Token.WHERE:
		return "where";
	case Token.WHILE:
		return "while";
	case Token.ARGLIST:
		return "__arglist";
	case Token.PARTIAL:
		return "partial";
	case Token.ARROW:
		return "=>";
	case Token.FROM:
	case Token.FROM_FIRST:
		return "from";
	case Token.JOIN:
		return "join";
	case Token.ON:
		return "on";
	case Token.EQUALS:
		return "equals";
	case Token.SELECT:
		return "select";
	case Token.GROUP:
		return "group";
	case Token.BY:
		return "by";
	case Token.LET:
		return "let";
	case Token.ORDERBY:
		return "orderby";
	case Token.ASCENDING:
		return "ascending";
	case Token.DESCENDING:
		return "descending";
	case Token.INTO:
		return "into";
	case Token.GET:
		return "get";
	case Token.SET:
		return "set";
	case Token.OPEN_BRACE:
		return "{";
	case Token.CLOSE_BRACE:
		return "}";
	case Token.OPEN_BRACKET:
	case Token.OPEN_BRACKET_EXPR:
		return "[";
	case Token.CLOSE_BRACKET:
		return "]";
	case Token.OPEN_PARENS_CAST:
	case Token.OPEN_PARENS_LAMBDA:
	case Token.OPEN_PARENS:
		return "(";
	case Token.CLOSE_PARENS:
		return ")";
	case Token.DOT:
		return ".";
	case Token.COMMA:
		return ",";
	case Token.DEFAULT_COLON:
		return "default:";
	case Token.COLON:
		return ":";
	case Token.SEMICOLON:
		return ";";
	case Token.TILDE:
		return "~";
		
	case Token.PLUS:
	case Token.UMINUS:
	case Token.MINUS:
	case Token.BANG:
	case Token.OP_LT:
	case Token.OP_GT:
	case Token.BITWISE_AND:
	case Token.BITWISE_OR:
	case Token.STAR:
	case Token.PERCENT:
	case Token.DIV:
	case Token.CARRET:
	case Token.OP_INC:
	case Token.OP_DEC:
	case Token.OP_SHIFT_LEFT:
	case Token.OP_SHIFT_RIGHT:
	case Token.OP_LE:
	case Token.OP_GE:
	case Token.OP_EQ:
	case Token.OP_NE:
	case Token.OP_AND:
	case Token.OP_OR:
	case Token.OP_PTR:
	case Token.OP_COALESCING:	
	case Token.OP_MULT_ASSIGN:
	case Token.OP_DIV_ASSIGN:
	case Token.OP_MOD_ASSIGN:
	case Token.OP_ADD_ASSIGN:
	case Token.OP_SUB_ASSIGN:
	case Token.OP_SHIFT_LEFT_ASSIGN:
	case Token.OP_SHIFT_RIGHT_ASSIGN:
	case Token.OP_AND_ASSIGN:
	case Token.OP_XOR_ASSIGN:
	case Token.OP_OR_ASSIGN:
		return "<operator>";

	case Token.BOOL:
	case Token.BYTE:
	case Token.CHAR:
	case Token.VOID:
	case Token.DECIMAL:
	case Token.DOUBLE:
	case Token.FLOAT:
	case Token.INT:
	case Token.LONG:
	case Token.SBYTE:
	case Token.SHORT:
	case Token.STRING:
	case Token.UINT:
	case Token.ULONG:
	case Token.USHORT:
	case Token.OBJECT:
		return "type";
	
	case Token.ASSIGN:
		return "=";
	case Token.OP_GENERICS_LT:
	case Token.GENERIC_DIMENSION:
		return "<";
	case Token.OP_GENERICS_GT:
		return ">";
	case Token.INTERR:
	case Token.INTERR_NULLABLE:
		return "?";
	case Token.DOUBLE_COLON:
		return "::";
	case Token.LITERAL:
		return "value";
	case Token.IDENTIFIER:
		return "identifier";

	case Token.EOF:
		return "end-of-file";

		// All of these are internal.
	case Token.NONE:
	case Token.ERROR:
	case Token.FIRST_KEYWORD:
	case Token.EVAL_COMPILATION_UNIT_PARSER:
	case Token.EVAL_USING_DECLARATIONS_UNIT_PARSER:
	case Token.EVAL_STATEMENT_PARSER:
	case Token.LAST_KEYWORD:
	case Token.GENERATE_COMPLETION:
	case Token.COMPLETE_COMPLETION:
		return "<internal>";

		// A bit more robust.
	default:
		return yyNames [token];
        }
}

/* end end end */
}
#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 Console.Error.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int EOF = 257;
  public const int NONE = 258;
  public const int ERROR = 259;
  public const int FIRST_KEYWORD = 260;
  public const int ABSTRACT = 261;
  public const int AS = 262;
  public const int ADD = 263;
  public const int BASE = 264;
  public const int BOOL = 265;
  public const int BREAK = 266;
  public const int BYTE = 267;
  public const int CASE = 268;
  public const int CATCH = 269;
  public const int CHAR = 270;
  public const int CHECKED = 271;
  public const int CLASS = 272;
  public const int CONST = 273;
  public const int CONTINUE = 274;
  public const int DECIMAL = 275;
  public const int DEFAULT = 276;
  public const int DELEGATE = 277;
  public const int DO = 278;
  public const int DOUBLE = 279;
  public const int ELSE = 280;
  public const int ENUM = 281;
  public const int EVENT = 282;
  public const int EXPLICIT = 283;
  public const int EXTERN = 284;
  public const int FALSE = 285;
  public const int FINALLY = 286;
  public const int FIXED = 287;
  public const int FLOAT = 288;
  public const int FOR = 289;
  public const int FOREACH = 290;
  public const int GOTO = 291;
  public const int IF = 292;
  public const int IMPLICIT = 293;
  public const int IN = 294;
  public const int INT = 295;
  public const int INTERFACE = 296;
  public const int INTERNAL = 297;
  public const int IS = 298;
  public const int LOCK = 299;
  public const int LONG = 300;
  public const int NAMESPACE = 301;
  public const int NEW = 302;
  public const int NULL = 303;
  public const int OBJECT = 304;
  public const int OPERATOR = 305;
  public const int OUT = 306;
  public const int OVERRIDE = 307;
  public const int PARAMS = 308;
  public const int PRIVATE = 309;
  public const int PROTECTED = 310;
  public const int PUBLIC = 311;
  public const int READONLY = 312;
  public const int REF = 313;
  public const int RETURN = 314;
  public const int REMOVE = 315;
  public const int SBYTE = 316;
  public const int SEALED = 317;
  public const int SHORT = 318;
  public const int SIZEOF = 319;
  public const int STACKALLOC = 320;
  public const int STATIC = 321;
  public const int STRING = 322;
  public const int STRUCT = 323;
  public const int SWITCH = 324;
  public const int THIS = 325;
  public const int THROW = 326;
  public const int TRUE = 327;
  public const int TRY = 328;
  public const int TYPEOF = 329;
  public const int UINT = 330;
  public const int ULONG = 331;
  public const int UNCHECKED = 332;
  public const int UNSAFE = 333;
  public const int USHORT = 334;
  public const int USING = 335;
  public const int VIRTUAL = 336;
  public const int VOID = 337;
  public const int VOLATILE = 338;
  public const int WHERE = 339;
  public const int WHILE = 340;
  public const int ARGLIST = 341;
  public const int PARTIAL = 342;
  public const int ARROW = 343;
  public const int FROM = 344;
  public const int FROM_FIRST = 345;
  public const int JOIN = 346;
  public const int ON = 347;
  public const int EQUALS = 348;
  public const int SELECT = 349;
  public const int GROUP = 350;
  public const int BY = 351;
  public const int LET = 352;
  public const int ORDERBY = 353;
  public const int ASCENDING = 354;
  public const int DESCENDING = 355;
  public const int INTO = 356;
  public const int INTERR_NULLABLE = 357;
  public const int EXTERN_ALIAS = 358;
  public const int GET = 359;
  public const int SET = 360;
  public const int LAST_KEYWORD = 361;
  public const int OPEN_BRACE = 362;
  public const int CLOSE_BRACE = 363;
  public const int OPEN_BRACKET = 364;
  public const int CLOSE_BRACKET = 365;
  public const int OPEN_PARENS = 366;
  public const int CLOSE_PARENS = 367;
  public const int DOT = 368;
  public const int COMMA = 369;
  public const int COLON = 370;
  public const int SEMICOLON = 371;
  public const int TILDE = 372;
  public const int PLUS = 373;
  public const int MINUS = 374;
  public const int BANG = 375;
  public const int ASSIGN = 376;
  public const int OP_LT = 377;
  public const int OP_GT = 378;
  public const int BITWISE_AND = 379;
  public const int BITWISE_OR = 380;
  public const int STAR = 381;
  public const int PERCENT = 382;
  public const int DIV = 383;
  public const int CARRET = 384;
  public const int INTERR = 385;
  public const int DOUBLE_COLON = 386;
  public const int OP_INC = 387;
  public const int OP_DEC = 388;
  public const int OP_SHIFT_LEFT = 389;
  public const int OP_SHIFT_RIGHT = 390;
  public const int OP_LE = 391;
  public const int OP_GE = 392;
  public const int OP_EQ = 393;
  public const int OP_NE = 394;
  public const int OP_AND = 395;
  public const int OP_OR = 396;
  public const int OP_MULT_ASSIGN = 397;
  public const int OP_DIV_ASSIGN = 398;
  public const int OP_MOD_ASSIGN = 399;
  public const int OP_ADD_ASSIGN = 400;
  public const int OP_SUB_ASSIGN = 401;
  public const int OP_SHIFT_LEFT_ASSIGN = 402;
  public const int OP_SHIFT_RIGHT_ASSIGN = 403;
  public const int OP_AND_ASSIGN = 404;
  public const int OP_XOR_ASSIGN = 405;
  public const int OP_OR_ASSIGN = 406;
  public const int OP_PTR = 407;
  public const int OP_COALESCING = 408;
  public const int OP_GENERICS_LT = 409;
  public const int OP_GENERICS_LT_DECL = 410;
  public const int OP_GENERICS_GT = 411;
  public const int LITERAL = 412;
  public const int IDENTIFIER = 413;
  public const int OPEN_PARENS_LAMBDA = 414;
  public const int OPEN_PARENS_CAST = 415;
  public const int GENERIC_DIMENSION = 416;
  public const int DEFAULT_COLON = 417;
  public const int OPEN_BRACKET_EXPR = 418;
  public const int EVAL_STATEMENT_PARSER = 419;
  public const int EVAL_COMPILATION_UNIT_PARSER = 420;
  public const int EVAL_USING_DECLARATIONS_UNIT_PARSER = 421;
  public const int GENERATE_COMPLETION = 422;
  public const int COMPLETE_COMPLETION = 423;
  public const int UMINUS = 424;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }
  internal class yyUnexpectedEof : yyException {
    public yyUnexpectedEof (string message) : base (message) {
    }
    public yyUnexpectedEof () : base ("") {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
